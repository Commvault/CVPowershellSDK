#
# Module 'Commvault.SQLServer'
#
# Generated by: Commvault
#
# Generated on: 5/22/2019
#

using module 'Commvault.TypeDefinitions'

Set-StrictMode -Version latest


function Get-CVSQLClientDetail { 
<#
.SYNOPSIS
    Method to retrieve protected SQL client details.

.DESCRIPTION
    Method to retrieve protected SQL client details.
    
.PARAMETER Name
    Get detail properties for SQL client by Name.

.PARAMETER ClientObject
    Get detail properties for SQL client by piping ClientObject.

.PARAMETER InstanceName
    Filter output by SQL InstanceName.

.PARAMETER InstanceId
    Filter output by SQL InstanceId.

.EXAMPLE
    Get-CVSQLClientDetail

.EXAMPLE
    Get-CVSQLClientDetail -Name SNOWSQL1

.EXAMPLE
    Get-CVClient | Get-CVSQLClientDetail

.EXAMPLE
    Get-CVSQLClientDetail -Name SNOWSQL1 -InstanceId 50

.EXAMPLE
    Get-CVSQLClientDetail -Name SNOWSQL1 | Select-Object -ExpandProperty SqlInstance

.OUTPUTS
    Outputs [PSCustomObject] containing SQL client details.

.NOTES
    Author: Gary Stoops
    Company: Commvault
#>
    [CmdletBinding(DefaultParameterSetName = 'ByName')]
    [OutputType([PSCustomObject])]
    param(
        [Parameter(Mandatory = $True, ParameterSetName = 'ByName')]
        [ValidateNotNullorEmpty()]
        [String] $Name,

        [Parameter(Mandatory = $True, ParameterSetName = 'ByObject', ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [System.Object] $ClientObject,

        [Parameter(Mandatory = $False)]
        [ValidateNotNullorEmpty()]
        [String] $InstanceName,

        [Parameter(Mandatory = $False)]
        [ValidateNotNullorEmpty()]
        [Int32] $InstanceId
    )

    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
            $endpointSave = $sessionObj.requestProps.endpoint
        }
        catch {
            throw $_
        }
    }

    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"

        try {
            $sessionObj.requestProps.endpoint = $endpointSave

            if ($PSCmdlet.ParameterSetName -eq 'ByName') {
                $clientObj = Get-CVClient -Name $Name
                if ($null -eq $clientObj) {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): client not found having name [$Name]"
                    return
                }
                else {
                    $ClientObject = $clientObj
                }
            }

            $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{clientId}', $ClientObject.clientId)
            
            if (-not [String]::IsNullOrEmpty($InstanceName)) {
                $instanceObj = Get-CVSQLInstance -Name $InstanceName
                if ($null -eq $instanceObj) {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): instance not found having name [$InstanceName]"
                    return
                }
                else {
                    $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{instanceId}', $instanceObj.insId)
                }
            }
            elseif ($InstanceId -gt 0) {
                $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{instanceId}', $InstanceId)
            }
            else {
                $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{instanceId}', $null)
            }

            $headerObj = Get-CVRESTHeader $sessionObj
            $body = ''
            $payload = @{}
            $payload.Add('headerObject', $headerObj)
            $payload.Add('body', $body)
            $validate = 'SqlClient'

            $response = Submit-CVRESTRequest $payload $validate

            if ($response.IsValid) {
                foreach ($sqlClient in $response.Content.SqlClient) {
                    Write-Output $sqlClient
                }
            }
            else {
                Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): SQL client not found"      
            }
        }
        catch {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"
    }
}


function Get-CVSQLClone { 
<#
.SYNOPSIS
    Method to retrieve SQL clone information.

.DESCRIPTION
    Method to retrieve SQL clone information.
    
.PARAMETER ClientName
    Get clone information filtered by ClientName.

.PARAMETER ClientId
    Get clone information filtered by ClientId.

.PARAMETER ClientObject
    Get clone information filtered by piping ClientObject.

.PARAMETER InstanceName
    Get clone information filtered by InstanceName.

.PARAMETER InstanceId
    Get clone information filtered by InstanceId.

.EXAMPLE
    Get-CVSQLClone -ClientName vosql7

.EXAMPLE
    Get-CVSQLClone -ClientId 104

.EXAMPLE
    Get-CVSQLClone -ClientId 104 -InstanceId 109

.EXAMPLE
    Get-CVClient | Get-CVSQLClone

.OUTPUTS
    Outputs [PSCustomObject] containing SQL clone information.

.NOTES
    Author: Gary Stoops
    Company: Commvault
#>
    [CmdletBinding(DefaultParameterSetName = 'Default')]
    [OutputType([PSCustomObject])]
    param(
        [Parameter(Mandatory = $False, ParameterSetName = 'ByName')]
        [ValidateNotNullorEmpty()]
        [String] $ClientName,

        [Parameter(Mandatory = $False, ParameterSetName = 'ByName')]
        [ValidateNotNullorEmpty()]
        [String] $InstanceName,

        [Parameter(Mandatory = $False, ParameterSetName = 'ById')]
        [ValidateNotNullorEmpty()]
        [Int32] $ClientId,

        [Parameter(Mandatory = $False, ParameterSetName = 'ById')]
        [ValidateNotNullorEmpty()]
        [Int32] $InstanceId,

        [Parameter(Mandatory = $False, ParameterSetName = 'ByObject', ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [System.Object] $ClientObject
    )

    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
            $endpointSave = $sessionObj.requestProps.endpoint
        }
        catch {
            throw $_
        }
    }

    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"

        try {
            $sessionObj.requestProps.endpoint = $endpointSave

            if ($PSCmdlet.ParameterSetName -eq 'ById') {
                $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{clientId}', $ClientId)
                $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{instanceId}', $InstanceId)
            }
            elseif ($PSCmdlet.ParameterSetName -eq 'ByName') {
                if (-not [String]::IsNullOrEmpty($ClientName)) {
                    $clientObj = Get-CVClient -Name $ClientName
                    if ($null -ne $clientObj) { 
                        $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{clientId}', $clientObj.clientId)
                    }
                    else {
                        Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): client not found having name [$ClientName]"      
                        return
                    }
                }

                if (-not [String]::IsNullOrEmpty($InstanceName)) {
                    $instanceObj = Get-CVSQLInstance -Name $InstanceName
                    if ($null -ne $instanceObj) { 
                        $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{instanceId}', $instanceObj.insId)
                    }
                    else {
                        Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): instance not found having name [$InstanceName]"      
                        return
                    }
                }
            }
            elseif ($PSCmdlet.ParameterSetName -eq 'ByObject') {
                $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{clientId}', $ClientObject.clientId)
            }

            # noop here if already replaced
            $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{clientId}', $null)
            $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{instanceId}', $null)
            
            $headerObj = Get-CVRESTHeader $sessionObj
            $body = ''
            $payload = @{}
            $payload.Add('headerObject', $headerObj)
            $payload.Add('body', $body)
            $validate = 'rpObjectList'

            $response = Submit-CVRESTRequest $payload $validate
            
            if ($response.IsValid) {
                foreach ($item in $response.Content.rpObjectList) {
                    Write-Output $item
                }
            }
            else {
                Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): no clones found"      
            }
        }
        catch
        {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"
    }
}
            
            
function Get-CVSQLCloneDetail { 
<#
.SYNOPSIS
    Method to retrieve SQL clone detail information.

.DESCRIPTION
    Method to retrieve SQL clone detail information.
    
.PARAMETER Id
    Get clone detail information for clone Id.

.EXAMPLE
    Get-CVSQLCloneDetail -Id 57

.EXAMPLE
    Get-CVClient | Get-CVSQLClone | Get-CVCloneDetail

.OUTPUTS
    Outputs [PSCustomObject] containing SQL clone detail information.

.NOTES
    Author: Gary Stoops
    Company: Commvault
#>
    [CmdletBinding(DefaultParameterSetName = 'ById')]
    [OutputType([PSCustomObject])]
    param(
        [Parameter(Mandatory = $True, ParameterSetName = 'ById')]
        [ValidateNotNullorEmpty()]
        [Int32] $Id,

        [Parameter(Mandatory = $True, ParameterSetName = 'ByObject', ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [System.Object] $CloneObject
    )

    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
            $endpointSave = $sessionObj.requestProps.endpoint
        }
        catch {
            throw $_
        }
    }

    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"

        try {
            $sessionObj.requestProps.endpoint = $endpointSave

            if ($PSCmdlet.ParameterSetName -eq 'ById') {
                $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{cloneId}', $Id)
            }
            elseif ($PSCmdlet.ParameterSetName -eq 'ByObject') {
                $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{cloneId}', $CloneObject.Id)
            }
            
            #noop here if already replaced
            $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{propertyLevel}', $null)
    
            $headerObj = Get-CVRESTHeader $sessionObj
            $body = ''
            $payload = @{}
            $payload.Add('headerObject', $headerObj)
            $payload.Add('body', $body)
            $validate = 'rpObjectList'

            $response = Submit-CVRESTRequest $payload $validate
            
            if ($response.IsValid) {
                foreach ($item in $response.Content.rpObjectList) {
                    Write-Output $item
                }
            }
            else {
                Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): no clones found"      
            }
        }
        catch
        {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"
    }
}
                
                
function Remove-CVSQLClone { #GRS-WORKINPROGRESS
<#
.SYNOPSIS
    Method to retrieve SQL clone information.

.DESCRIPTION
    Method to retrieve SQL clone information.
    
.PARAMETER ClientName
    Get clone information filtered by ClientName.

.PARAMETER ClientId
    Get clone information filtered by ClientId.

.PARAMETER ClientObject
    Get clone information filtered by piping ClientObject.

.PARAMETER InstanceName
    Get clone information filtered by InstanceName.

.PARAMETER InstanceId
    Get clone information filtered by InstanceId.

.PARAMETER Force
    Switch to Force override of default 'WhatIf' confirmation behavior.

.EXAMPLE
    Get-CVSQLClone -ClientName vosql7

.EXAMPLE
    Get-CVSQLClone -ClientId 104

.EXAMPLE
    Get-CVSQLClone -ClientId 104 -InstanceId 109

.EXAMPLE
    Get-CVClient | Get-CVSQLClone

.OUTPUTS
    Outputs [PSCustomObject] containing job submission result.

.NOTES
    Author: Gary Stoops
    Company: Commvault
#>
    [CmdletBinding(DefaultParameterSetName = 'ById', SupportsShouldProcess = $True, ConfirmImpact = 'High')]
    [OutputType([String])]
    param(
        [Parameter(Mandatory = $True, ParameterSetName = 'ById')]
        [ValidateNotNullorEmpty()]
        [Int32] $InstanceId,

        [Parameter(Mandatory = $True, ParameterSetName = 'ById')]
        [ValidateNotNullorEmpty()]
        [Int32] $CloneId,

        [Parameter(Mandatory = $True, ParameterSetName = 'ByName')]
        [ValidateNotNullorEmpty()]
        [String] $InstanceName,

        [Parameter(Mandatory = $True, ParameterSetName = 'ByObject', ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [System.Object] $CloneObject,

        [Switch] $Force
    )

    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
            $endpointSave = $sessionObj.requestProps.endpoint
        }
        catch {
            throw $_
        }
    }

    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"

        try {
            $sessionObj.requestProps.endpoint = $endpointSave

            if ($PSCmdlet.ParameterSetName -eq 'ById') {
                $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{instanceId}', $InstanceId)
                $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{cloneId}', $CloneId)
            }
            elseif ($PSCmdlet.ParameterSetName -eq 'ByName') {
                $instanceObj = Get-CVSQLInstance -Name $InstanceName
                if ($null -ne $instanceObj) { 
                    $CloneId = Read-Host 'CloneId'
                    if ($CloneId -gt 0) {
                        $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{instanceId}', $instanceObj.insId)
                        $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{cloneId}', $CloneId)
                    }
                    else {
                        Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): clone id must be greater than 0"      
                        return
                    }
                }
                else {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): instance not found having name [$InstanceName]"      
                    return
                }
            }
            elseif ($PSCmdlet.ParameterSetName -eq 'ByObject') {
                $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{instanceId}', $CloneObject.insId)
                $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{cloneId}', $CloneObject.Id)
            }

            # noop here if already replaced
            $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{instanceId}', $null)
            $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{cloneId}', $null)

            $headerObj = Get-CVRESTHeader $sessionObj
            #GRS-WORKINPROGRESS
            $body = @{}
            $body.Add('overwriteDatabase', $OverwriteDatabase.IsPresent)
            $body.Add('destinationDatabaseName', '')
            $body.Add('copyPrecedence', 0)
            $body.Add('expireDays', 0)
            $destClient = @{}
            $destClient.Add('clientId', 0)
            $destClient.Add('clientName', '')
            $body.Add('destinationClient', $destClient)
            $body = ($body | ConvertTo-Json)

            $payload = @{}
            $payload.Add('headerObject', $headerObj)
            $payload.Add('body', $body)
            $validate = 'taskId'

            if ($Force -or $PSCmdlet.ShouldProcess('remove clone?')) {
                $response = Submit-CVRESTRequest $payload $validate
            }
            else {
                $response = Submit-CVRESTRequest $payload $validate -DryRun
            }
            
            if ($response.IsValid) {
                Write-Output $response.Content
            }
            else {
                Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): clone removal request declined"      
            }
        }
        catch
        {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"
    }
}


function Get-CVSQLDatabase { 
<#
.SYNOPSIS
    Method to retrieve SQL databases protected within the CommServe.

.DESCRIPTION
    This method is implemented with Powershell paging support.
    If the Name parameter is not provided, this method will output all protected SQL databases.
    If the Name parameter is provided, SQL databases matching the name will be output.
    
.PARAMETER Name
    Get SQL database specified by Name.

.PARAMETER Id
    Get SQL database specified by database Id.

.PARAMETER ClientName
    Get SQL databases associated with ClientName.

.PARAMETER InstanceName
    Get SQL databases associated with InstanceName.

.PARAMETER InstanceId
    Get SQL databases associated with InstanceId.

.PARAMETER InstanceObject
    Get SQL databases associated with piped InstanceObject.

.PARAMETER First
    Get SQL instances with paging support -First 20 (20 per page).

.PARAMETER Skip
    Get SQL instances with paging support -First 20 -Skip 5 (20 per page, skip first 5 pages).

.PARAMETER IncludeTotalCount
    Include total count of result record set.

.PARAMETER SortColumn
    Sort SQL databases by: bkpTime, bkpSize, insName, dbName, cName, planName.

.PARAMETER SortDescending
    Sort SQL databases by specified column in descending order; Default is ascending order.

.PARAMETER OnlySLA
    Get only SQL databases with missed SLAs.

.PARAMETER ShowSysDB
    Get SQL databases including system databases.

.PARAMETER AllProperties
    Get SQL databases with all properties.

.EXAMPLE
    Get-CVSQLDatabase

.EXAMPLE
    Get-CVSQLInstance | Get-CVSQLDatabase

.EXAMPLE
    Get-CVClient | Get-CVSQLInstance | Get-CVSQLDatabase

.EXAMPLE
    Get-CVSQLDatabase -IncludeTotalCount -First 20 -Skip 5 (20 per page, skip first 5 pages)

.EXAMPLE
    Get-CVSQLDatabase -OnlySLA

.EXAMPLE
    Get-CVSQLDatabase -Name space-end

.EXAMPLE
    Get-CVSQLDatabase -Name space_end

.EXAMPLE
    Get-CVSQLDatabase -SortColumn bkpSize

.EXAMPLE
    Get-CVSQLDatabase -SortColumn bkpSize -SortDescending

.EXAMPLE
    Get-CVSQLDatabase -AllProperties

.OUTPUTS
    Outputs [PSCustomObject] containing SQL database properties.

.NOTES
    Author: Gary Stoops
    Company: Commvault
#>
    [CmdletBinding(DefaultParameterSetName = 'Default', SupportsPaging = $True)]
    [OutputType([PSCustomObject])]
    param(
        [Parameter(Mandatory = $False, ParameterSetName = 'ByName')]
        [ValidateNotNullorEmpty()]
        [String] $Name,
        
        [Parameter(Mandatory = $False, ParameterSetName = 'ById')]
        [ValidateNotNullorEmpty()]
        [Int32] $Id,
        
        [Parameter(Mandatory = $False, ParameterSetName = 'ByName')]
        [ValidateNotNullorEmpty()]
        [String] $ClientName,

        [Parameter(Mandatory = $False, ParameterSetName = 'ByName')]
        [ValidateNotNullorEmpty()]
        [String] $InstanceName,
        
        [Parameter(Mandatory = $False, ParameterSetName = 'ById')]
        [ValidateNotNullorEmpty()]
        [Int32] $InstanceId,
        
        [Parameter(Mandatory = $False, ParameterSetName = 'ByObject', ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [System.Object] $InstanceObject,
        
        [Parameter(Mandatory = $False)]
        [CVSQLDatabaseSortColumn] $SortColumn = 'dbName', # by what column the result should be sorted

        [Switch] $SortDescending,
        [Switch] $OnlySLA, # limit response to databases with missed SLA
        [Switch] $ShowSysDB,
        [Switch] $AllProperties
        <#
        [Parameter(Mandatory = $False, Position = 0)]
        [ValidateNotNullorEmpty()]
        [Int32] $ToTime,

        [Parameter(Mandatory = $False)]
        [ValidateNotNullorEmpty()]
        [String] $SearchTerm
        #>
    )

    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
            $endpointSave = $sessionObj.requestProps.endpoint
            $outputCount = 0
            $totalCount = 0
        }
        catch {
            throw $_
        }
    }

    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"

        try
        {
            # Get total record count first
            $sessionObj.requestProps.endpoint = $endpointSave

            if ($PSCmdlet.ParameterSetName -eq 'ById') {
                if ($Id -gt 0) { $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{databaseId}', $Id) }
                if ($InstanceId -gt 0) { $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{instanceId}', $InstanceId) }
            }
            if ($PSCmdlet.ParameterSetName -eq 'ByName') {
                if (-not [String]::IsNullOrEmpty($ClientName)) { $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{clientName}', $ClientName) }
                if (-not [String]::IsNullOrEmpty($InstanceName)) { $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{instanceName}', $InstanceName) }
                if (-not [String]::IsNullOrEmpty($Name)) { $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{databaseName}', $Name) }
            }
            elseif ($PSCmdlet.ParameterSetName -eq 'ByObject') {
                if ($null -ne $InstanceObject) { $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{instanceId}', $InstanceObject.insId) }
            }
            
            $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{paging}', 1)
            $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{startPage}', 0)
            $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{pageSize}', 0)

            $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{sortBy}', $SortColumn)

            if ($SortDescending) { 
                $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{sortDir}', 'DESC') 
            }
            else {
                $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{sortDir}', 'ASC') 
            }

            if ($OnlySLA) { $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{onlySLA}', 1) } 
            if ($ShowSysDB) { $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{showSysDB}', 1) }
            if ($AllProperties) { $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{propertyLevel}', 11) }

            $sessionObj.requestProps.endpoint = NullifyGetSQLDatabaseEndpointParams -Endpoint $sessionObj.requestProps.endpoint
            
            $headerObj = Get-CVRESTHeader $sessionObj
            $body = ''
            $payload = @{}
            $payload.Add('headerObject', $headerObj)
            $payload.Add('body', $body)
            $validate = 'response'

            $response = Submit-CVRESTRequest $payload $validate

            if ($response.IsValid) {
                $totalCount = $response.Content.response.total
                $pagingObj = ValidatePagingParameters $PSCmdlet.PagingParameters $totalCount
            }
            
            if ($totalCount -gt 0 -and -not $pagingObj.badParams) {
                do {
                    $sessionObj.requestProps.endpoint = $endpointSave
    
                    if ($PSCmdlet.ParameterSetName -eq 'ById') {
                        if ($Id -gt 0) { $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{databaseId}', $Id) }
                        if ($InstanceId -gt 0) { $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{instanceId}', $InstanceId) }
                    }
                    if ($PSCmdlet.ParameterSetName -eq 'ByName') {
                        if (-not [String]::IsNullOrEmpty($ClientName)) { $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{clientName}', $ClientName) }
                        if (-not [String]::IsNullOrEmpty($InstanceName)) { $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{instanceName}', $InstanceName) }
                        if (-not [String]::IsNullOrEmpty($Name)) { $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{databaseName}', $Name) }
                    }
                    elseif ($PSCmdlet.ParameterSetName -eq 'ByObject') {
                        if ($null -ne $InstanceObject) { $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{instanceId}', $InstanceObject.insId) }
                    }
                    
                    $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{paging}', $pagingObj.paging)
                    $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{startPage}', $pagingObj.startPage)
                    $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{pageSize}', $pagingObj.pageSize)
                    if ($pagingObj.paging) { $pagingObj.startPage++ }
    
                    $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{sortBy}', $SortColumn)
    
                    if ($SortDescending) { 
                        $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{sortDir}', 'DESC') 
                    }
                    else {
                        $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{sortDir}', 'ASC') 
                    }
    
                    if ($OnlySLA) { $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{onlySLA}', 1) } 
                    if ($ShowSysDB) { $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{showSysDB}', 1) }
                    if ($AllProperties) { $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{propertyLevel}', 11) }
        
                    $sessionObj.requestProps.endpoint = NullifyGetSQLDatabaseEndpointParams -Endpoint $sessionObj.requestProps.endpoint
    
                    $headerObj = Get-CVRESTHeader $sessionObj
                    $body = ''
                    $payload = @{}
                    $payload.Add('headerObject', $headerObj)
                    $payload.Add('body', $body)
                    $validate = 'SqlDatabase'
    
                    $response = Submit-CVRESTRequest $payload $validate
        
                    if ($response.IsValid) {
                        foreach ($database in $response.Content.SqlDatabase) {
                            Write-Output $database
                            $outputCount++
                        }
        
                        if ($pagingObj.paging) {
                            if (($pagingObj.startPage * $pagingObj.pageSize) -ge $totalCount) {
                                $pagingObj.paging = 0
                            }
                            else {
                                Read-Host '[Enter] for next page'
                            }
                        }
                    }
                    else {
                        $pagingObj.paging = 0
                    }
                } until (-not $pagingObj.paging)
            }
            
            if ($outputCount -eq 0) {
                if ($PSCmdlet.ParameterSetName -eq 'ByObject') {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): no SQL databases found for instance [$($InstanceObject.insName)]"      
                }
            }
        }
        catch
        {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"

        try {
            if ($PSCmdlet.PagingParameters.IncludeTotalCount) {
                [double] $accuracy = 1.0
                $PSCmdlet.PagingParameters.NewTotalCount($totalCount, $accuracy)
            }
    
            if ($outputCount -eq 0) {
                if ($OnlySLA) {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): no SQL databases found with missed SLA"      
                }
                else {
                    if ($PSCmdlet.ParameterSetName -eq 'ById') {
                        if ($Id -gt 0) {
                            Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): database not found having ID [$Id]"      
                        }
                        elseif ($InstanceId -gt 0) {
                            Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): no SQL databases found for instance ID [$InstanceId]"      
                        }
                    }
                    elseif ($PSCmdlet.ParameterSetName -eq 'ByName') {
                        if (-not [String]::IsNullOrEmpty($Name)) {
                            Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): database not found having name [$Name]"      
                        }
                        elseif (-not [String]::IsNullOrEmpty($InstanceName)) {
                            Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): no SQL databases found for instance [$InstanceName]"      
                        }
                        elseif (-not [String]::IsNullOrEmpty($ClientName)) {
                            Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): no SQL databases found for client [$ClientName]"      
                        }
                    }
                    elseif ($PSCmdlet.ParameterSetName -ne 'ByObject') {
                        Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): no SQL databases found"      
                    }
                }
            }
        }
        catch {
            throw $_
        }
    }
}


function Get-CVSQLDatabaseDetail { 
<#
.SYNOPSIS
    Method to retrieve SQL database details.

.DESCRIPTION
    Method to retrieve SQL database details specified by database name or pipeline input of an SQL database object.
    
.PARAMETER Name
    Get SQL database details for the database specified by Name.

.PARAMETER DatabaseObject
    Get SQL database details for the database specified by DatabaseObject.

.EXAMPLE
    Get-CVSQLDatabaseDetail
    
.EXAMPLE
    Get-CVSQLDatabaseDetail -Name space_end
    
.EXAMPLE
    Get-CVSQLDatabase -Name space_end | Get-CVSQLDatabaseDetail

.OUTPUTS
    Outputs [PSCustomObject] containing SQL database details.

.NOTES
    Author: Gary Stoops
    Company: Commvault
#>
    [CmdletBinding(DefaultParameterSetName = 'ByName')]
    [OutputType([PSCustomObject])]
    param(
        [Parameter(Mandatory = $True, ParameterSetName = 'ByName')]
        [ValidateNotNullorEmpty()]
        [String] $Name,

        [Parameter(Mandatory = $True, ParameterSetName = 'ByObject', ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [System.Object] $DatabaseObject
    )

    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
            $endpointSave = $sessionObj.requestProps.endpoint
        }
        catch {
            throw $_
        }
    }

    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"

        try {
            $sessionObj.requestProps.endpoint = $endpointSave

            if ($PSCmdlet.ParameterSetName -eq 'ByName') {
                $databaseObj = Get-CVSQLDatabase -Name $Name
                if ($null -ne $databaseObj) { 
                    $DatabaseObject = $databaseObj
                }
                else {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): database not found having name [$Name]"      
                    return
                }
            }

            $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{instanceId}', $DatabaseObject.insId)
            $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{databaseId}', $DatabaseObject.dbId)

            $headerObj = Get-CVRESTHeader $sessionObj
            $body = ''
            $payload = @{}
            $payload.Add('headerObject', $headerObj)
            $payload.Add('body', $body)
            $validate = 'SqlDatabase'

            $response = Submit-CVRESTRequest $payload $validate

            if ($response.IsValid) {
                foreach ($database in $response.Content.SqlDatabase) {
                    Write-Output $database
                }
            }
            else {
                Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): SQL database details not found"      
            }
        }
        catch
        {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"
    }
}


function Get-CVSQLDatabaseBackupHistory { 
<#
.SYNOPSIS
    Method to retrieve SQL database backup history information.

.DESCRIPTION
    Method to retrieve SQL database backup history information.
    
.PARAMETER Name
    The database Name.

.PARAMETER DatabaseObject
    The SQL DatabaseObject.

.PARAMETER JobDetail
    Include full job details.

.EXAMPLE
    Get-CVSQLDatabaseBackupHistory

.EXAMPLE
    Get-CVSQLDatabaseBackupHistory -Name AuditDB

.EXAMPLE
    Get-CVSQLDatabaseBackupHistory -Name AuditDB -JobDetail

.EXAMPLE
    Get-CVSQLDatabaseBackupHistory -Name AuditDB -JobDetail | Select-Object -ExpandProperty JobDetail

.OUTPUTS
    Outputs [PSCustomObject] containing backup history information.

.NOTES
    Author: Gary Stoops
    Company: Commvault
#>
    [CmdletBinding(DefaultParameterSetName = 'ByName')]
    [OutputType([PSCustomObject])]
    param(
        [Parameter(Mandatory = $True, ParameterSetName = 'ByName')]
        [ValidateNotNullorEmpty()]
        [String] $Name,

        [Parameter(Mandatory = $True, ParameterSetName = 'ByObject', ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [System.Object] $DatabaseObject,

        [Switch] $JobDetail
    )

    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
            $endpointSave = $sessionObj.requestProps.endpoint
        }
        catch {
            throw $_
        }
    }

    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"

        try {
            $sessionObj.requestProps.endpoint = $endpointSave

            if ($PSCmdlet.ParameterSetName -eq 'ByName') {
                $databaseObj = Get-CVSQLDatabase -Name $Name
                if ($null -ne $databaseObj) { 
                    $DatabaseObject = $databaseObj
                }
                else {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): database not found having name [$Name]"      
                    return
                }
            }

            $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{instanceId}', $DatabaseObject.insId)
            $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{databaseId}', $DatabaseObject.dbId)

            $headerObj = Get-CVRESTHeader $sessionObj
            $body = ''
            $payload = @{}
            $payload.Add('headerObject', $headerObj)
            $payload.Add('body', $body)
            $validate = 'dbBackups'

            $response = Submit-CVRESTRequest $payload $validate

            if ($response.IsValid) {
                foreach ($backup in $response.Content.dbBackups) {
                    $backupTime = $backup |`
                    Select-Object  @{Name='BackupTime';Expression={[timezone]::CurrentTimeZone.ToLocalTime(([datetime]'1/1/1970').AddSeconds($_.bkpDate))}}|`
                    Select-Object -ExpandProperty BackupTime
                    [PSCustomObject] $custom = New-Object PSObject
                    $custom | Add-Member -NotePropertyName 'Client' -NotePropertyValue $DatabaseObject.cName
                    $custom | Add-Member -NotePropertyName 'Instance' -NotePropertyValue $DatabaseObject.insName
                    $custom | Add-Member -NotePropertyName 'Database' -NotePropertyValue $DatabaseObject.dbName
                    $custom | Add-Member -NotePropertyName 'JobId' -NotePropertyValue $backup.jobId

                    if ($JobDetail) {
                        $sessionObj = Get-CVSessionDetail 'Get-CVSQLDatabaseBackupJob'
                        $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{instanceId}', $backup.insId)
                        $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{databaseId}', $backup.dbId)
                        $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{jobId}', $backup.jobId)

                        $headerObj = Get-CVRESTHeader $sessionObj
                        $body = ''
                        $payload = @{}
                        $payload.Add('headerObject', $headerObj)
                        $payload.Add('body', $body)
            
                        $response2 = Submit-CVRESTRequest $payload $validate

                        if ($response2.IsValid) {
                            $custom | Add-Member -NotePropertyName 'JobDetail' -NotePropertyValue $response2.Content.dbBackups
                        }
                        else {
                            $custom | Add-Member -NotePropertyName 'JobDetail' -NotePropertyValue $null
                            Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): job details for database [$Name] are not available"      
                        }
                    }
                    else {
                        $custom | Add-Member -NotePropertyName 'JobDetail' -NotePropertyValue $null
                    }

                    $custom | Add-Member -NotePropertyName 'BackupSize' -NotePropertyValue $backup.bkpSize
                    $custom | Add-Member -NotePropertyName 'BackupTime' -NotePropertyValue $backupTime

                    Write-Output $custom
                }
            }
            else {
                Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): backup history for database [$Name] is not available"      
            }
        }
        catch
        {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"
    }
}


function Backup-CVSQLDatabase { 
<#
.SYNOPSIS
    Method to submit backup job for specific SQL database.

.DESCRIPTION
    Method to submit backup job for specific SQL database.
    
.PARAMETER Name
    Specify the database by Name.

.PARAMETER Id
    Specify the database by Id.

.PARAMETER DatabaseObject
    Specify the database by piped DatabaseObject.

.PARAMETER BackupType
    The BackupType: full, incremental (default), differential.

.PARAMETER Force
    Switch to Force override of default 'WhatIf' confirmation behavior.

.EXAMPLE
    Backup-CVSQLDatabase

.EXAMPLE
    Backup-CVSQLDatabase -Name AuditDB -BackupType full

.EXAMPLE
    Backup-CVSQLDatabase -Id 228 -BackupType full

.EXAMPLE
    Get-CVSQLDatabase -Name AuditDB | Backup-CVSQLDatabase

.OUTPUTS
    Outputs [PSCustomObject] containing job submission result.

.NOTES
    Author: Gary Stoops
    Company: Commvault
#>
    [CmdletBinding(DefaultParameterSetName = 'ByName', SupportsShouldProcess = $True, ConfirmImpact = 'Low')]
    [OutputType([PSCustomObject])]
    param(
        [Parameter(Mandatory = $True, ParameterSetName = 'ByName')]
        [ValidateNotNullorEmpty()]
        [String] $Name,

        [Parameter(Mandatory = $True, ParameterSetName = 'ById')]
        [ValidateNotNullorEmpty()]
        [Int32] $Id,

        [Parameter(Mandatory = $True, ParameterSetName = 'ByObject', ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [System.Object] $DatabaseObject,

        [Parameter(Mandatory = $False)]
        [CVSQLBackupType] $BackupType = 'incremental',
        
        [Switch] $Force
    )

    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
            $endpointSave = $sessionObj.requestProps.endpoint
        }
        catch {
            throw $_
        }
    }

    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"

        try {
            $sessionObj.requestProps.endpoint = $endpointSave

            if ($PSCmdlet.ParameterSetName -eq 'ByName') {
                $databaseObj = Get-CVSQLDatabase -Name $Name
                if ($null -ne $databaseObj) { 
                    $DatabaseObject = $databaseObj
                }
                else {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): database not found having name [$Name]"      
                    return
                }
            }

            if ($PSCmdlet.ParameterSetName -eq 'ById') {
                $databaseObj = Get-CVSQLDatabase -Id $Id
                if ($null -ne $databaseObj) { 
                    $DatabaseObject = $databaseObj
                }
                else {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): database not found having id [$Id]"      
                    return
                }
            }

            $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{instanceId}', $DatabaseObject.insId)
            $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{databaseId}', $DatabaseObject.dbId)

            $headerObj = Get-CVRESTHeader $sessionObj
            $body = @{}
            $body.Add('backupType', $BackupType)
            $body = ($body | ConvertTo-Json)
            $payload = @{}
            $payload.Add('headerObject', $headerObj)
            $payload.Add('body', $body)
            $validate = 'taskId'

            if ($Force -or $PSCmdlet.ShouldProcess($DatabaseObject.dbName)) {
                $response = Submit-CVRESTRequest $payload $validate
            }
            else {
                $response = Submit-CVRESTRequest $payload $validate -DryRun
            }

            if ($response.IsValid) {
                Write-Output $response.Content
            }
            else {
                Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): backup request declined for database [$($DatabaseObject.dbName)]"      
            }
        }
        catch
        {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"
    }
}
        
        
function Export-CVSQLDatabaseRTD { 
<#
.SYNOPSIS
    Method to submit restore-to-disk SQL database export job.

.DESCRIPTION
    Method to submit restore-to-disk SQL database export job.
    
.PARAMETER Name
    Specify the database files to be exported by database Name.

.PARAMETER DatabaseObject
    Specify the database files to be exported by piping DatabaseObject.

.PARAMETER JobId
    Export the SQL database files for a given JobId.

.PARAMETER DestClientName
    Export the SQL database files to DestClientName.

.PARAMETER DestDiskPath
    Export the SQL database files to DestDiskPath.

.PARAMETER OverwriteExisting
    Switch to control OverwriteExisting of the database files.

.EXAMPLE
    Export-CVSQLDatabaseRTD

.EXAMPLE
    Export-CVSQLDatabaseRTD -Name CommServ -OverwriteExisting

.EXAMPLE
    Export-CVSQLDatabaseRTD -Name CommServ -OverwriteExisting -JobId 111

.EXAMPLE
    Export-CVSQLDatabaseRTD -Name CommServ -DestClientName carbonwincs1 -DestDiskPath C:\ExportTest

.EXAMPLE
    Get-CVSQLDatabase -Name AuditDB | Export-CVSQLDatabaseRTD -OverwriteExisting -DestClientName carbonwincs1 -DestDiskPath C:\ExportTest

.OUTPUTS
    Outputs [PSCustomObject] containing job submission result.

.NOTES
    Author: Gary Stoops
    Company: Commvault
#>
    [CmdletBinding(DefaultParameterSetName = 'ByName')]
    [OutputType([String])]
    param(
        [Parameter(Mandatory = $True, ParameterSetName = 'ByName')]
        [ValidateNotNullorEmpty()]
        [String] $Name,

        [Parameter(Mandatory = $True, ParameterSetName = 'ByObject', ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [System.Object] $DatabaseObject,

        [Parameter(Mandatory = $False)]
        [ValidateNotNullorEmpty()]
        [Int32] $JobId,

        [Parameter(Mandatory = $True)]
        [ValidateNotNullorEmpty()]
        [String] $DestClientName,

        [Parameter(Mandatory = $True)]
        [ValidateNotNullorEmpty()]
        [String] $DestDiskPath,

        [Switch] $OverwriteExisting
    )

    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            if ($JobId -eq 0) { $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name }
            else { $sessionObj = Get-CVSessionDetail 'Export-CVSQLDatabaseRTDByJobId' }
            $endpointSave = $sessionObj.requestProps.endpoint
        }
        catch {
            throw $_
        }
    }

    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"

        try {
            $sessionObj.requestProps.endpoint = $endpointSave
            [System.Object] $clientObj = $null

            if ($PSCmdlet.ParameterSetName -eq 'ByName') {
                $databaseObj = Get-CVSQLDatabase -Name $Name
                if ($null -ne $databaseObj) { 
                    $DatabaseObject = $databaseObj
                }
                else {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): database not found having name [$Name]"      
                    return
                }
            }

            $clientObj = Get-CVSQLClientDetail -Name $DestClientName
            if ($null -eq $clientObj) { 
                Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): destination client not found having name [$DestClientName]"      
                return
            }

            $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{instanceId}', $DatabaseObject.insId)
            $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{databaseId}', $DatabaseObject.dbId)
            if ($JobId -gt 0) { $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{jobId}', $JobId) }

            $headerObj = Get-CVRESTHeader $sessionObj
            
            $body = @{}
            $body.Add('overwriteFiles', $OverwriteExisting.IsPresent)

            $destEntity = @{}
            $destEntity.Add('clientId', $clientObj.cId)
            $body.Add('destinationEntity', $destEntity)
            $body.Add('destDiskPath', $DestDiskPath)

            $body = ($body | ConvertTo-Json)
            
            $payload = @{}
            $payload.Add('headerObject', $headerObj)
            $payload.Add('body', $body)
            $validate = 'taskId'

            $response = Submit-CVRESTRequest $payload $validate

            if ($response.IsValid) {
                Write-Output $response.Content
            }
            else {
                Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): database export request declined"      
            }
        }
        catch
        {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"
    }
}
            
                
function Restore-CVSQLDatabase { 
<#
.SYNOPSIS
    Method to submit SQL database in-place or out-of-place restore job.

.DESCRIPTION
    Method to submit SQL database in-place or out-of-place restore job.
    
.PARAMETER Name
    Specify the database files to be restored by database Name.

.PARAMETER DatabaseObject
    Specify the database files to be restored by piping DatabaseObject.

.PARAMETER DestClientName
    Restore out-of-place the SQL database files to DestClientName.

.PARAMETER DestInstanceName
    Restore out-of-place the SQL database files to DestInstanceName.

.PARAMETER DestDatabaseName
    Restore out-of-place the SQL database files to DestDatabaseName.

.PARAMETER DataFilePath
    Restore out-of-place the SQL database data files to DataFilePath.

.PARAMETER LogFilePath
    Restore out-of-place the SQL database log files to LogFilePath.

.PARAMETER OutofPlace
    Switch to initiate an out-of-place restore.

.PARAMETER OverwriteExisting
    Switch to control OverwriteExisting of the database files.

.PARAMETER Force
    Switch to Force override of default 'WhatIf' confirmation behavior.

.EXAMPLE
    Restore-CVSQLDatabase

.EXAMPLE
    Restore-CVSQLDatabase -Name AuditDB -OverwriteExisting

.EXAMPLE
    Restore-CVSQLDatabase -Name AuditDB -OverwriteExisting -OutofPlace

.OUTPUTS
    Outputs [PSCustomObject] containing job submission result.

.NOTES
    Author: Gary Stoops
    Company: Commvault
#>
    [CmdletBinding(DefaultParameterSetName = 'ByName', SupportsShouldProcess = $True, ConfirmImpact = 'High')]
    [OutputType([String])]
    param(
        [Parameter(Mandatory = $True, ParameterSetName = 'ByName')]
        [ValidateNotNullorEmpty()]
        [String] $Name,

        [Parameter(Mandatory = $True, ParameterSetName = 'ByObject', ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [System.Object] $DatabaseObject,

        [Switch] $OutofPlace,
        [Switch] $OverwriteExisting,
        [Switch] $Force
    )
    
    DynamicParam {
        if ($OutofPlace) {
            $paramDictionary = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary

            $destClientNameAttrColl = new-object System.Collections.ObjectModel.Collection[System.Attribute]
            $destClientNameAttr = New-Object System.Management.Automation.ParameterAttribute
            $destClientNameAttr.Mandatory = $true
            $destClientNameAttr.HelpMessage = 'out-of-place restore destination client name'
            $destClientNameAttrColl.Add($destClientNameAttr)
            $destClientNameParam = New-Object System.Management.Automation.RuntimeDefinedParameter('DestClientName', [String], $destClientNameAttrColl)
            $paramDictionary.Add('DestClientName', $destClientNameParam)

            $destInstanceNameAttrColl = new-object System.Collections.ObjectModel.Collection[System.Attribute]
            $destInstanceNameAttr = New-Object System.Management.Automation.ParameterAttribute
            $destInstanceNameAttr.Mandatory = $true
            $destInstanceNameAttr.HelpMessage = 'out-of-place restore destination instance name'
            $destInstanceNameAttrColl.Add($destInstanceNameAttr)
            $destInstanceNameParam = New-Object System.Management.Automation.RuntimeDefinedParameter('DestInstanceName', [String], $destInstanceNameAttrColl)
            $paramDictionary.Add('DestInstanceName', $destInstanceNameParam)

            $destDatabaseNameAttrColl = new-object System.Collections.ObjectModel.Collection[System.Attribute]
            $destDatabaseNameAttr = New-Object System.Management.Automation.ParameterAttribute
            $destDatabaseNameAttr.Mandatory = $true
            $destDatabaseNameAttr.HelpMessage = 'out-of-place restore destination database name'
            $destDatabaseNameAttrColl.Add($destDatabaseNameAttr)
            $destDatabaseNameParam = New-Object System.Management.Automation.RuntimeDefinedParameter('DestDatabaseName', [String], $destDatabaseNameAttrColl)
            $paramDictionary.Add('DestDatabaseName', $destDatabaseNameParam)

            $dataFilePathAttrColl = new-object System.Collections.ObjectModel.Collection[System.Attribute]
            $dataFilePathAttr = New-Object System.Management.Automation.ParameterAttribute
            $dataFilePathAttr.Mandatory = $true
            $dataFilePathAttr.HelpMessage = 'out-of-place restore data files path'
            $dataFilePathAttrColl.Add($dataFilePathAttr)
            $dataFilePathParam = New-Object System.Management.Automation.RuntimeDefinedParameter('DataFilePath', [String], $dataFilePathAttrColl)
            $paramDictionary.Add('DataFilePath', $dataFilePathParam)

            $logFilePathAttrColl = new-object System.Collections.ObjectModel.Collection[System.Attribute]
            $logFilePathAttr = New-Object System.Management.Automation.ParameterAttribute
            $logFilePathAttr.Mandatory = $true
            $logFilePathAttr.HelpMessage = 'out-of-place restore log files path'
            $logFilePathAttrColl.Add($logFilePathAttr)
            $logFilePathParam = New-Object System.Management.Automation.RuntimeDefinedParameter('LogFilePath', [String], $logFilePathAttrColl)
            $paramDictionary.Add('LogFilePath', $logFilePathParam)

            return $paramDictionary
       }
    }

    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
            $endpointSave = $sessionObj.requestProps.endpoint
        }
        catch {
            throw $_
        }
    }

    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"

        try {
            $sessionObj.requestProps.endpoint = $endpointSave
            [System.Object] $clientObj = $null

            if ($PSCmdlet.ParameterSetName -eq 'ByName') {
                $databaseObj = Get-CVSQLDatabase -Name $Name
                if ($null -ne $databaseObj) { 
                    $DatabaseObject = $databaseObj
                }
                else {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): database not found having name [$Name]"      
                    return
                }
            }

            $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{instanceId}', $DatabaseObject.insId)
            $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{databaseId}', $DatabaseObject.dbId)

            $headerObj = Get-CVRESTHeader $sessionObj
            
            $body = @{}
            $body.Add('overwriteFiles', $OverwriteExisting.IsPresent)

            $destEntity = @{}
            if ($OutofPlace) {
                $clientObj = Get-CVSQLClientDetail -Name $PSBoundParameters.DestClientName
                if ($null -eq $clientObj) { 
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): destination client not found having name [$($PSBoundParameters.DestClientName)]"      
                    return
                }
    
                $instanceObj = Get-CVSQLInstance -Name $PSBoundParameters.DestInstanceName
                if ($null -eq $instanceObj) { 
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): destination instance not found having name [$($PSBoundParameters.DestInstanceName)]"      
                    return
                }

                $destEntity.Add('clientId', $clientObj.cId)
                $destEntity.Add('instanceId', $instanceObj.insId)

                $body.Add('destinationDatabaseName', $PSBoundParameters.DestDatabaseName)
                $body.Add('dataFilePath', $PSBoundParameters.DataFilePath)
                $body.Add('logFilePath', $PSBoundParameters.LogFilePath)
            }
            else {
                $destEntity.Add('clientId', $DatabaseObject.cId)
            }
            $body.Add('destinationEntity', $destEntity)

            $body = ($body | ConvertTo-Json)
            
            $payload = @{}
            $payload.Add('headerObject', $headerObj)
            $payload.Add('body', $body)
            $validate = 'taskId'

            if ($Force -or $PSCmdlet.ShouldProcess($DatabaseObject.dbName)) {
                $response = Submit-CVRESTRequest $payload $validate
            }
            else {
                $response = Submit-CVRESTRequest $payload $validate -DryRun
            }

            if ($response.IsValid) {
                Write-Output $response.Content
            }
            else {
                Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): restore request declined for database [$($DatabaseObject.dbName)]"      
            }
        }
        catch
        {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"
    }
}
                

function Mount-CVSQLDatabase { 
<#
.SYNOPSIS
    Method to submit SQL database mount job.

.DESCRIPTION
    Method to submit SQL database mount job.
    
.PARAMETER Name
    Mount the SQL database identified by Name.

.PARAMETER DatabaseObject
    Mount the SQL database identified by DatabaseObject.

.PARAMETER DestDatabaseName
    Mount the SQL database with DestDatabaseName.

.PARAMETER ExpireDays
    Mount the SQL database with ExpireDays. Default: 30

.PARAMETER OverwriteDatabase
    Switch to control OverwriteDatabase.

.PARAMETER Force
    Switch to Force override of default 'WhatIf' confirmation behavior.

.EXAMPLE
    Mount-CVSQLDatabase

.EXAMPLE
    Mount-CVSQLDatabase -Name AuditDB -OverwriteDatabase

.EXAMPLE
    Mount-CVSQLDatabase -Name AuditDB -OverwriteDatabase -ExpiryDays 120

.EXAMPLE
    Get-CVSQLDatabase | Mount-CVSQLDatabase -OverwriteDatabase -ExpiryDays 120

.OUTPUTS
    Outputs [PSCustomObject] containing job submission result.

.NOTES
    Author: Gary Stoops
    Company: Commvault
#>
    [CmdletBinding(DefaultParameterSetName = 'ByName', SupportsShouldProcess = $True, ConfirmImpact = 'Medium')]
    [OutputType([String])]
    param(
        [Parameter(Mandatory = $True, ParameterSetName = 'ByName')]
        [ValidateNotNullorEmpty()]
        [String] $Name,

        [Parameter(Mandatory = $True, ParameterSetName = 'ByObject', ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [System.Object] $DatabaseObject,

        [Parameter(Mandatory = $False)]
        [ValidateNotNullorEmpty()]
        [String] $DestDatabaseName,

        [Parameter(Mandatory = $False)]
        [ValidateNotNullorEmpty()]
        [Int32] $ExpireDays=30,

        [Switch] $OverwriteDatabase,
        [Switch] $Force
    )

    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
            $endpointSave = $sessionObj.requestProps.endpoint
        }
        catch {
            throw $_
        }
    }

    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"

        try {
            $sessionObj.requestProps.endpoint = $endpointSave

            if ($PSCmdlet.ParameterSetName -eq 'ByName') {
                $databaseObj = Get-CVSQLDatabase -Name $Name
                if ($null -ne $databaseObj) { 
                    $DatabaseObject = $databaseObj
                }
                else {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): database not found having name [$Name]"      
                    return
                }
            }

            $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{instanceId}', $DatabaseObject.insId)
            $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{databaseId}', $DatabaseObject.dbId)

            $headerObj = Get-CVRESTHeader $sessionObj
            
            $body = @{}
            $body.Add('overwriteDatabase', $OverwriteDatabase.IsPresent)
            $body.Add('destinationDatabaseName', $DestDatabaseName)
            $body.Add('expireDays', $ExpireDays)
            $body = ($body | ConvertTo-Json)

            $payload = @{}
            $payload.Add('headerObject', $headerObj)
            $payload.Add('body', $body)
            $validate = 'taskId'

            if ($Force -or $PSCmdlet.ShouldProcess($DatabaseObject.dbName)) {
                $response = Submit-CVRESTRequest $payload $validate
            }
            else {
                $response = Submit-CVRESTRequest $payload $validate -DryRun
            }

            if ($response.IsValid) {
                Write-Output $response.Content
            }
            else {
                Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): mount request declined for database [$($DatabaseObject.dbName)]"      
            }
        }
        catch
        {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"
    }
}
                    
    
function Get-CVSQLInstance { 
<#
.SYNOPSIS
    Method to retrieve SQL instances protected within the CommServe.

.DESCRIPTION
    This method is implemented with Powershell paging support.
    If the Name parameter is not provided, this method will output all protected SQL instances.
    If the Name parameter is provided, SQL instances matching the name will be output.
    
.PARAMETER Name
    Get SQL instance specified by Name.

.PARAMETER ClientName
    Get SQL instances associated with ClientName.

.PARAMETER ClientObject
    Get SQL instances associated with piped ClientObject.

.PARAMETER First
    Get SQL instances with paging support -First 20 (20 per page).

.PARAMETER Skip
    Get SQL instances with paging support -First 20 -Skip 5 (20 per page, skip first 5 pages).

.PARAMETER IncludeTotalCount
    Include total count of result record set.

.PARAMETER OnlySLA
    Get only SQL instances with missed SLAs.

.PARAMETER SortColumn
    Sort SQL instances by: insId, insName, version, cName, noDBs, or planName.

.PARAMETER SortDescending
    Sort SQL instances by specified column in descending order; default is ascending order.

.PARAMETER AllProperties
    Get SQL instances with all properties.

.EXAMPLE
    Get-CVSQLInstance
    
.EXAMPLE
    Get-CVClient | Get-CVSQLInstance
    
.EXAMPLE
    Get-CVSQLInstance -IncludeTotalCount -First 20 -Skip 5 (20 per page, skip first 5 pages)
    
.EXAMPLE
    Get-CVSQLInstance -OnlySLA
    
.EXAMPLE
    Get-CVSQLInstance -Name SNOWSQL1\SQL2008R2
    
.EXAMPLE
    Get-CVSQLInstance -SortColumn noDBs
    
.EXAMPLE
    Get-CVSQLInstance -SortColumn insId -SortDescending
    
.EXAMPLE
    Get-CVSQLInstance -AllProperties
    
.EXAMPLE
    Get-CVSQLInstance -AllProperties | Select-Object -ExpandProperty auth
    
.EXAMPLE
	Get-CVSQLInstance -AllProperties | Select-Object -ExpandProperty auth | Select-Object -ExpandProperty credential

.OUTPUTS
    Outputs [PSCustomObject] containing SQL instance properties.

.NOTES
    Author: Gary Stoops
    Company: Commvault
#>
    [CmdletBinding(DefaultParameterSetName = 'Default', SupportsPaging = $True)]
    [OutputType([PSCustomObject])]
    param(
        [Parameter(Mandatory = $False, ParameterSetName = 'ByName')]
        [ValidateNotNullorEmpty()]
        [String] $Name,

        [Parameter(Mandatory = $False, ParameterSetName = 'ByName')]
        [ValidateNotNullorEmpty()]
        [String] $ClientName,

        [Parameter(Mandatory = $False, ParameterSetName = 'ByObject', ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [System.Object] $ClientObject,

        [Parameter(Mandatory = $False)]
        [CVSQLInstanceSortColumn] $SortColumn = 'insId', #  by what column the result should be sorted

        [Switch] $SortDescending,
        [Switch] $OnlySLA, # limit response to instances with missed SLA
        [Switch] $AllProperties
    )

    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
            $endpointSave = $sessionObj.requestProps.endpoint
            $outputCount = 0
            $totalCount = 0
        }
        catch {
            throw $_
        }
    }

    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"

        try
        {
            # Get total record count first
            $sessionObj.requestProps.endpoint = $endpointSave

            if ($AllProperties) { $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{propertyLevel}', 11) }
            
            $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{paging}', 1)
            $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{startPage}', 0)
            $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{pageSize}', 0)

            if ($OnlySLA) { $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{onlySLA}', 1) } 

            $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{sortBy}', $SortColumn)

            if ($SortDescending) { 
                $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{sortDir}', 'DESC') 
            }
            else {
                $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{sortDir}', 'ASC') 
            }

            if ($PSCmdlet.ParameterSetName -eq 'ByName') {
                if (-not [String]::IsNullOrEmpty($Name)) { $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{instanceName}', $Name) }
                if (-not [String]::IsNullOrEmpty($ClientName)) { $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{clientName}', $ClientName) }
            }
            elseif ($PSCmdlet.ParameterSetName -eq 'ByObject') {
                $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{clientName}', $ClientObject.clientName)
            }
            
            $sessionObj.requestProps.endpoint = NullifyGetSQLInstanceEndpointParams -Endpoint $sessionObj.requestProps.endpoint
            
            $headerObj = Get-CVRESTHeader $sessionObj
            $body = ''
            $payload = @{}
            $payload.Add('headerObject', $headerObj)
            $payload.Add('body', $body)
            $validate = 'response'

            $response = Submit-CVRESTRequest $payload $validate

            if ($response.IsValid) {
                $totalCount = $response.Content.response.total
                $pagingObj = ValidatePagingParameters $PSCmdlet.PagingParameters $totalCount
            }
            
            if ($totalCount -gt 0 -and -not $pagingObj.badParams) {
                do {
                    $sessionObj.requestProps.endpoint = $endpointSave
    
                    if ($AllProperties) { $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{propertyLevel}', 11) }
                    
                    $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{paging}', $pagingObj.paging)
                    $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{startPage}', $pagingObj.startPage)
                    $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{pageSize}', $pagingObj.pageSize)
                    if ($pagingObj.paging) { $pagingObj.startPage++ }
    
                    if ($OnlySLA) { $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{onlySLA}', 1) } 
    
                    $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{sortBy}', $SortColumn)
    
                    if ($SortDescending) { 
                        $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{sortDir}', 'DESC') 
                    }
                    else {
                        $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{sortDir}', 'ASC') 
                    }
    
                    if ($PSCmdlet.ParameterSetName -eq 'ByName') {
                        if (-not [String]::IsNullOrEmpty($Name)) { $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{instanceName}', $Name) }
                        if (-not [String]::IsNullOrEmpty($ClientName)) { $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{clientName}', $ClientName) }
                    }
                    elseif ($PSCmdlet.ParameterSetName -eq 'ByObject') {
                        $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{clientName}', $ClientObject.clientName)
                    }
                    
                    $sessionObj.requestProps.endpoint = NullifyGetSQLInstanceEndpointParams -Endpoint $sessionObj.requestProps.endpoint
    
                    $headerObj = Get-CVRESTHeader $sessionObj
                    $body = ''
                    $payload = @{}
                    $payload.Add('headerObject', $headerObj)
                    $payload.Add('body', $body)
                    $validate = 'SqlInstance'
    
                    $response = Submit-CVRESTRequest $payload $validate
            
                    if ($response.IsValid) {
                        foreach ($instance in $response.Content.SqlInstance) {
                            Write-Output $instance
                            $outputCount++
                        }
        
                        if ($pagingObj.paging) {
                            if (($pagingObj.startPage * $pagingObj.pageSize) -ge $totalCount) {
                                $pagingObj.paging = 0
                            }
                            else {
                                Read-Host '[Enter] for next page'
                            }
                        }
                    }
                    else {
                        $pagingObj.paging = 0
                    }
                } until (-not $pagingObj.paging)
            }

            if ($outputCount -eq 0) {
                if ($PSCmdlet.ParameterSetName -eq 'ByObject') {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): no SQL instances found for client [$($ClientObject.ClientName)]"      
                }
            }
        }
        catch
        {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"

        try {
            if ($PSCmdlet.PagingParameters.IncludeTotalCount) {
                [double] $accuracy = 1.0
                $PSCmdlet.PagingParameters.NewTotalCount($totalCount, $accuracy)
            }

            if ($outputCount -eq 0) {
                if ($OnlySLA) {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): no SQL instances found with missed SLA"      
                }
                else {
                    if ($PSCmdlet.ParameterSetName -eq 'ByName') {
                        if (-not [String]::IsNullOrEmpty($Name)) {
                            Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): instance not found having name [$Name]"      
                        }
                        elseif (-not [String]::IsNullOrEmpty($ClientName)) {
                            Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): no SQL instances found for client [$ClientName]"      
                        }
                    }
                    elseif ($PSCmdlet.ParameterSetName -ne 'ByObject') {
                        Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): no SQL instances found"      
                    }
                }
            }
        }
        catch {
            throw $_
        }
    }
}


function Get-CVSQLInstanceDetail { 
<#
.SYNOPSIS
    Method to retrieve SQL instance details.

.DESCRIPTION
    Method to retrieve SQL instance details specified by instance name or pipeline input of an SQL instance object.
    
.PARAMETER Name
    Get SQL instance details for the instance specified by Name.

.PARAMETER InstanceObject
    Get SQL instance details for the instance object input from the pipeline.

.PARAMETER AllProperties
    Get all properties for the specified SQL instance.

.EXAMPLE
    Get-CVSQLInstanceDetail
    
.EXAMPLE
    Get-CVSQLInstanceDetail -Name SNOWSQL1\SQL2008R2
    
.EXAMPLE
    Get-CVSQLInstance | Get-CVSQLInstanceDetail -AllProperties

.OUTPUTS
    Outputs [PSCustomObject] containing SQL instance details.

.NOTES
    Author: Gary Stoops
    Company: Commvault
#>
    [CmdletBinding(DefaultParameterSetName = 'ByName')]
    [OutputType([PSCustomObject])]
    param(
        [Parameter(Mandatory = $True, ParameterSetName = 'ByName')]
        [ValidateNotNullorEmpty()]
        [String] $Name,

        [Parameter(Mandatory = $True, ParameterSetName = 'ByObject', ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [System.Object] $InstanceObject,

        [Parameter(Mandatory = $False)]
        [Switch] $AllProperties
    )

    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
            $endpointSave = $sessionObj.requestProps.endpoint
        }
        catch {
            throw $_
        }
    }

    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"

        try {
            $sessionObj.requestProps.endpoint = $endpointSave

            if ($PSCmdlet.ParameterSetName -eq 'ByName') {
                $instanceObj = Get-CVSQLInstance -Name $Name
                if ($null -ne $instanceObj) { 
                    $InstanceObject = $instanceObj
                }
                else {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): instance not found having name [$Name]"      
                    return
                }
            }

            $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{instanceId}', $InstanceObject.insId)

            if ($AllProperties) {
                $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{propertyLevel}', 11)
            }
            else {
                $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{propertyLevel}', $null)
            }

            $headerObj = Get-CVRESTHeader $sessionObj
            $body = ''
            $payload = @{}
            $payload.Add('headerObject', $headerObj)
            $payload.Add('body', $body)
            $validate = 'SqlInstance'

            $response = Submit-CVRESTRequest $payload $validate

            if ($response.IsValid) {
                foreach ($instance in $response.Content.SqlInstance) {
                    Write-Output $instance
                }
            }
            else {
                Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): SQL instance details not found"      
            }
        }
        catch
        {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"
    }
}


function Get-CVSQLInstanceBackupHistory { 
<#
.SYNOPSIS
    Method to retrieve backup history data for specific SQL instance.

.DESCRIPTION
    Method to retrieve backup history data for specific SQL instance.
    
.PARAMETER Name
    The SQL instance Name.

.PARAMETER InstanceObject
    The SQL InstanceObject.

.PARAMETER JobDetail
    Include full job details.

.EXAMPLE
    Get-CVSQLInstanceBackupHistory

.EXAMPLE
    Get-CVSQLInstanceBackupHistory -Name carbonWinCS1\commvault

.EXAMPLE
    Get-CVSQLInstanceBackupHistory -Name CARBONWINCS1\COMMVAULT -JobDetail

.EXAMPLE
    Get-CVSQLInstanceBackupHistory -Name CARBONWINCS1\COMMVAULT -JobDetail | Select-Object -ExpandProperty JobDetail

.EXAMPLE
    Get-CVSQLInstance -Name carbonWinCS1\commvault | Get-CVSQLInstanceBackupHistory

.OUTPUTS
        Outputs [PSCustomObject] containing SQL instance backup history details.

.NOTES
    Author: Gary Stoops
    Company: Commvault
#>
    [CmdletBinding(DefaultParameterSetName = 'ByName')]
    [OutputType([PSCustomObject])]
    param(
        [Parameter(Mandatory = $True, ParameterSetName = 'ByName')]
        [ValidateNotNullorEmpty()]
        [String] $Name,

        [Parameter(Mandatory = $True, ParameterSetName = 'ByObject', ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [System.Object] $InstanceObject,

        [Switch] $JobDetail
    )

    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
            $endpointSave = $sessionObj.requestProps.endpoint
        }
        catch {
            throw $_
        }
    }

    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"

        try {
            $sessionObj.requestProps.endpoint = $endpointSave

            if ($PSCmdlet.ParameterSetName -eq 'ByName') {
                $instanceObj = Get-CVSQLInstance -Name $Name
                if ($null -ne $instanceObj) { 
                    $InstanceObject = $instanceObj
                }
                else {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): instance not found having name [$Name]"      
                    return
                }
            }

            $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{instanceId}', $InstanceObject.insId)

            $headerObj = Get-CVRESTHeader $sessionObj
            $body = ''
            $payload = @{}
            $payload.Add('headerObject', $headerObj)
            $payload.Add('body', $body)
            $validate = 'jobs'

            $response = Submit-CVRESTRequest $payload $validate

            if ($response.IsValid) {
                foreach ($job in $response.Content.jobs) {
                    $backupTime = $job |`
                    Select-Object  @{Name='BackupTime';Expression={[timezone]::CurrentTimeZone.ToLocalTime(([datetime]'1/1/1970').AddSeconds($_.endTime))}}|`
                    Select-Object -ExpandProperty BackupTime
                    [PSCustomObject] $custom = New-Object PSObject
                    $custom | Add-Member -NotePropertyName 'Client' -NotePropertyValue $InstanceObject.cName
                    $custom | Add-Member -NotePropertyName 'Instance' -NotePropertyValue $InstanceObject.insName
                    $custom | Add-Member -NotePropertyName 'JobId' -NotePropertyValue $job.jobId
                
                    if ($JobDetail -and $job.noDBs -gt 0) {
                        $sessionObj = Get-CVSessionDetail 'Get-CVSQLInstanceBackupJob'
                        $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{instanceId}', $job.insId)
                        $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{jobId}', $job.jobId)

                        $headerObj = Get-CVRESTHeader $sessionObj
                        $body = ''
                        $payload = @{}
                        $payload.Add('headerObject', $headerObj)
                        $payload.Add('body', $body)
                        $validate = 'dbBackups'
            
                        $response2 = Submit-CVRESTRequest $payload $validate

                        if ($response2.IsValid) {
                            $custom | Add-Member -NotePropertyName 'JobDetail' -NotePropertyValue $response2.Content.dbBackups
                        }
                        else {
                            $custom | Add-Member -NotePropertyName 'JobDetail' -NotePropertyValue $null
                            Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): job details for instance [$Name] are not available"      
                        }
                    }
                    else {
                        $custom | Add-Member -NotePropertyName 'JobDetail' -NotePropertyValue $null
                    }
    
                    $custom | Add-Member -NotePropertyName 'BackupSize' -NotePropertyValue $job.bkpSize
                    $custom | Add-Member -NotePropertyName 'BackupTime' -NotePropertyValue $backupTime
                    
                    Write-Output $custom
                }
            }
            else {
                Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): backup history for instance [$Name] is not available"      
            }
        }
        catch
        {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"
    }
}


function Backup-CVSQLInstance { 
<#
.SYNOPSIS
    Method to submit backup job for SQL instance.

.DESCRIPTION
    Method to submit backup job for SQL instance.
    
.PARAMETER Name
    The SQL instance Name.

.PARAMETER InstanceObject
    The SQL InstanceObject.

.PARAMETER BackupType
    The BackupType: full, incremental (default), differential.

.PARAMETER Force
    Switch to Force override of default 'WhatIf' confirmation behavior.

.EXAMPLE
    Backup-CVSQLInstance

.EXAMPLE
    Backup-CVSQLInstance -Name CARBONWINCS1\COMMVAULT -BackupType full

.EXAMPLE
    Get-CVSQLInstance -Name CARBONWINCS1\COMMVAULT | Backup-CVSQLInstance

.OUTPUTS
    Outputs [PSCustomObject] containing job submission result.

.NOTES
    Author: Gary Stoops
    Company: Commvault
#>
    [CmdletBinding(DefaultParameterSetName = 'ByName', SupportsShouldProcess = $True, ConfirmImpact = 'Low')]
    [OutputType([PSCustomObject])]
    param(
        [Parameter(Mandatory = $True, ParameterSetName = 'ByName')]
        [ValidateNotNullorEmpty()]
        [String] $Name,

        [Parameter(Mandatory = $True, ParameterSetName = 'ByObject', ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [System.Object] $InstanceObject,

        [Parameter(Mandatory = $False)]
        [CVSQLBackupType] $BackupType = 'Incremental',
        
        [Switch] $Force
    )

    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
            $endpointSave = $sessionObj.requestProps.endpoint
        }
        catch {
            throw $_
        }
    }

    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"

        try {
            $sessionObj.requestProps.endpoint = $endpointSave

            if ($PSCmdlet.ParameterSetName -eq 'ByName') {
                $instanceObj = Get-CVSQLInstance -Name $Name
                if ($null -ne $instanceObj) { 
                    $InstanceObject = $instanceObj
                }
                else {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): instance not found having name [$Name]"      
                    return
                }
            }

            $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{instanceId}', $InstanceObject.insId)

            $headerObj = Get-CVRESTHeader $sessionObj
            $body = @{}
            $body.Add('backupType', $BackupType)
            $payload = @{}
            $payload.Add('headerObject', $headerObj)
            $payload.Add('body', $body)
            $validate = 'taskId'

            if ($Force -or $PSCmdlet.ShouldProcess($InstanceObject.insName)) {
                $response = Submit-CVRESTRequest $payload $validate
            }
            else {
                $response = Submit-CVRESTRequest $payload $validate -DryRun
            }

            if ($response.IsValid) {
                Write-Output $response.Content
            }
            else {
                Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): backup request declined for instance [$($InstanceObject.insName)]"      
            }
        }
        catch
        {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"
    }
}


function Backup-CVSQLSubclient { 
<#
.SYNOPSIS
    Method to submit backup job for specific SQL subclient.

.DESCRIPTION
    Method to submit backup job for specific SQL subclient.
    
.PARAMETER Name
    The subclient Name.

.PARAMETER ClientName
    The ClientName hosting the SQL instance.

.PARAMETER SubclientObject
    The SQL SubclientObject.

.PARAMETER BackupType
    The BackupType: full, incremental (default), differential.

.PARAMETER Force
    Switch to Force override of default 'WhatIf' confirmation behavior.

.EXAMPLE
    Backup-CVSQLSubclient

.EXAMPLE
    Backup-CVSQLSubclient -Name AuditDB -ClientName carbonWinCS1 -BackupType full

.EXAMPLE
    Get-CVSubclient -Name AuditDB -ClientName carbonWinCS1 | Backup-CVSQLSubclient

.OUTPUTS
    Outputs [PSCustomObject] containing job submission result.

.NOTES
    Author: Gary Stoops
    Company: Commvault
#>
    [CmdletBinding(DefaultParameterSetName = 'ByName', SupportsShouldProcess = $True, ConfirmImpact = 'Low')]
    [OutputType([PSCustomObject])]
    param(
        [Parameter(Mandatory = $True, ParameterSetName = 'ByName')]
        [ValidateNotNullorEmpty()]
        [String] $Name,

        [Parameter(Mandatory = $True, ParameterSetName = 'ByName')]
        [ValidateNotNullorEmpty()]
        [String] $ClientName,

        [Parameter(Mandatory = $True, ParameterSetName = 'ByObject', ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [System.Object] $SubclientObject,

        [Parameter(Mandatory = $False)]
        [CVSQLBackupType] $BackupType = 'Incremental',
        
        [Switch] $Force
    )

    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
            $endpointSave = $sessionObj.requestProps.endpoint
        }
        catch {
            throw $_
        }
    }

    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"

        try {
            $sessionObj.requestProps.endpoint = $endpointSave

            if ($PSCmdlet.ParameterSetName -eq 'ByName') {
                $subclientObj = Get-CVSubclient -Name $Name -ClientName $ClientName
                if ($null -ne $subclientObj) { 
                    $SubclientObject = $subclientObj
                }
                else {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): subclient not found having name [$Name]"      
                    return
                }
            }

            $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{instanceId}', $SubclientObject.instanceId)
            $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{subclientId}', $SubclientObject.subclientId)

            $headerObj = Get-CVRESTHeader $sessionObj
            $body = @{}
            $body.Add('backupType', $BackupType)
            $payload = @{}
            $payload.Add('headerObject', $headerObj)
            $payload.Add('body', $body)
            $validate = 'taskId'

            if ($Force -or $PSCmdlet.ShouldProcess($SubclientObject.subclientName)) {
                $response = Submit-CVRESTRequest $payload $validate
            }
            else {
                $response = Submit-CVRESTRequest $payload $validate -DryRun
            }

            if ($response.IsValid) {
                Write-Output $response.Content
            }
            else {
                Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): backup request declined for subclient [$($SubclientObject.subclientName)]"      
            }
        }
        catch
        {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"
    }
}    


# Internal use: takes $PSCmdlet.PagingParameters and returns a hashtable paging flag, page size, and page start index
function ValidatePagingParameters($PagingParameters, [UInt64] $TotalCount) {

    try {
        $pagingObj = @{ 'paging' = 0; 'pageSize' = $null; 'startPage' = $null; 'badParams' = $False }

        [UInt64] $PageSize = [Math]::Max($PagingParameters.First, 0)
        [UInt64] $StartPage = [Math]::Max($PagingParameters.Skip, 0)

        if ($PageSize -lt [Uint64]::MaxValue) { # MaxValue is system default
            if ($PageSize -gt 0 -and $PageSize -le $TotalCount) {
                if ($StartPage -lt ($TotalCount / $PageSize)) {
                    $pagingObj['paging'] = 1
                    $pagingObj['pageSize'] = $PageSize
                    $pagingObj['startPage'] = $StartPage
                }
                elseif ($StartPage -gt 0) {
                    $pagingObj['badParams'] = $True
                    Write-Warning -Message "$($MyInvocation.MyCommand): paging parameter -Skip [$StartPage] beyond end of record set"
                }
            }
            elseif ($PageSize -gt 0) {
                $pagingObj['badParams'] = $True
                Write-Warning -Message "$($MyInvocation.MyCommand): paging parameter -First [$PageSize] exceeds total record count"
            }
        }

        Write-Output $pagingObj
    }
    catch {
        throw $_
    }
}


function NullifyGetSQLDatabaseEndpointParams([String]$Endpoint) {

    try {
        $Endpoint = $Endpoint -creplace ('{paging}', $null)
        $Endpoint = $Endpoint -creplace ('{startPage}', $null)
        $Endpoint = $Endpoint -creplace ('{pageSize}', $null)
        $Endpoint = $Endpoint -creplace ('{clientName}', $null)
        $Endpoint = $Endpoint -creplace ('{instanceName}', $null)
        $Endpoint = $Endpoint -creplace ('{instanceId}', $null)
        $Endpoint = $Endpoint -creplace ('{databaseName}', $null)
        $Endpoint = $Endpoint -creplace ('{databaseId}', $null)
        $Endpoint = $Endpoint -creplace ('{sortBy}', $null)
        $Endpoint = $Endpoint -creplace ('{sortDir}', $null) 
        $Endpoint = $Endpoint -creplace ('{toTime}', $null)
        $Endpoint = $Endpoint -creplace ('{searchTerm}', $null)
        $Endpoint = $Endpoint -creplace ('{onlySLA}', $null)
        $Endpoint = $Endpoint -creplace ('{showSysDB}', $null)
        $Endpoint = $Endpoint -creplace ('{propertyLevel}', $null)

        Write-Output $Endpoint
    }
    catch {
        throw $_
    }
}


function NullifyGetSQLInstanceEndpointParams([String]$Endpoint) {

    try {
        $Endpoint = $Endpoint -creplace ('{paging}', $null)
        $Endpoint = $Endpoint -creplace ('{startPage}', $null)
        $Endpoint = $Endpoint -creplace ('{pageSize}', $null)
        $Endpoint = $Endpoint -creplace ('{propertyLevel}', $null)
        $Endpoint = $Endpoint -creplace ('{onlySLA}', $null)
        $Endpoint = $Endpoint -creplace ('{sortBy}', $null)
        $Endpoint = $Endpoint -creplace ('{sortDir}', $null) 
        $Endpoint = $Endpoint -creplace ('{searchTerm}', $null)
        $Endpoint = $Endpoint -creplace ('{instanceName}', $null)
        $Endpoint = $Endpoint -creplace ('{clientName}', $null)
        
        Write-Output $Endpoint
    }
    catch {
        throw $_
    }
}