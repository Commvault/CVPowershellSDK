#
# Module 'Commvault.StorageResources'
#
# Generated by: Commvault
#
# Generated on: 5/22/2019
#

using module 'Commvault.TypeDefinitions'

Set-StrictMode -Version latest


function Get-CVMediaAgent {
<#
.SYNOPSIS
    Method to retrieve media agent instances from the CommServe.

.DESCRIPTION
    Method to retrieve media agent instances from the CommServe. Output can be filtered by Name parameter.

.PARAMETER Name
    Specify media agent instances to be output by Name.

.EXAMPLE
    Get-CVMediaAgent
    
.EXAMPLE
    Get-CVMediaAgent -Name SNOWSQL1

.OUTPUTS
    Outputs [PSCustomObject] containing media agent instances.

.NOTES
    Author: Gary Stoops
    Company: Commvault
#>
    [CmdletBinding(DefaultParameterSetName = 'Default')]
    [OutputType([PSCustomObject])]
    param(
        [Alias('MAName')]
        [Parameter(Mandatory = $False, ParameterSetName = 'Default')]
        [ValidateNotNullorEmpty()]
        [String] $Name
    )
    
    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
            $endpointSave = $sessionObj.requestProps.endpoint
            $totalCount = 0
        }
        catch {
            throw $_
        }
    }

    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"
    
        try {
            $sessionObj.requestProps.endpoint = $endpointSave

            $headerObj = Get-CVRESTHeader $sessionObj
            $body = ''
            $payload = @{ }
            $payload.Add('headerObject', $headerObj)
            $payload.Add('body', $body)
            $validate = 'response'
                
            $response = Submit-CVRESTRequest $payload $validate

            if ($response.IsValid) {
                foreach ($mediaAgent in $response.Content.response) {
                    if (-not [String]::IsNullOrEmpty($Name)) {
                        if ($Name -eq $mediaAgent.entityInfo.name) {
                            Write-Output $mediaAgent.entityInfo
                            $totalCount++
                        }
                    }
                    else {
                        Write-Output $mediaAgent.entityInfo
                        $totalCount++
                    }
                }
            }
        }
        catch {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"

        try {
            if ($totalCount -eq 0) {
                if (-not [String]::IsNullOrEmpty($Name)) {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): media agent not found having name [$Name]"
                }
                else {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): no media agents found"
                }
            }
        }
        catch {
            throw $_
        }
    }
}


function Get-CVSubclientMediaAgent {
<#
.SYNOPSIS
    Method to retrieve subclient media agent instances from the CommServe.

.DESCRIPTION
    Method to retrieve subclient media agent instances from the CommServe.

.PARAMETER Name
    Retrieve media agent instances for subclient identified by Name.

.PARAMETER Id
    Retrieve media agent instances for subclient identified by Id.

.PARAMETER ClientName
    Provide ClientName for subclient lookup.
    
.PARAMETER SubclientObject
    Retrieve media agent instances by piped SubclientObject.

.EXAMPLE
    Get-CVSubclientMediaAgent
    
.EXAMPLE
    Get-CVSubclientMediaAgent -Name default -ClientName carbonwincs1
    
.EXAMPLE
    Get-CVSubclientMediaAgent -Id 2 -ClientName carbonwincs1
    
.EXAMPLE
    Get-CVSubclient -ClientName carbonwincs1 | Get-CVSubclientMediaAgent

.OUTPUTS
    Outputs [PSCustomObject] containing subclient media agent instances.

.NOTES
    Author: Gary Stoops
    Company: Commvault
#>
    [CmdletBinding(DefaultParameterSetName = 'ByName')]
    [OutputType([PSCustomObject])]
    param(
        [Parameter(Mandatory = $True, ParameterSetName = 'ByName')]
        [ValidateNotNullorEmpty()]
        [String] $Name,

        [Parameter(Mandatory = $True, ParameterSetName = 'ByName')]
        [Parameter(Mandatory = $True, ParameterSetName = 'ById')]
        [ValidateNotNullorEmpty()]
        [String] $ClientName,

        [Parameter(Mandatory = $True, ParameterSetName = 'ById')]
        [ValidateNotNullorEmpty()]
        [Int32] $Id,

        [Parameter(Mandatory = $True, ParameterSetName = 'ByObject', ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [System.Object] $SubclientObject
    )
    
    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
            $endpointSave = $sessionObj.requestProps.endpoint
            $processCount = 0
        }
        catch {
            throw $_
        }
    }

    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"
    
        try {
            $sessionObj.requestProps.endpoint = $endpointSave
            
            if ($PSCmdlet.ParameterSetName -eq 'ByName') {
                $subclientObj = Get-CVSubclient -Name $Name -ClientName $ClientName
                if ($null -ne $subclientObj) { 
                    $SubclientObject = $subclientObj
                }
                else {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): subclient not found having name [$Name] for client [$ClientName]"      
                    return
                }
            }
            elseif ($PSCmdlet.ParameterSetName -eq 'ById') {
                $subclientObj = Get-CVSubclient -Id $Id -ClientName $ClientName
                if ($null -ne $subclientObj) { 
                    $SubclientObject = $subclientObj
                }
                else {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): subclient not found having id [$Id] for client [$ClientName]"      
                    return
                }
            }
            
            $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{subclientId}', $SubclientObject.subclientId)

            Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): ...processing subclient [$($SubclientObject.subclientName)]"      

            $headerObj = Get-CVRESTHeader $sessionObj
            $body = ''
            $payload = @{ }
            $payload.Add('headerObject', $headerObj)
            $payload.Add('body', $body)
            $validate = 'mediaAgentId'
                
            $response = Submit-CVRESTRequest $payload $validate

            if ($response.IsValid) {
                foreach ($mediaAgent in $response.Content) {
                    Write-Output $mediaAgent
                    $processCount++
                }
            }

            if ($PSCmdlet.ParameterSetName -eq 'ByObject') {
                if ($processCount -eq 0) {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): no media agents found for subclient [$($SubclientObject.subclientName)]"      
                }
                else {
                    $processCount = 0
                }
            }
        }
        catch {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"

        try {
            if ($PSCmdlet.ParameterSetName -ne 'ByClientObject' -and $processCount -eq 0) {
                Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): no media agents found for subclient [$($SubclientObject.subclientName)]"      
            }
        }
        catch {
            throw $_
        }
    }
}
        

function Get-CVLibrary {
<#
.SYNOPSIS
    Method to retrieve storage resource library instances from the CommServe.

.DESCRIPTION
    Method to retrieve storage resource library instances from the CommServe. Output can be filtered by both library Name and associated MediaAgentName.

.PARAMETER Name
    Filter library instances to be output by Name.

.PARAMETER MediaAgentName
    Filter library instances to be output by associated MediaAgentName.

.PARAMETER AllProperties
    Output library instances with full detail.

.EXAMPLE
    Get-CVLibrary

.EXAMPLE
    Get-CVLibrary -AllProperties

.EXAMPLE
    Get-CVLibrary -Name LIBRARY01

.EXAMPLE
    Get-CVLibrary -MediaAgentName PRODDEDUPE3

.EXAMPLE
    Get-CVLibrary -Name LIBRARY01 -MediaAgentName PRODDEDUPE3

.EXAMPLE
    Get-CVLibrary -Name LIBRARY01 -MediaAgentName PRODDEDUPE3 -AllProperties

.OUTPUTS
    Outputs [PSCustomObject] containing storage resource library instances.

.NOTES
    Author: Gary Stoops
    Company: Commvault
#>
    [CmdletBinding(DefaultParameterSetName = 'Default')]
    [OutputType([PSCustomObject])]
    param(
        [Alias('LibraryName')]
        [Parameter(Mandatory = $False, ParameterSetName = 'Default', ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [String] $Name,

        [Alias('MAName')]
        [Parameter(Mandatory = $False, ParameterSetName = 'Default', ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [String] $MediaAgentName,

        [Parameter(Mandatory = $False)]
        [Switch] $AllProperties
    )

    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
            $endpointSave = $sessionObj.requestProps.endpoint
        }
        catch {
            throw $_
        }
    }

    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"

        try {
            $sessionObj.requestProps.endpoint = $endpointSave

            $headerObj = Get-CVRESTHeader $sessionObj
            $body = ''
            $payload = @{ }
            $payload.Add('headerObject', $headerObj)
            $payload.Add('body', $body)
            $validate = 'response'
            
            $response = Submit-CVRESTRequest $payload $validate

            $libDetail = @()
            $foundName = $False
            $foundMediaAgentName = $False

            if ($response.IsValid) {
                if ($AllProperties -or -not [String]::IsNullOrEmpty($MediaAgentName)) {
                    foreach ($library in $response.Content.response) {
                        $libDetail += (GetLibraryProperties $library.entityInfo).libraryInfo
                    }
                    foreach ($lib in $libDetail) {
                        if (-not [String]::IsNullOrEmpty($MediaAgentName)) {
                            if (($lib.magLibSummary.associatedMediaAgents).ToLower().Trim() -match ($MediaAgentName).ToLower()) {
                                $foundMediaAgentName = $True
                                if (-not [String]::IsNullOrEmpty($Name)) {
                                    if (($lib.library.libraryName).ToLower().Trim() -match ($Name).ToLower()) {
                                        $foundName = $True
                                        if ($AllProperties) { Write-Output $lib } else { Write-Output $lib.library}
                                    }
                                }
                                else {
                                    if ($AllProperties) { Write-Output $lib } else { Write-Output $lib.library}
                                }
                            }
                        }
                        elseif (-not [String]::IsNullOrEmpty($Name)) {
                            if (($lib.library.libraryName).ToLower().Trim() -match ($Name).ToLower()) {
                                $foundName = $True
                                if ($AllProperties) { Write-Output $lib } else { Write-Output $lib.library}
                            }
                        }
                        else {
                            if ($AllProperties) { Write-Output $lib } else { Write-Output $lib.library}
                        }
                    }
                }
                else {
                    foreach ($library in $response.Content.response) {
                        if (-not [String]::IsNullOrEmpty($Name)) {
                            if ($library.entityInfo.name -eq $Name) {
                                $foundName = $True
                                Write-Output $library.entityInfo
                            }
                        }
                        else {
                            Write-Output $library.entityInfo
                        }
                    }
                }
            }
            else {
                Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): no libraries found"
            }

            if (-not [String]::IsNullOrEmpty($Name) -and -not $foundName) {
                Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): library not found having name [$Name]"
            }

            if (-not [String]::IsNullOrEmpty($MediaAgentName) -and -not $foundMediaAgentName) {
                Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): library not found having media agent [$MediaAgentName]"
            }
        }
        catch {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"
    }
}
    
    
function Get-CVDiskSpace {
<#
.SYNOPSIS
    Method to retrieve the available disk space of the library.

.DESCRIPTION
    Method to retrieve the available disk space of the library. Requires either the LibraryName or an associated MediaAgentName.

.PARAMETER LibraryName
    Retrieve available disk space details for the library specified by LibraryName.

.PARAMETER MediaAgentName
    Retrieve available disk space details for libraries associated with MediaAgentName.

.PARAMETER MountPath
    Filter output for a specific MountPath.

.EXAMPLE
    Get-CVDiskSpace
    
.EXAMPLE
    Get-CVDiskSpace -MediaAgentName PRODDEDUPE3
    
.EXAMPLE
    Get-CVDiskSpace -MAName PRODDEDUPE3
    
.EXAMPLE
    Get-CVDiskSpace -LibraryName library01
    
.EXAMPLE
	Get-CVDiskSpace -LibraryName library01 -MountPath F:\PRODTESTLIB

.OUTPUTS
    Outputs [PSCustomObject] containing storage resource library disk usage details.

.NOTES
    Author: Gary Stoops
    Company: Commvault
#>
    [CmdletBinding(DefaultParameterSetName = 'ByLibraryName')]
    [OutputType([PSCustomObject])]
    param(
        [Parameter(Mandatory = $True, ParameterSetName = 'ByLibraryName', ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [String] $LibraryName,

        [Alias('MAName')]
        [Parameter(Mandatory = $True, ParameterSetName = 'ByMediaAgentName', ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [String] $MediaAgentName,

        [Parameter(Mandatory = $True, ParameterSetName = 'ByLibraryObject', ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [System.Object] $LibraryObject,

        [Parameter(Mandatory = $False)]
        [ValidateNotNullorEmpty()]
        [String] $MountPath
    )

    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
            $endpointSave = $sessionObj.requestProps.endpoint
        }
        catch {
            throw $_
        }
    }

    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"

        try {
            $endpoint = $endpointSave
            $endpoints = @()
            $mountPaths = @()

            if ($PSCmdlet.ParameterSetName -eq 'ByLibraryName') {
                $libraryId = Get-CVLibrary -Name $LibraryName
                if ($null -ne $libraryId) {
                    $endpoints += $endpoint -creplace ('{id}', $libraryId.id)
                }
                else {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): library not found having name [$LibraryName]"
                    return
                }
            }
            elseif ($PSCmdlet.ParameterSetName -eq 'ByMediaAgentName') {
                $libraries = Get-CVLibrary -MediaAgentName $MediaAgentName
                if ($null -ne $libraries -and $libraries.Count -gt 0) {
                    foreach ($lib in $libraries) {
                        $endpoints += $endpoint -creplace ('{id}', $lib.libraryId)
                    }
                }
                else {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): no libraries found for media agent [$MediaAgentName]"
                    return
                }
            }
            else {
                $endpoints += $endpoint -creplace ('{id}', $LibraryObject.id)
            }

            if (-not [String]::IsNullOrEmpty($MountPath)) { #Wrap up the string so it won't fail for escape chars
                $MountPath = [regex]::Escape($MountPath)
            }

            foreach ($endpoint in $endpoints) {
                $sessionObj.requestProps.endpoint = $endpoint
                $headerObj = Get-CVRESTHeader $sessionObj
                $body = ''
                $payload = @{ }
                $payload.Add('headerObject', $headerObj)
                $payload.Add('body', $body)
                $validate = 'libraryInfo'
            
                $response = Submit-CVRESTRequest $payload $validate
                
                if ($response.IsValid) {
                    if (-not [String]::IsNullOrEmpty($MountPath)) {
                        foreach ($path in $response.Content.libraryInfo.MountPathList) {
                            $parsed = [regex]::Escape($path.mountPathName)
                            if ($parsed -Like "*$MountPath*") {
                                $mountPaths += $response.Content.libraryInfo.MountPathList[0].mountPathSummary
                            }
                        }
                    }
                    else {
                        $mountPaths += $response.Content.libraryInfo.magLibSummary
                    }
                }
            }

            if ($mountPaths.Count -eq 0) {
                if (-not [String]::IsNullOrEmpty($MountPath)) {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): mount path not found [$MountPath]"
                }
                elseif (-not [String]::IsNullOrEmpty($LibraryName)) {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): mount paths not found having library [$LibraryName]"
                }
                else {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): mount paths not found having library [$MediaAgentName]"
                }
            }
            else {
                Write-Output $mountPaths
            }
        }
        catch {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"
    }
}
        
        
function GetLibraryProperties ([System.Object] $LibraryObject) {

    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
            $endpointSave = $sessionObj.requestProps.endpoint
        }
        catch {
            throw $_
        }
    }

    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"

        try {
            $sessionObj.requestProps.endpoint = $endpointSave
            $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{id}', $LibraryObject.Id)

            $headerObj = Get-CVRESTHeader $sessionObj
            $body = ''
            $payload = @{ }
            $payload.Add('headerObject', $headerObj)
            $payload.Add('body', $body)
            $validate = 'libraryInfo'

            $response = Submit-CVRESTRequest $payload $validate

            if ($response.IsValid) {
                Write-Output $response.Content
            }
        }
        catch {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"
    }
}
