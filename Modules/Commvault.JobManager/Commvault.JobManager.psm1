#
# Module 'Commvault.JobManager'
#
# Generated by: Commvault
#
# Generated on: 5/22/2019
#

using module 'Commvault.TypeDefinitions'

Set-StrictMode -Version latest


function Get-CVJob {
<#
.SYNOPSIS
    Get list of jobs from the CommServe.

.DESCRIPTION
    Get the list of all jobs. Based on parameters this commandlet filters the output.
    This method is implemented with Powershell paging support.

.PARAMETER ClientName
    Filter output based on ClientName.

.PARAMETER SubclientName
    Filter output based on SubclientName: requires ClientName parameter.
    
.PARAMETER JobFilter
    Filter output based on JobFilter. Example Snapbackup, DATA_VERIFICATION or SYNTHFULL etc.
    
.PARAMETER JobCategory
    Filter output based on JobCategory. Example Active, Finished, All.

.PARAMETER CompletedTime
    Filter output based on completed job lookup time expressed in hours.

.PARAMETER Details
    Retrieves the details for a job.

.PARAMETER limit
    The number of results to be listed in a page. Used for changing the paging limits. By default, the limit is 100 results per page.

.PARAMETER First
    Get list of jobs with paging support -First 20 (20 per page).

.PARAMETER Skip
    Get list of jobs with paging support -First 20 -Skip 5 (20 per page, skip first 5 jobs).

.PARAMETER IncludeTotalCount
    Include total count of result record set.

.EXAMPLE
    Get-CVJob

.EXAMPLE
    Get-CVJob -CompletedTime 8 -IncludeTotalCount
    
.EXAMPLE
    Get-CVJob -CompletedTime 72 -IncludeTotalCount -First 5    

.EXAMPLE
    Get-CVJob -CompletedTime 240 -IncludeTotalCount -First 10 -Skip 0    

.EXAMPLE
    Get-CVJob -CompletedTime 240 -IncludeTotalCount -First 10 -Skip 20
    
.EXAMPLE
    Get-CVJob -Details
    
.EXAMPLE
    Get-CVJob -ClientName VC2KR2

.EXAMPLE
    Get-CVJob -ClientName VC2KR2 -SubclientName snap_backup2 -CompletedTime 72

.EXAMPLE
    Get-CVJob | Where-Object { $_.Status -like 'Running' }

.EXAMPLE
    Get-CVJob | Where-Object { $_.Status -like 'Pending' }

.EXAMPLE
    Get-CVJob | Where-Object { $_.Status -like 'Waiting' }

.EXAMPLE
    Get-CVJob | Where-Object { $_.Status -like 'Completed' }

.OUTPUTS
    Outputs [PSCustomObject] containing job details.

.NOTES
    Author: Gary Stoops
    Company: Commvault
#>
    [CmdletBinding(SupportsPaging = $True, DefaultParameterSetName = 'Default')]
    [OutputType([PSCustomObject])]
    param(
        [Parameter(Mandatory = $False, ParameterSetName = 'ById', ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [Int32] $Id,

        [Parameter(Mandatory = $False, ParameterSetName = 'Default')]
        [ValidateNotNullorEmpty()]
        [String] $ClientName,

        [Parameter(Mandatory = $False, ParameterSetName = 'Default')]
        [ValidateNotNullorEmpty()]
        [String] $SubclientName,

        [Alias('Filter')]
        [Parameter(Mandatory = $False, ParameterSetName = 'Default')]
        [ValidateNotNullorEmpty()]
        [String] $JobFilter,

        [Parameter(Mandatory = $False, ParameterSetName = 'Default')]
        [ValidateNotNullorEmpty()]
        [String] $JobCategory,

        [Parameter(Mandatory = $False, ParameterSetName = 'Default')]
        [ValidateNotNullorEmpty()]
        [Int32] $CompletedTime = 24, # default 24 hours

        [Parameter(Mandatory = $False, ParameterSetName = 'Default')]
        [ValidateNotNullorEmpty()]
        [Int32] $limit = 100,

        [Switch] $Details
    )
    
    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            if ($PSCmdlet.ParameterSetName -eq 'ById') {
                $sessionObj = Get-CVSessionDetail 'GetJobById'
            }
            else {
                $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
            }
            $endpointSave = $sessionObj.requestProps.endpoint
            $subclientId = $null
        }
        catch {
            throw $_
        }
    }

    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"

        try 
        {
            $sessionObj.requestProps.endpoint = $endpointSave

            if ($PSCmdlet.ParameterSetName -eq 'ById') {
                $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{jobId}', $Id)

                $headerObj = Get-CVRESTHeader $sessionObj
                $body = ''
                $payload = @{ }
                $payload.Add('headerObject', $headerObj)
                $payload.Add('body', $body)
                $validate = 'jobs'
                
                $response = Submit-CVRESTRequest $payload $validate
    
                if ($response.IsValid) 
                {
                    if ($Details) {
                        Write-Output (Get-CVJobDetail -Id $response.Content.jobs.jobSummary.jobId).detailInfo
                    }
                    else {
                        Write-Output $response.Content.jobs.jobSummary
                    }
                }
                else 
                { 
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): job Id [$Id] not found"
                }
            }
            else {
                if (-not [String]::IsNullOrEmpty($ClientName)) {
                    $clientObj = Get-CVId -ClientName $ClientName
                    if ($null -ne $clientObj) { 
                        $sessionObj.requestProps.endpoint += '&clientId=' + $clientObj.clientId
                    }
                    else {
                        return
                    }
                }
    
                if (-not [String]::IsNullOrEmpty($SubclientName)) {
                    if ([String]::IsNullOrEmpty($ClientName)) {
                        $ClientName = Read-Host 'ClientName'
                    }
    
                    $subclientObj = Get-CVSubclient -Name $SubclientName -ClientName $ClientName
    
                    if ($null -ne $subclientObj) { 
                        $subclientId = $subclientObj.subclientId 
                    } 
                }
    
                if (-not [String]::IsNullOrEmpty($JobFilter)) {
                    $sessionObj.requestProps.endpoint += '&jobFilter=' + $JobFilter
                }
    
                if (-not [String]::IsNullOrEmpty($JobCategory)) {
                    $sessionObj.requestProps.endpoint += '&jobCategory=' + $JobCategory
                }
    
                if ($CompletedTime) {
                    $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{completedJobLookupTime}', ($CompletedTime * 3600))
                }
                else {
                    $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{completedJobLookupTime}', $null)
                }

                if ($limit) {
                    $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{limit}', $limit)
                }
                else {
                    $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{limit}', $null)
                }
    
                if ($PSCmdlet.PagingParameters.First -eq [Uint64]::MaxValue) { # MaxValue is system default
                    if ($PSCmdlet.PagingParameters.IncludeTotalCount.IsPresent) {
                        $headerObj = Get-CVRESTHeader $sessionObj -Limit 0 -Offset 0
                    }
                    else {
                        $headerObj = Get-CVRESTHeader $sessionObj
                    }
                }
                else {
                    $headerObj = Get-CVRESTHeader $sessionObj -Limit $PSCmdlet.PagingParameters.First -Offset $PSCmdlet.PagingParameters.Skip
                }

                $body = ''
                $payload = @{ }
                $payload.Add('headerObject', $headerObj)
                $payload.Add('body', $body)
                $validate = 'jobs'
                
                $response = Submit-CVRESTRequest $payload $validate
    
                if ($response.IsValid) 
                {
                    if ($subclientId) 
                    {
                        $foundSubclientJob = $False
                        foreach ($job in $response.Content.jobs) 
                        {
                            if ($job.jobSummary.subclient.subclientId -eq $subclientId) 
                            {
                                $foundSubclientJob = $True
                                if ($Details) {
                                    Write-Output (Get-CVJobDetail $job.jobSummary.jobId).detailInfo
                                }
                                else {
                                    Write-Output $job.jobSummary
                                }
                            }
                        }
                        if (-not $foundSubclientJob) {
                            Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): no jobs found for subclient [$SubclientName]"
                        }
                    }
                    else 
                    { 
                        foreach ($job in $response.Content.jobs) 
                        {
                            if ($Details) {
                                Write-Output (Get-CVJobDetail -Id $job.jobSummary.jobId).detailInfo
                            }
                            else {
                                Write-Output $job.jobSummary
                            }
                        }
                    }
                }
                else 
                { 
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): no jobs found"
                }
            }
        }
        catch 
        {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"
        if ($PSCmdlet.PagingParameters.IncludeTotalCount) {
            [double] $accuracy = 1.0
            $PSCmdlet.PagingParameters.NewTotalCount($response.Content.totalRecordsWithoutPaging, $accuracy)
        }
    }
}


function Get-CVJobDetail {
    <#
.SYNOPSIS
    Gets extended details for a job.

.DESCRIPTION
    Gets extended details for a job. JobId must be valid.

.PARAMETER Id
    Gets extended details for the job specified by Id.

.PARAMETER InfoType
	Gets additional job information.

.PARAMETER JobObject
    Gets extended details for the job specified by piped JobObject.

.EXAMPLE
    Get-CVJobDetail
    
.EXAMPLE
    Get-CVJobDetail -Id 175

.EXAMPLE
    Get-CVJob | Get-CVJobDetail

.EXAMPLE
    Get-CVJobDetail -Id 175 | Select-Object -ExpandProperty detailInfo

.EXAMPLE
    Get-CVJobDetail -Id 175 | Select-Object -ExpandProperty generalInfo

.EXAMPLE
    Get-CVJobDetail -Id 175 | Select-Object -ExpandProperty progressInfo

.EXAMPLE
    Get-CVJobDetail -Id 175 InfoType 1

.OUTPUTS
    Outputs [PSCustomObject] containing result.

.NOTES
    Author: Gary Stoops
    Company: Commvault
#>
    [Alias('Get-CVJobDetails')]
    [CmdletBinding(DefaultParameterSetName = 'ById')]
    [OutputType([PSCustomObject])]
    param(
        [Alias('JobId')]
        [Parameter(Mandatory = $True, ParameterSetName = 'ById')]
        [ValidateNotNullorEmpty()]
        [Int32] $Id,

        [Parameter(Mandatory = $False, ParameterSetName = 'ById', ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [Int32] $InfoType,

        [Parameter(Mandatory = $True, ParameterSetName = 'ByObject', ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [System.Object] $JobObject
    )

    begin {
        Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            if ($InfoType -eq 0) {
                $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
                $endpointSave = $sessionObj.requestProps.endpoint  
            }
            else {
                $sessionObj = Get-CVSessionDetail 'GetJobById'
                $endpointSave = $sessionObj.requestProps.endpoint  
            }
        }
        catch {
            throw $_
        }
    }

    process {
        Write-Debug -Message "$($MyInvocation.MyCommand): process"

        try {
            if ($InfoType -gt 0) {
                if ($PSCmdlet.ParameterSetName -eq 'ById') {
                    $job_id = $Id
                }
                else {
                    $job_id = $JobObject.jobId
                }
                $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{jobId}', ($job_id))
                $sessionObj.requestProps.endpoint = -join ($sessionObj.requestProps.endpoint, "/AdvancedDetails?infoType=", $InfoType)
                $body = ''
                $headerObj = Get-CVRESTHeader $sessionObj
                $payload = @{ }
                $payload.Add('headerObject', $headerObj)
                $payload.Add('body', $body)
                $validate = ''

                $response = Submit-CVRESTRequest $payload $validate

                if ($response.IsValid) {
                    Write-Output $response.Content
                }
            }
            else {
                $sessionObj.requestProps.endpoint = $endpointSave

                $headerObj = Get-CVRESTHeader $sessionObj
                $jobObj = @{ }
                if ($PSCmdlet.ParameterSetName -eq 'ById') {
                    $jobObj.Add('jobId', $Id)
                }
                else {
                    $jobObj.Add('jobId', $JobObject.jobId)
                }
                $body = $jobObj | ConvertTo-Json -Depth 10
                $payload = @{ }
                $payload.Add('headerObject', $headerObj)
                $payload.Add('body', $body)
                $validate = 'job'
    
                $response = Submit-CVRESTRequest $payload $validate
    
                if ($response.IsValid) {
                    Write-Output $response.Content.job.jobDetail
                }
            }

        }
        catch {
            throw $_
        }
    }

    end {
        Write-Debug -Message "$($MyInvocation.MyCommand): end"
    }
}


function Suspend-CVJob {
<#
.SYNOPSIS
    Suspends the job specified by job Id.

.DESCRIPTION
    Suspends the job specified by job Id. If the job cannot be suspended, this command has no effect.

.PARAMETER JobId
    Suspend the job specified by JobId.

.EXAMPLE
    Suspend-CVJob -JobId 78
    
.OUTPUTS
    Outputs [PSCustomObject] containing result.

.NOTES
    Author: Gary Stoops
    Company: Commvault
#>
    [CmdletBinding()]
    [OutputType([PSCustomObject])]
    param(
        [Parameter(Mandatory = $True)]
        [ValidateNotNullorEmpty()]
        [Int32] $JobId
    )

    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
            $endpointSave = $sessionObj.requestProps.endpoint
        }
        catch {
            throw $_
        }
    }

    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"

        try {
            $sessionObj.requestProps.endpoint = $endpointSave
            $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{jobId}', $JobId)

            $headerObj = Get-CVRESTHeader $sessionObj
            $body = ''
            $payload = @{ }
            $payload.Add('headerObject', $headerObj)
            $payload.Add('body', $body)
            $validate = 'errors'
            
            $response = Submit-CVRESTRequest $payload $validate

            if ($response.IsValid) { 
                Write-Output ($response.Content.errors[0].errList | Select-Object errLogMessage)
            }
            else { 
                Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): suspend request was not succesfully submitted for job [$JobId]"
            }
        }
        catch {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"
    }
}

    
function Resume-CVJob {
<#
.SYNOPSIS
    Resumes the job specified by job Id.

.DESCRIPTION
    Resumes the job specified by job Id. If the job cannot be resumed, this command has no effect.

.PARAMETER JobId
    Resume the job specified by JobId.

.EXAMPLE
    Resume-CVJob -JobId 78
    
.OUTPUTS
    Outputs [PSCustomObject] containing result.

.NOTES
    Author: Gary Stoops
    Company: Commvault
#>
    [CmdletBinding()]
    [OutputType([PSCustomObject])]
    param(
        [Parameter(Mandatory = $True)]
        [ValidateNotNullorEmpty()]
        [Int32] $JobId
    )

    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
            $endpointSave = $sessionObj.requestProps.endpoint
        }
        catch {
            throw $_
        }
    }

    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"

        try {
            $sessionObj.requestProps.endpoint = $endpointSave
            $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{jobId}', $JobId)

            $headerObj = Get-CVRESTHeader $sessionObj
            $body = ''
            $payload = @{ }
            $payload.Add('headerObject', $headerObj)
            $payload.Add('body', $body)
            $validate = 'errors'
            
            $response = Submit-CVRESTRequest $payload $validate

            if ($response.IsValid) { 
                Write-Output ($response.Content.errors[0].errList | Select-Object errLogMessage)
            }
            else { 
                Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): resume request was not succesfully submitted for job [$JobId]"
            }
        }
        catch {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"
    }
}
function Resubmit-CVJob {
    <#
    .SYNOPSIS
        Resubmit the job specified by job Id.
    
    .DESCRIPTION
        Resubmit the job specified by job Id. 
    
    .PARAMETER JobId
        Resubmit the job specified by JobId.
    
    .EXAMPLE
        Resubmit-CVJob -JobId 78
        
    .OUTPUTS
        Outputs [PSCustomObject] containing result.
    
    .NOTES
        Author: Jnanesh D
        Company: Commvault
    #>
        [CmdletBinding()]
        [OutputType([PSCustomObject])]
        param(
            [Parameter(Mandatory = $True)]
            [ValidateNotNullorEmpty()]
            [Int32] $JobId
        )
    
        begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"
    
            try {
                $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
                $endpointSave = $sessionObj.requestProps.endpoint
            }
            catch {
                throw $_
            }
        }
    
        process { Write-Debug -Message "$($MyInvocation.MyCommand): process"
    
            try {
                $sessionObj.requestProps.endpoint = $endpointSave
                $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{jobId}', $JobId)
    
                $headerObj = Get-CVRESTHeader $sessionObj
                $body = ''
                $payload = @{ }
                $payload.Add('headerObject', $headerObj)
                $payload.Add('body', $body)
                
                $response = Submit-CVRESTRequest $payload 'jobIds'
    
                if ($response.IsValid) { 
                    Write-Output $response.Content
                }
                else { 
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): resume request was not succesfully submitted for job [$JobId]"
                }
            }
            catch {
                throw $_
            }
        }
    
        end { Write-Debug -Message "$($MyInvocation.MyCommand): end"
        }
}

function Stop-CVJob {
<#
.SYNOPSIS
    Stops/kills the job specified by job Id.

.DESCRIPTION
    Stops/kills the job specified by job Id. If the job cannot be killed, this command has no effect.

.PARAMETER JobId
    Stop/kill the job specified by JobId.

.EXAMPLE
    Stop-CVJob -JobId 78
    
.OUTPUTS
    Outputs [PSCustomObject] containing result.

.NOTES
    Author: Gary Stoops
    Company: Commvault
#>
    [Alias('Kill-CVJob')]
    [CmdletBinding()]
    [OutputType([PSCustomObject])]
    param(
        [Parameter(Mandatory = $True)]
        [ValidateNotNullorEmpty()]
        [Int32] $JobId
    )

    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
            $endpointSave = $sessionObj.requestProps.endpoint
        }
        catch {
            throw $_
        }
    }

    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"

        try {
            $sessionObj.requestProps.endpoint = $endpointSave
            $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{jobId}', $JobId)

            $headerObj = Get-CVRESTHeader $sessionObj
            $body = ''
            $payload = @{ }
            $payload.Add('headerObject', $headerObj)
            $payload.Add('body', $body)
            $validate = 'errors'
            
            $response = Submit-CVRESTRequest $payload $validate

            if ($response.IsValid) { 
                Write-Output ($response.Content.errors[0].errList | Select-Object errLogMessage)
            }
            else { 
                Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): stop request was not succesfully submitted for job [$JobId]"
            }
        }
        catch {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"
    }
}
            
            
function Get-CVSLAReport {
<#
.SYNOPSIS
    Gets SLA report for specific client or entire CommCell.

.DESCRIPTION
    Gets SLA report for specific client or entire CommCell.

.PARAMETER ClientName
    Filter SLA report by ClientName.
    
.PARAMETER ClientId
    Filter SLA report by ClientId.
    
.PARAMETER ClientObject
    Filter SLA report by piped ClientObject.
    
.PARAMETER Type
    Client = 1 (default), Agent = 2.

.PARAMETER Category
    Any = 0 (default), Protected = 1, Failed = 2, NoJobFound = 3, NoSchedule = 4.

.PARAMETER Status
    Any = 0 (default), Protected = 1, Unprotected = 2, Excluded = 3.

.PARAMETER EmailAddr
    EmailAddr for notification purpose.

.PARAMETER AllProperties
    Use this switch for extended detail.

.EXAMPLE
    Get-CVSLAReport

.EXAMPLE
    Get-CVSLAReport -ClientName carbonwincs1 -EmailAddr admin@testlab.commvault.com

.EXAMPLE
    Get-CVSLAReport -ClientId 57 -AllProperties

.EXAMPLE
    Get-CVClient | Get-CVSLAReport

.OUTPUTS
    Outputs [PSCustomObject] containing SLA report.

.NOTES
    Author: Gary Stoops
    Company: Commvault
#>
    [Alias('Get-CVSLA')]
    [CmdletBinding(DefaultParameterSetName = 'Default')]
    [OutputType([PSCustomObject])]
    param(
        [Parameter(Mandatory = $False, ParameterSetName = 'ByName')]
        [ValidateNotNullorEmpty()]
        [String] $ClientName,

        [Parameter(Mandatory = $False, ParameterSetName = 'ById')]
        [ValidateNotNullorEmpty()]
        [Int32] $ClientId,

        [Parameter(Mandatory = $False, ParameterSetName = 'ByObject', ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [System.Object] $ClientObject,

        [Parameter(Mandatory = $False)]
        [ValidateNotNullorEmpty()]
        [String] $EmailAddr,

        [Parameter (Mandatory = $False)] 
        [Int32] $Type = 1,

        [Parameter (Mandatory = $False)] 
        [int] $Category = 0,

        [Parameter (Mandatory = $False)] 
        [int] $Status = 0,

        [Switch] $AllProperties
    )

    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
            $endpointSave = $sessionObj.requestProps.endpoint
        }
        catch {
            throw $_
        }
    }

    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"

        try {
            $sessionObj.requestProps.endpoint = $endpointSave

            if ($PSCmdlet.ParameterSetName -eq 'ByName') {
                $clientObj = Get-CVClient -Name $ClientName
                if ($null -ne $clientObj) { 
                    $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{clientId}', $clientObj.clientId)
                }
                else {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): client not found having name [$ClientName]"      
                    return
                }
            }
            elseif ($PSCmdlet.ParameterSetName -eq 'ById') {
                $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{clientId}', $ClientId)
            }
            elseif ($PSCmdlet.ParameterSetName -eq 'ByObject') {
                $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{clientId}', $ClientObject.clientId)
                $ClientName = $ClientObject.clientName
            }
            
            #noop here if already replaced
            $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{clientId}', $null)

            $slaFlags = [ordered]@{ }
            $slaFlags.Add('type', $Type)
            $slaFlags.Add('category', $Category)
            $slaFlags.Add('status', $Status)

            $body = (PrepareSLABodyJson $slaFlags).body

            $headerObj = Get-CVRESTHeader $sessionObj
            $payload = @{ }
            if (-not [String]::IsNullOrEmpty($EmailAddr)) {
                $payload.Add('EmailId', $EmailAddr)
                if (-not [String]::IsNullOrEmpty($ClientName)) {
                    $payload.Add('emailSubject', "SLA report for client: $ClientName")
                }
                else {
                    $payload.Add('emailSubject', "SLA report for CommCell")
                }
            }
            $payload.Add('headerObject', $headerObj)
            $payload.Add('body', $body)
            $validate = 'lastSLA'

            $response = Submit-CVRESTRequest $payload $validate

            if ($response.IsValid) {
                if ($AllProperties) {
                    Write-Output $response.Content
                }
                else {
                    Write-Output $response.Content.lastSLA
                }
            }
            else {
                Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): SLA report not found"
            }
        }
        catch {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"
    }
}


function Update-CVMissedSLA {
<#
.SYNOPSIS
    Initiates backup job for subclients with missed SLA.

.DESCRIPTION
    Initiates backup job for subclients with missed SLA.

.PARAMETER ClientName
    Filter SLA report by ClientName.
    
.PARAMETER ClientId
    Filter SLA report by ClientId.
    
.PARAMETER ClientObject
    Filter SLA report by piped ClientObject.
    
.PARAMETER Type
    Client = 1 (default), Agent = 2.

.PARAMETER Category
    Any = 0, Protected = 1, Failed = 2 (default), NoJobFound = 3, NoSchedule = 4.

.PARAMETER Status
    Any = 0, Protected = 1, Unprotected = 2 (default), Excluded = 3.

.PARAMETER EmailAddr
    EmailAddr for notification purpose.

.EXAMPLE
    Update-CVMissedSLA

.EXAMPLE
    Update-CVMissedSLA -ClientName carbonwincs1 -EmailAddr admin@testlab.commvault.com

.EXAMPLE
    Update-CVMissedSLA -ClientId 57

.EXAMPLE
    Get-CVClient | Update-CVMissedSLA

.OUTPUTS
    Outputs [PSCustomObject] for each subclient with missed SLA, containing job submission result.

.NOTES
    Author: Gary Stoops
    Company: Commvault
#>
    [Alias('Protect-CVMissedSLA')]
    [CmdletBinding(DefaultParameterSetName = 'Default')]
    param(
        [Parameter(Mandatory = $False, ParameterSetName = 'ByName')]
        [ValidateNotNullorEmpty()]
        [String] $ClientName,

        [Parameter(Mandatory = $False, ParameterSetName = 'ById')]
        [ValidateNotNullorEmpty()]
        [Int32] $ClientId,

        [Parameter(Mandatory = $False, ParameterSetName = 'ByObject', ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [System.Object] $ClientObject,

        [Parameter(Mandatory = $False)]
        [ValidateNotNullorEmpty()]
        [String] $EmailAddr,

        [Parameter (Mandatory = $False)] 
        [Int32] $Type = 1,

        [Parameter (Mandatory = $False)] 
        [Int32] $Category = 2,

        [Parameter (Mandatory = $False)] 
        [Int32] $Status = 2
    )
 
    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
            $endpointSave = $sessionObj.requestProps.endpoint
        }
        catch {
            throw $_
        }
    }

    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"

        try {
            $sessionObj.requestProps.endpoint = $endpointSave

            if ($PSCmdlet.ParameterSetName -eq 'ByName') {
                $clientObj = Get-CVClient -Name $ClientName
                if ($null -ne $clientObj) { 
                    $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{clientId}', $clientObj.clientId)
                }
                else {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): client not found having name [$ClientName]"      
                    return
                }
            }
            elseif ($PSCmdlet.ParameterSetName -eq 'ById') {
                $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{clientId}', $ClientId)
            }
            elseif ($PSCmdlet.ParameterSetName -eq 'ByObject') {
                $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{clientId}', $ClientObject.clientId)
                $ClientName = $ClientObject.clientName
            }
            
            #noop here if already replaced
            $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{clientId}', $null)

            $slaFlags = @{ }
            $slaFlags.Add('pageSize', 20),
            $slaFlags.Add('type', $Type)
            $slaFlags.Add('category', $Category)
            $slaFlags.Add('status', $Status)

            $body = (PrepareSLABodyJson $slaFlags).body

            $headerObj = Get-CVRESTHeader $sessionObj
            $payload = @{ }
            $payload.Add('headerObject', $headerObj)
            $payload.Add('body', $body)
            $validate = 'failedSubclientList'
            
            $response = Submit-CVRESTRequest $payload $validate
            
            if ($response.IsValid) {
                $uniqueSubclients = @{ }
                foreach ($row in $response.Content.failedSubclientList) {
                    if (-not ($uniqueSubclients.ContainsKey($row.appId))) {
                        $null = $uniqueSubclients.Add($row.appId, $row)
                        $str = $row | Out-String
                        Write-Host $str -ForegroundColor red                    }
                }

                #Submit the jobs for each of the subclient which has failed object to protect
                foreach ($key in $uniqueSubclients.Keys) {
                    Write-Output (Backup-CVSubclient -SubclientId $uniqueSubclients[$key].appId)
                }
            }
            else {
                Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): no failed subclients found"      
            }
        }
        catch { #GRSHACK: web service invoke request is throwing exception in SP16 when subclient is excluded or does not have an assigned storage policy
            if ($_.Exception.Message -eq 'The remote server returned an error: (500) Internal Server Error.') {
                Write-Error -Message "$($MyInvocation.MyCommand): $($_.Exception.Message)"      
            }
            else {
                throw $_
            }
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"
    }
}


function Backup-CVSubclient {
<#
.SYNOPSIS
    Create backup task for specific subclient.

.DESCRIPTION
    Create backup task for specific subclient.

.PARAMETER Name
    Create backup task for subclient identified by Name.

.PARAMETER ClientName
    Provide ClientName for subclient lookup.
    
.PARAMETER Id
    Create backup task for subclient identified by Id.
    
.PARAMETER SubclientObject
    Create backup task for subclient identified by SubclientObject.

.PARAMETER BackupType
    The BackupType: full, incremental (default), differential, synthFull.

.PARAMETER Force
    Switch to Force override of default 'WhatIf' confirmation behavior.

.EXAMPLE
    Backup-CVSubclient

.EXAMPLE
    Backup-CVSubclient -Name AuditDB -ClientName carbonwincs1

.EXAMPLE
    Backup-CVSubclient -Id 7
    
.EXAMPLE
    Backup-CVSubclient -Id 7 -BackupType Full
    
.EXAMPLE
    Get-CVSubclient -ClientName carbonwincs1 | Backup-CVSubclient (initiates backup of all subclients of ClientName)

.OUTPUTS
    Outputs [PSCustomObject] containing job submission result.

.NOTES
    Author: Gary Stoops
    Company: Commvault
#>
    [Alias('Protect-CVSubclient')]
    [CmdletBinding(DefaultParameterSetName = 'ByName', SupportsShouldProcess = $True, ConfirmImpact = 'Low')]
    [OutputType([String])]
    param(
        [Parameter(Mandatory = $True, ParameterSetName = 'ByName')]
        [ValidateNotNullorEmpty()]
        [String] $Name,

        [Parameter(Mandatory = $True, ParameterSetName = 'ByName')]
        [Parameter(Mandatory = $True, ParameterSetName = 'ById')]
        [ValidateNotNullorEmpty()]
        [String] $ClientName,

        [Alias('SubclientId')]
        [Parameter(Mandatory = $True, ParameterSetName = 'ById')]
        [ValidateNotNullorEmpty()]
        [Int32] $Id,

        [Parameter(Mandatory = $True, ParameterSetName = 'ByObject', ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [System.Object] $SubclientObject,

        [Parameter(Mandatory = $False)]
        [ValidateNotNullorEmpty()]
        [CVBackupType] $BackupType = 'Incremental',

        [Switch] $Force
    )

    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
            $endpointSave = $sessionObj.requestProps.endpoint
        }
        catch {
            throw $_
        }
    }

    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"

        try {
            $sessionObj.requestProps.endpoint = $endpointSave
            $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{backupType}', $BackupType)

            if ($BackupType -eq 'Synthetic_Full') {
                $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint + '&runIncrementalBackup=True&incrementalLevel=AFTER_SYNTH'
            }

            if ($PSCmdlet.ParameterSetName -eq 'ByName') {
                $subclientObj = Get-CVSubclient -Name $Name -ClientName $ClientName
                if ($null -ne $subclientObj) { 
                    $SubclientObject = $subclientObj
                }
                else {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): subclient not found having name [$Name] for client [$ClientName]"      
                    return
                }
            }
            elseif ($PSCmdlet.ParameterSetName -eq 'ById') {
                $subclientObj = Get-CVSubclient -Id $Id -ClientName $ClientName
                if ($null -ne $subclientObj) { 
                    $SubclientObject = $subclientObj
                }
                else {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): subclient not found having id [$Id] for client [$ClientName]"      
                    return
                }
            }
            
            $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{subclientId}', $SubclientObject.subclientId)

            $headerObj = Get-CVRESTHeader $sessionObj
            $body = ''
            $payload = @{ }
            $payload.Add('headerObject', $headerObj)
            $payload.Add('body', $body)
            $validate = 'taskId'
            
            if ($Force -or $PSCmdlet.ShouldProcess($SubclientObject.subclientName)) {
                $response = Submit-CVRESTRequest $payload $validate
            }
            else {
                $response = Submit-CVRESTRequest $payload $validate -DryRun
            }

            if ($response.IsValid) {
                Write-Output $response.Content
            }
            else {
                Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): backup request declined for subclient [$($SubclientObject.subclientName)]"      
            }
        }
        catch {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"
    }
}


function Backup-CVDisasterRecovery {
<#
.SYNOPSIS
    Initiates the CommServe disaster recovery (DR) backup.

.DESCRIPTION
    Initiates the CommServe disaster recovery (DR) backup.

.PARAMETER Force
    Switch to Force override of default 'WhatIf' confirmation behavior.

.EXAMPLE
    Backup-CVDisasterRecovery
    
.OUTPUTS
    Outputs [PSCustomObject] containing job submission result.

.NOTES
    Author: Gary Stoops
    Company: Commvault
#>
    [Alias('Start-CVDRBackup')]
    [CmdletBinding(SupportsShouldProcess = $True, ConfirmImpact = 'Low')]
    [OutputType([PSCustomObject])]
    param(
        [Switch] $Force
    )
    
    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
        }
        catch {
            throw $_
        }
    }

    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"

        try {
            $headerObj = Get-CVRESTHeader $sessionObj
            $body = (PrepareDRBackupBodyJson).body
            $payload = @{ }
            $payload.Add('headerObject', $headerObj)
            $payload.Add('body', $body)
            $validate = 'taskId'
            
            if ($Force -or $PSCmdlet.ShouldProcess('DR backup?')) {
                $response = Submit-CVRESTRequest $payload $validate
            }
            else {
                $response = Submit-CVRESTRequest $payload $validate -DryRun
            }

            if ($response.IsValid) {
                Write-Output $response.Content
            }
            else {
                Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): CommServe DR backup request declined"      
            }
        }
        catch {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"
    }
}


function Send-CVLogFile {
<#
.SYNOPSIS
    Create Send Log Files task for client or specific job.

.DESCRIPTION
    Create Send Log Files task for client or specific job.

.PARAMETER JobId
    Create Send Log Files task for job identified by JobId.

.PARAMETER ClientName
    Create Send Log Files task for client identified by ClientName.
    
.PARAMETER EmailAddr
    Specify EmailAddr for notification purpose.

.PARAMETER Force
    Switch to Force override of default 'WhatIf' confirmation behavior.

.EXAMPLE
    Send-CVLogFile

.EXAMPLE
    Send-CVLogFile -ClientName carbonwincs1

.EXAMPLE
    Send-CVLogFile -JobId 175 -EmailAddr admin@testlab.commvault.com

.OUTPUTS
    Outputs [PSCustomObject] containing job submission result.

.NOTES
    Author: Gary Stoops
    Company: Commvault
#>
    [Alias('Start-CVSendLogFiles')]
    [CmdletBinding(DefaultParameterSetName = 'ById', SupportsShouldProcess = $True, ConfirmImpact = 'High')]
    [OutputType([String])]
    param(
        [Parameter(Mandatory = $True, ParameterSetName = 'ById')]   
        [ValidateRange(1, [Int32]::MaxValue)]
        [Int32] $JobId,

        [Parameter(Mandatory = $True, ParameterSetName = 'ByName')]   
        [ValidateNotNullorEmpty()]
        [String] $ClientName,

        [Parameter(Mandatory = $False)]   
        [ValidateNotNullorEmpty()]
        [String] $EmailAddr,

        [Switch] $Force
    )
    
    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
        }
        catch {
            throw $_
        }
    }

    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"

        try {
            if ($PSCmdlet.ParameterSetName -eq 'ById') {
                $job = Get-CVJobDetail -JobId $JobId
                if ($null -eq $job) {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): invalid job id [$JobId]"
                    return
                }
                $emailSubject = 'Logs for job ' + $JobId
            }
            elseif ($PSCmdlet.ParameterSetName -eq 'ByName') {
                $clientObj = Get-CVClient -Name $ClientName
                if ($null -eq $clientObj) {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): client not found having name [$ClientName]"
                    return
                }
                $emailSubject = 'Logs for client ' + $ClientName
            }

            $prepInputs = @{ }

            if ($PSCmdlet.ParameterSetName -eq 'ById') { 
                $prepInputs.Add('JobId', $JobId) 
            }
            elseif ($PSCmdlet.ParameterSetName -eq 'ByName') {
                $prepInputs.Add('ClientName', $ClientName)

            }

            $prepInputs.Add('emailSubject', $emailSubject) # default email to: support@commvault.com

            if (-not [String]::IsNullOrEmpty($EmailAddr)) {
                $prepInputs.Add('EmailId', $EmailAddr)
            }
            
            $body = (PrepareSendLogFilesBodyJson $prepInputs).body

            $headerObj = Get-CVRESTHeader $sessionObj
            $payload = @{ }
            $payload.Add('headerObject', $headerObj)
            $payload.Add('body', $body)
            $validate = 'taskId'

            if ($Force -or $PSCmdlet.ShouldProcess('send log files?')) {
                $response = Submit-CVRESTRequest $payload $validate
            }
            else {
                $response = Submit-CVRESTRequest $payload $validate -DryRun
            }

            if ($response.IsValid) {
                Write-Output $response.Content
            }
            else {
                Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): send log files request declined"      
            }
        }
        catch {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"
    }
}
    
    
function PrepareDRBackupBodyJson {

    try {
        $drObj = @{}
        $drObj.Add('isCompressionEnabled', $False)
        $drObj.Add('jobType', 1)
        $drObj.Add('backupType', 1)
        $body = $drObj | ConvertTo-Json -Depth 10
        Write-Output @{ 'body' = $body }
    }
    catch {
        throw $_
    }
}


<# Sample JSON request
{
    "countScheduledJobs":0,"pageSize":20,"type":1,"countFullJobsOnly":0,"days":0,"category":4,"status":2,"localeId":{
    "country":"US","language":"en","localeName":"en-us"
    }
}

OR
{
    "type":1,"countFullJobsOnly":0,"days":0,"category":4,"status":2
}

//=== SLA Report ===//

enum SLA_Type
{
    ByClient        = 1,
    ByAgentType     = 2
}

enum SLA_Status
{
    Any             = 0,
    Protected       = 1,
    Unprotected     = 2,
    Excluded        = 3
}

enum SLA_Category
{
    Any             = 0,
    // Protected
    Protected       = 1,
    // Unprotected
    Failed          = 2,
    NoJobFound      = 3,
    NoSchedule      = 4,
    SnapNoBackupCopy= 12,
    // Excluded
    BackupActivityDisabled = 5,
    LongtimeOffline = 6,
    Deconfigured    = 7,
    ExcludedFromSLAProperty = 8,
    DoNotBackupVM   = 9,
    RecentlyInstalledNoJob = 10,
    ExcludedServerType = 11

}
#>
function PrepareSLABodyJson ($payload) {

    try {
        $mapSLA = [ordered]@{ }
        $mapSLA.Add("type", $payload.type)
        $mapSLA.Add("category", $payload.category)
        $mapSLA.Add("status", $payload.status)
        $body = $mapSLA | ConvertTo-Json -Depth 10
        Write-Output @{ 'body' = $body }
    }
    catch {
        throw $_
    }
}


#Sample JSON request for submitting job
<#
{
    "taskInfo":{
        "associations":[
            {
                "subclientId":83,
                "applicationId":33,
                "clientName":"VSASTACK01",
                "backupsetId":52,
                "instanceId":1,
                "subclientGUID":"4485258A-ECCB-40DB-A033-187728F14477",
                "clientId":698,
                "subclientName":"default",
                "backupsetName":"TEST",
                "instanceName":"DefaultInstanceName",
                "_type_":7,
                "appName":"File System",
                "flags":{

                }
            }
        ],
        "task":{
            "taskType":1
        },
        "subTasks":[
            {
                "subTask":{
                "subTaskType":2,
                "operationType":2
                },
                "options":{
                "backupOpts":{
                    "backupLevel":2
                }
                }
            }
        ]
    }
}
#>
function PrepareSubclientBackupBodyJson ($JobObj) {
    try {
        $createTaskReq = [ordered] @{ }
        $taskInfo = [ordered] @{ }

        [System.Collections.ArrayList] $associations_arr = @()
        $associatMap = [ordered] @{ }
        $associatMap.Add("subclientId", $JobObj.SubclientId)
        $associatMap.Add("clientName", $JobObj.SubclientObj.clientName)
        $associatMap.Add("backupsetId", $JobObj.SubclientObj.backupsetId)
        $associatMap.Add("instanceId", $JobObj.SubclientObj.instanceId)
        $associatMap.Add("subclientGUID", $JobObj.SubclientObj.subclientGUID)
        $associatMap.Add("clientId", $JobObj.ClientId)
        $associatMap.Add("subclientName", $JobObj.SubclientName)
        $associatMap.Add("backupsetName", $JobObj.SubclientObj.backupsetName)
        $associatMap.Add("instanceName", $JobObj.SubclientObj.instanceName)
        $associatMap.Add("_type_", $JobObj.SubclientObj._type_)
        $associatMap.Add("appName", $JobObj.SubclientObj.appName)
        $flags = [ordered] @{ }
        $associatMap.Add("flags", $flags)
        $null = $associations_arr.Add($associatMap)

        $task = @{ }
        $task.Add("taskType", $JobObj.taskType)

        [System.Collections.ArrayList] $subTasks_arr = @()
        $subTasksMap = @{ }
        $subTask = @{ }
        $subTask.Add("subTaskType", $JobObj.subTaskType)
        $subTask.Add("operationType", $JobObj.operationType)
        $options = @{ }
        $backupOpts = @{ }
        $backupOpts.Add("backupLevel", $JobObj.Jobtype)
        $options.Add("backupOpts", $backupOpts)
        $subTasksMap.Add("subTask", $subTask)
        $subTasksMap.Add("options", $options)
        $null = $subTasks_arr.Add($subTasksMap)

        $taskInfo.Add("associations", $associations_arr)
        $taskInfo.Add("task", $task)
        $taskInfo.Add("subTasks", $subTasks_arr)

        $createTaskReq.Add("taskInfo", $taskInfo)
        $body = $createTaskReq | ConvertTo-Json -Depth 10
        Write-Output @{ 'body' = $body }
    }
    catch {
        throw $_
    }
}


<# JSON request sample for SendLogFiles
    {  
   "taskInfo":{  
      "task":{  
         "taskType":1,
         "initiatedFrom":1,
         "policyType":0,
         "taskFlags":{  
            "disabled":false
         }
      },
      "subTasks":[  
         {  
            "subTask":{  
               "subTaskType":1,
               "operationType":5010
            },
            "options":{  
               "adminOpts":{  
                  "selectiveDeleteOption":{  

                  },
                  "sendLogFilesOption":{  
                     "actionLogsEndJobId":0,
                     "emailSelected":true,
                     "emailDescription":"",
                     "jobid":0,
                     "galaxyLogs":true,
                     "getLatestUpdates":false,
                     "actionLogsStartJobId":0,
                     "saveToLogDir":"",
                     "computersSelected":true,
                     "csDatabase":false,
                     "crashDump":true,
                     "isNetworkPath":false,
                     "saveToFolderSelected":false,
                     "notifyMe":true,
                     "includeJobResults":false,
                     "doNotIncludeLogs":true,
                     "machineInformation":true,
                     "emailSubject":"CommCell ID fe8c2 Logs for machines: PRODDEDUPE1 ",
                     "osLogs":true,
                     "actionLogs":false,
                     "includeIndex":false,
                     "databaseLogs":false,
                     "logFragments":false,
                     "uploadLogsSelected":true,
                     "useDefaultUploadOption":true,
                     "impersonateUser":{  
                        "useImpersonation":false
                     },
                     "emailids":[  
                        "support@commvault.com"
                     ],
                     "clients":[  
                        {  
                           "hostName":"172.24.40.62",
                           "clientId":5,
                           "clientName":"PRODDEDUPE1",
                           "displayName":"PRODDEDUPE1",
                           "clientGUID":"DF78C464-1BF9-4493-AC41-D0B752507B29"
                        }
                     ]
                  }
               }
            }
         }
      ]
   }
}
#>
function PrepareSendLogFilesBodyJson ($PrepInputs) {
    try {
        $createTaskReq = [ordered] @{ }

        #taskInfo
        $taskInfo = [ordered]@{ }
        $task = [ordered]@{ }
        $owner = $global:CVConnectionPool.user
        $task.Add("policyType", 0)
        $task.Add("taskType", 1)
        $task.Add("initiatedFrom", 1)
        $task.Add("ownerName", $owner)
        $taskFlags = [ordered] @{ }
        $taskFlags.Add("disabled", $False)
        $task.Add("taskFlags", $taskFlags) 
        $taskInfo.Add("task", $task)

        #subtasks
        [System.Collections.ArrayList] $subTasks_arr = @()
        $subTasks_map = [ordered]@{ }
        $subTask = [ordered]@{ }
        $subTask.Add("subTaskType", 1)
        $subTask.Add("operationType", 5010)
        $subTasks_map.Add("subTask", $subTask)

        #options
        $options = [ordered]@{ }
        $adminopts = [ordered]@{ }
        $selectiveDeleteOption = [ordered] @{ }
        $adminopts.Add("selectiveDeleteOption", $selectiveDeleteOption)
        $sendLogFilesOption = [ordered]@{ }
        $sendLogFilesOption.Add("actionLogsEndJobId", 0)
        $sendLogFilesOption.Add("emailSelected", $True)
        $sendLogFilesOption.Add("emailDescription", "")
        if ($PrepInputs.ContainsKey("emailSubject")) {
            $sendLogFilesOption.Add("emailSubject", $PrepInputs['emailSubject'])
        }
        if ($PrepInputs.ContainsKey("JobId")) {
            $iJobId = [int] $PrepInputs.JobId
            $sendLogFilesOption.Add("jobid", $iJobId)
        }
        $sendLogFilesOption.Add("galaxyLogs", $True)
        $sendLogFilesOption.Add("getLatestUpdates", $False)
        $sendLogFilesOption.Add("actionLogsStartJobId", 0)
        $sendLogFilesOption.Add("saveToLogDir", "")
        $sendLogFilesOption.Add("computersSelected", $True)
        $sendLogFilesOption.Add("csDatabase", $False)
        $sendLogFilesOption.Add("crashDump", $True)
        $sendLogFilesOption.Add("isNetworkPath", $False)
        $sendLogFilesOption.Add("saveToFolderSelected", $False)
        $sendLogFilesOption.Add("notifyMe", $True)
        $sendLogFilesOption.Add("includeJobResults", $False)
        $sendLogFilesOption.Add("doNotIncludeLogs", $True)
        $sendLogFilesOption.Add("machineInformation", $True)
        $sendLogFilesOption.Add("osLogs", $True)
        $sendLogFilesOption.Add("actionLogs", $False)
        $sendLogFilesOption.Add("includeIndex", $False)
        $sendLogFilesOption.Add("databaseLogs", $False)
        $sendLogFilesOption.Add("logFragments", $False)
        $sendLogFilesOption.Add("uploadLogsSelected", $True)
        $sendLogFilesOption.Add("useDefaultUploadOption", $True)

        $impersonateUser = [ordered]@{ }
        $impersonateUser.Add("useImpersonation", $False)
        $sendLogFilesOption.Add("impersonateUser", $impersonateUser)

        [System.Collections.ArrayList] $emailids_arr = @()
        
        $null = $emailids_arr.Add('support@commvault.com') # default email id to Commvault support
        if ($PrepInputs.ContainsKey("EmailId")) {
            $null = $emailids_arr.Add($PrepInputs['EmailId'])
        }
        $sendLogFilesOption.Add("emailids", $emailids_arr)
        
        if ($PrepInputs.ContainsKey("JobId")) {
            [System.Collections.ArrayList] $multiJobIds_arr = @()
            $iJobId = [int] $PrepInputs.JobId
            $null = $multiJobIds_arr.Add($iJobId)     
            $sendLogFilesOption.Add("multiJobIds", $multiJobIds_arr)
        }
        else {
            [System.Collections.ArrayList] $clients_arr = @()
            if ($PrepInputs.ContainsKey("ClientName")) {
                $clientMap = [ordered] @{ }
                $clientProp = Get-CVClient -Client $PrepInputs['ClientName']

                $clientMap.Add("hostName", $clientProp.clienthostName)
                $clientMap.Add("clientId", $clientProp.clientId)
                $clientMap.Add("clientName", $clientProp.clientName)
                $clientMap.Add("displayName", $clientProp.clientName)
                $clientMap.Add("clientGUID", $clientProp.clientIdGUID)
            }
            $null = $clients_arr.Add($clientMap)
            $sendLogFilesOption.Add("clients", $clients_arr)
        }

        $adminopts.Add("sendLogFilesOption", $sendLogFilesOption)
        $options.Add("adminOpts", $adminopts)

        $subTasks_map.Add("options", $options)
        $null = $subTasks_arr.Add($subTasks_map)
        
        $taskInfo.Add("subTasks", $subTasks_arr)

        $createTaskReq.Add("taskInfo", $taskInfo)
        $body = $createTaskReq | ConvertTo-Json -Depth 10
        Write-Output @{ 'body' = $body }
    }
    catch {
        throw $_
    }
}
