#
# Module 'Commvault.RESTSession'
#
# Generated by: Commvault
#
# Generated on: 5/22/2019
#

using namespace System.Management.Automation;
using module 'Commvault.TypeDefinitions'

Set-StrictMode -Version latest


function Connect-CVServer {
<#
.SYNOPSIS
    Method to get CommServe authorization token.

.DESCRIPTION
    Method to get CommServe authorization token.

.PARAMETER Server
    The CommServe to connect to.

.PARAMETER Port
    Optional port specification if non-default has been configured (default: 81) 

.PARAMETER User
    User name for login.

.PARAMETER Password
    Secure password for login.

.PARAMETER Credential
    Powershell credential object. Used as alternative to -User <user> -Password <password>

.EXAMPLE
    Connect-CVServer -Server <CVWebserver name> -User <admin>

.EXAMPLE
    Connect-CVServer -Server <CVWebserver name> -User <admin> -Password (ConvertTo-SecureString 'password' -AsPlainText -Force)

.EXAMPLE
    Connect-CVServer -Server <CVWebserver name> -User <admin> -Password (ConvertTo-SecureString 'password' -AsPlainText -Force) -Port [port]

.EXAMPLE
    $Credential= New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList 'admin',('plainTextPassword' | ConvertTo-SecureString -AsPlainText -Force)
    Connect-CVServer -Credential $Credential -Server <CVWebserver name>

.OUTPUTS
    Outputs <String> indicating success or failure of login attempt.

.NOTES
    Author: Gary Stoops
    Company: Commvault
#>
    [CmdletBinding(DefaultParameterSetName = 'Default')]
    Param (
        [Parameter(Mandatory = $True)]
        [ValidateNotNullorEmpty()]
        [String] $Server,
    
        [Parameter(Mandatory = $False)]
        [ValidateNotNullorEmpty()]
        [String] $Port = $REST_DEFAULT_PORT,

        [Parameter(Mandatory = $False, ParameterSetName = 'Default')]
        [ValidateNotNullorEmpty()]
        [String] $User,

        [Parameter(Mandatory = $False, ParameterSetName = 'Default')]
        [SecureString] ${Password},

        [Alias('PSCreds')]
        [Parameter(ParameterSetName = 'PSCredential')]
        [ValidateNotNull()]
        [PSCredential]
        [Credential()]
        $Credential = [PSCredential]::Empty        
    )
    
    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            if ($Credential -ne [PSCredential]::Empty) {
                Write-Debug -Message "$($MyInvocation.MyCommand): extracting password from PSCredential object"
                $User = $Credential.UserName
                $Password = $Credential.Password
            }
            
            if ([String]::IsNullOrEmpty($User)) {
                $User = Read-Host 'User'
                if ($User.Length -eq 0) {
                    $errorRecord = New-Object ErrorRecord (
                        (New-Object Exception $CVPS_ERROR_ID.1000),
                        'CVPS_ERROR_ID.1000',
                        [ErrorCategory]::OperationStopped,
                        $User
                      )
                      throw $errorRecord
                }
            }
            
            if ($null -eq $Password -or $Password.Length -eq 0) {
                $Password = Read-Host 'Password' -AsSecureString
                if ($Password.Length -eq 0) {
                    $errorRecord = New-Object ErrorRecord (
                        (New-Object Exception $CVPS_ERROR_ID.1001),
                        'CVPS_ERROR_ID.1001',
                        [ErrorCategory]::OperationStopped,
                        $Password
                      )
                      throw $errorRecord
                }
            }
        }
        catch {
            $PSCmdlet.ThrowTerminatingError($_) 
        }
    }
        
    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"

        try {
            $response = (GetSessionToken $Server $User $Password $Port)

            if ($response.IsValid) {
                Write-Verbose $response.Content
                $global:CVConnectionPool = @{
                    server = $Server
                    token  = $response.Content.token
                    user   = $User
                    port   = $Port
                }
        
                $global:CVConnectionPool.GetEnumerator() | Where-Object -FilterScript {
                    $_.name -notmatch 'token' | Out-Null
                }
            }
            else {
                if (HasProperty $response 'Content') {
                    Write-Host $response.Content
                    if (HasProperty $response.Content 'errList') {
                        Write-Host $response.Content.errList[0]
                    }
                }
            }
        }
        catch {
            $PSCmdlet.ThrowTerminatingError($_) 
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"
    }
}
    

function Disconnect-CVServer {
<#
.SYNOPSIS
    Method to release CommServe session authorization token.

.DESCRIPTION
    Method to release CommServe session authorization token.

.EXAMPLE
    Disconnect-CVServer

.EXAMPLE
    Disconnect-CVServer -Verbose

.OUTPUTS
    If -Verbose switch used, outputs <String> response returned from webservice logout request.

.NOTES
    Author: Gary Stoops
    Company: Commvault
#>
    [CmdletBinding()]
    [OutputType([String])]
    Param ()
    
    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"
        try {
            $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
        }
        catch {
            throw $_
        }
    }
        
    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"

        try {
            $headerObj = Get-CVRESTHeader $sessionObj
            $body = ''
            $payload = @{ }
            $payload.Add('headerObject', $headerObj)
            $payload.Add('body', $body)
            $validate = 'User logged out'

            $response = Submit-CVRESTRequest $payload $validate

            if ($response.IsValid) {
                Write-Verbose $response.Content
            }
        }
        catch {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"
    }
}


function Get-CVSessionDetail {
    [Alias('Get-CVSessionDetails')]
    [CmdletBinding()]
    [OutputType([HashTable])]
    param([String] $MethodName)

    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            $output = @{ }
        }
        catch {
            throw $_
        }
    }

    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"

        try {
            if (-not(Get-Variable -Name CVConnectionPool -Scope Global -ErrorAction SilentlyContinue)) {
                $errorRecord = New-Object ErrorRecord (
                    (New-Object Exception $CVPS_ERROR_ID.1002),
                    'CVPS_ERROR_ID.1002',
                    [ErrorCategory]::OperationStopped,
                    $null
                )
                throw $errorRecord
            }

            $sessionToken = $global:CVConnectionPool.token
            $requestProps = (GetAPIDetail -request $MethodName)
            $output.Add('sessionToken', $sessionToken)
            $output.Add('requestProps', $requestProps)
            $output.Add('server', $global:CVConnectionPool.server)
            $output.Add('port', $global:CVConnectionPool.port)
            $output.Add('user', $global:CVConnectionPool.user)
        }
        catch {
            $PSCmdlet.ThrowTerminatingError($_) 
        }
        finally {
            Write-Output $output
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"
    }
}


#Method takes session object and returns the filled header
function Get-CVRESTHeader {
    [CmdletBinding()]
    [OutputType([HashTable])]
    param ([HashTable] $SessionObject, [String] $PagingInfo)

    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            $output = @{ }
        }
        catch {
            throw $_
        }
    }

    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"

        try {
            if ($null -eq $PagingInfo -or $PagingInfo.Length -eq 0) { # TR - 190508-795
                if ($SessionObject.requestProps.ContainsKey('ContentType')) {
                    $output.Add("header", @{Accept = $SessionObject.requestProps.ContentType; Authtoken = $SessionObject.sessionToken })
                }
                else {
                    $output.Add("header", @{Accept = 'application/json'; Authtoken = $SessionObject.sessionToken })
                }
            }
            else {
                $output.Add("header", @{Accept = 'application/json'; Authtoken = $SessionObject.sessionToken; pagingInfo = $PagingInfo })
            }

            if ($SessionObject.requestProps.ContainsKey('ContentType')) {
                $output.Add("ContentType", $SessionObject.requestProps.ContentType)
            }

            $output.Add("method", $SessionObject.requestProps.method)
            $output.Add("endpoint", $SessionObject.requestProps.endpoint)
                
            $baseUrl = (PrepareBaseUrl $global:CVConnectionPool.server $global:CVConnectionPool.port)
            $output.Add("baseUrl", $baseUrl)
        }
        catch {
            throw $_
        }
        finally {
            Write-Output $output
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"
    }
}


function Submit-CVRESTRequest {
    [CmdletBinding()]
    [OutputType([PSCustomObject])]
    param (
        [Parameter(Mandatory = $True)]
        [ValidateNotNullorEmpty()]
        [HashTable] $Payload,

        [Parameter(Mandatory = $False)]
        [String] $ValidateProperty,

        [Switch] $DryRun
    )

    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            [PSCustomObject] $output = New-Object PSObject
            $output | Add-Member -NotePropertyName 'IsValid' -NotePropertyValue ([String]::IsNullOrEmpty($ValidateProperty))
        }
        catch {
            throw $_
        }
    }

    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"

        try {
            $Payload.headerObject.header.GetEnumerator() | Foreach-Object { 
                if ($_.Key -eq 'Authtoken') {
                    Write-Debug -Message "$($MyInvocation.MyCommand): header: $($_.Key): QSDK..." 
                }
                else {
                    Write-Debug -Message "$($MyInvocation.MyCommand): header: $($_.Key): $($_.Value)" 
                }
            }    

            if ($DryRun) {
                if ($Payload.body.Length -gt 0) { Write-Host "$($MyInvocation.MyCommand): body:`n $($Payload.body)" }
                else { Write-Host "$($MyInvocation.MyCommand): body: $($Payload.body)" }
                Write-Host "$($MyInvocation.MyCommand): baseUrl: $($Payload.headerObject.baseUrl)"      
                Write-Host "$($MyInvocation.MyCommand): endpoint: $($Payload.headerObject.endpoint)"      
                Write-Host "$($MyInvocation.MyCommand): method: $($Payload.headerObject.method)"      
            }
            else {
                if ($Payload.body.Length -gt 0) { Write-Debug -Message "$($MyInvocation.MyCommand): body:`n $($Payload.body)" }
                else { Write-Debug -Message "$($MyInvocation.MyCommand): body: $($Payload.body)" }
                Write-Debug -Message "$($MyInvocation.MyCommand): baseUrl: $($Payload.headerObject.baseUrl)"      
                Write-Debug -Message "$($MyInvocation.MyCommand): endpoint: $($Payload.headerObject.endpoint)"      
                Write-Debug -Message "$($MyInvocation.MyCommand): method: $($Payload.headerObject.method)" 
                if (-not $Payload.headerObject.ContainsKey('ContentType')) {
                    $response = (ProcessRequest $Payload.headerObject.header $Payload.body $Payload.headerObject.baseUrl $Payload.headerObject.endpoint $Payload.headerObject.method)
                }
                else {
                    $response = (ProcessRequest $Payload.headerObject.header $Payload.body $Payload.headerObject.baseUrl $Payload.headerObject.endpoint $Payload.headerObject.method $Payload.headerObject.ContentType)
                }
                ValidateResponse $response $output $ValidateProperty
            }
        }
        catch {
            throw $_
        }
        finally {
            Write-Output $output
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"
    }
}


function ValidateResponse ([HashTable] $Response, [PSCustomObject] $Output, [String] $ValidateProperty) {
    
    try {
        if ($Response.Status -eq 200 -and $null -ne $Response.Body) {
            try {
                $Output | Add-Member -NotePropertyName 'Content' -NotePropertyValue ($Response.Body | ConvertFrom-Json)
                if (-not $Output.IsValid -and -not[String]::IsNullOrEmpty($ValidateProperty)) {
                    $Output.IsValid = ($ValidateProperty -in $Output.Content.PSobject.Properties.Name)
                }
            }
            catch {
                if ($_.Exception.Message.Contains('Invalid JSON primitive: ')) { # Xml or plain text response body
                    $Output | Add-Member -NotePropertyName 'Content' -NotePropertyValue $Response.Body.Content
                    if (-not $Output.IsValid -and -not[String]::IsNullOrEmpty($ValidateProperty)) {
                        $Output.IsValid = ($Output.Content.Contains($ValidateProperty))
                    }
                }
            }
        }
        elseif ($Response.Status -eq 202) {
            $errorRecord = New-Object ErrorRecord (
                (New-Object Exception $CVPS_ERROR_ID.202),
                'CVPS_ERROR_ID.202',
                [ErrorCategory]::OperationStopped,
                $Response
            )
            throw $errorRecord
        }
        else {
            $errorMessage =  "`nStatus: $($Response.Status)"
            $errorMessage += "`nMessage: $($Response.Message)"
            $errorMessage += "`nErrorMessage: $($Response.ErrorMessage)"
            $errorMessage += "`nRecommendedAction: $($Response.RecommendedAction)"
            Write-Error -Message $errorMessage
        }
    }
    catch {
        if ($_.FullyQualifiedErrorId -ne 'PropertyNotFoundStrict') {
            throw $_
        }
    }
}


function ConvertFromSecureString ([SecureString] $SecureString) {
    
    try {
        if ($null -ne $SecureString) {
            $BSTR = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($SecureString)
            Write-Output ([System.Runtime.InteropServices.Marshal]::PtrToStringAuto($BSTR))
        }
    }
    catch {
        throw $_
    }
}


function ConvertToBase64String ([String] $PlainText) {
    
    try {
        if ($null -ne $PlainText) {
            Write-Output ([convert]::ToBase64String([Text.Encoding]::UTF8.GetBytes($PlainText)))
        }
    }
    catch {
        throw $_
    }
}


function  PrepareBaseUrl ([String] $Server, [String] $Port) {
    
    try {
        #$prefix =  $REST_AUTH_URL_PREFIX_SECURE
        $prefix = $REST_AUTH_URL_PREFIX
        $url = $prefix + $REST_BASE_URL
        
        #Remove whitespace
        $Server = $Server -split '\s+'
        $Port = $Port -split '\s+'
        Write-Output (($url.Replace("Server", $Server)).Replace("Port", $Port)).Replace(" ", "")
    }
    catch {
        throw $_
    }
}


function GetSessionToken {
    [CmdletBinding()]
    [OutputType([PSCustomObject])]
    param (
        [Parameter(Mandatory = $True)]
        [ValidateNotNullorEmpty()]
        [String] $Server,

        [Parameter(Mandatory = $True)]
        [ValidateNotNullorEmpty()]
        [String] $User,

        [Parameter(Mandatory = $True)]
        [ValidateNotNullorEmpty()]
        [SecureString] $SecurePassword,

        [Parameter(Mandatory = $False)]
        [String] $Port
    )

    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            $validateProperty = 'token'
            [PSCustomObject] $output = New-Object PSObject
            $output | Add-Member -NotePropertyName 'IsValid' -NotePropertyValue ([String]::IsNullOrEmpty($validateProperty))
        }
        catch {
            throw $_
        }
    }

    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"
        try {
            $method = 'Post'
            $endpoint = 'Login'
            $header = @{Accept = 'application/json'}
            $encodedPassword = ConvertToBase64String(ConvertFromSecureString($SecurePassword))
            $creds = @{ 
                password = $encodedPassword
                username = $User
            }
            $body = (ConvertTo-Json $creds)
            $baseUrl = (PrepareBaseUrl $Server $Port)
            $response = (ProcessRequest $header $body $baseUrl $endpoint $method)
            ValidateResponse $response $output $ValidateProperty
            Write-Output $output
        }
        catch {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"
    }
}

	
function ProcessRequest () {
    
    param (
        [HashTable] $Header, 
        [String] $Body, 
        [String] $BaseUrl, 
        [String] $Endpoint, 
        [String] $Method, 
        [String] $ContentType = 'application/json'
    )

    try {
        $output = @{ }
        $url = "$BaseUrl$Endpoint"

        $output.Add('Status', '')
        $output.Add('Message', '')
        $output.Add('ErrorMessage', '')
        $output.Add('RecommendedAction', '')
        $output.Add('Body', $null)

        if ($Method.ToLower() -eq 'post' -or $Method.ToLower() -eq 'put' -or $Method.ToLower() -eq 'delete') {
            $response = Invoke-WebRequest -Uri $url -Method $Method -Body $Body -Headers $Header -ContentType $ContentType -ErrorAction Stop
        }
        elseif ($Method.ToLower() -eq 'get') {
            $response = Invoke-WebRequest -Uri $url -Headers $Header -ContentType $ContentType -ErrorAction Stop
        }
    
        $output['Status'] = $response.StatusCode

        if ($REST_HTTP_STATUS_CODES.Contains($response.StatusCode)) {
            $output['Body'] = $response
        }
        else {
            $output['Error'] = $response.Message
        }
    }
    catch {
        if (HasProperty $_.Exception 'Status') { $output['Status'] = $_.Exception.Status }
        if (HasProperty $_.Exception 'Message') { $output['Message'] = $_.Exception.Message }
        if ((HasProperty $_ 'ErrorDetails') -and ($null -ne $_.ErrorDetails)) {
            if (HasProperty $_.ErrorDetails 'Message') { $output['ErrorMessage'] = $_.ErrorDetails.Message }
            if (HasProperty $_.ErrorDetails 'RecommendedAction') { $output['RecommendedAction'] = $_.ErrorDetails.RecommendedAction }
        }
    }
    finally {
        Write-Output $output
    }
}


function GetAPIDetail ([String] $Request) {

    try {
        $restapi = @{

            #--------------- Commvault.CommCell ---------------

            'Get-CVVersionInfo' = @{
        
                Description = 'Gets CommServe version'
                Endpoint    = 'CommServ'
                Method      = 'Get'
                Body        = ''
            
            }
        
            'Get-CVAlert' = @{
        
                Description = 'Gets alert list'
                Endpoint    = 'AlertRule'
                Method      = 'Get'
                Body        = ''
            
            }
        
            'Add-CVClient' = @{
        
                Description = 'Add new client'
                Endpoint    = 'CreateTask'
                Method      = 'Post'
                Body        = ''
            
            }
    
            'Get-CVClient' = @{
        
                Description = 'Get client list from CommServe'
                Endpoint    = 'Client'
                Method      = 'Get'
                Body        = ''
            
            }
    
            'GetClientProperties' = @{
        
                Description = 'Get client properties for given client from CommServe'
                Endpoint    = 'Client/{clientId}'
                Method      = 'Get'
                Body        = ''
            
            }
        
            'GetClientAdditionalSettings' = @{
        
                Description = 'Get additional settings for given client from CommServe'
                Endpoint    = 'Client/{clientId}/AdditionalSettings'
                Method      = 'Get'
                Body        = ''
            
            }
        
            'Set-CVClient' = @{
        
                Description = 'Set client properties on CommServe'
                Endpoint    = 'Client/{clientId}'
                Method      = 'Post'
                Body        = ''
            
            }
			'Enable-CVClientActivity' = @{
        
                Description = 'Enable activities on a client on CommServe'
                Endpoint    = 'Client/{clientId}'
                Method      = 'Post'
                Body        = ''
            
            }

            'Disable-CVClientActivity' = @{
        
                Description = 'Disable activities on a client on CommServe'
                Endpoint    = 'Client/{clientId}'
                Method      = 'Post'
                Body        = ''
            
            }
        
            'Get-CVClientLicense' = @{


                Description = 'Get client licenses from CommServe'
                Endpoint    = 'Client/{clientId}/License'
                Method      = 'Get'
                Body        = ''

            }

            'Revoke-CVClientLicense' = @{

                Description = 'Release a license from a client'
                Endpoint    = 'Client/License/Release'
                Method      = 'Post'
                Body        = ''

            }

            'Add-CVClientGroup' = @{
        
                Description = 'Add new client group on CommServe'
                Endpoint    = 'ClientGroup'
                Method      = 'Post'
                Body        = ''
            
            }
        
            'Get-CVClientGroup' = @{
        
                Description = 'Get client group list from CommServe'
                Endpoint    = 'ClientGroup'
                Method      = 'Get'
                Body        = ''
            
            }
    
            'GetClientGroupProperties' = @{
        
                Description = 'Get Client group detail properties from CommServe'
                Endpoint    = 'ClientGroup/{clientGroupId}'
                Method      = 'Get'
                Body        = ''
            
            }
    
            'Set-CVClientGroup' = @{
        
                Description = 'Set client group properties on CommServe'
                Endpoint    = 'ClientGroup/{clientGroupId}'
                Method      = 'Post'
                Body        = ''
            
            }
    
            'Get-CVSubclient' = @{
        
                Description = 'Get subclient list for given clientId from CommServe'
                Endpoint    = 'Subclient?clientId={clientId}&propertyLevel=AllProperties'
                Method      = 'Get'
                Body        = ''
            
            }
        
            'GetSubclientProperties' = @{
        
                Description = 'Get subclient props for given subclient from CommServe'
                Endpoint    = 'Subclient/{subclientId}'
                Method      = 'Get'
                Body        = ''
            
            }
    
            #--------------- Commvault.FileSystem ---------------

            'Search-CVClientFileSystem' = @{
        
                Description = 'Search for protected data at the backup set or subclient level'
                Endpoint    = 'v2/filesystem/{clientId}/browse'
                #Endpoint    = ''
                Method      = 'Get'
                Body        = ''
            }
            
            'Select-CVClientFileSystem' = @{
        
                Description = 'Select the file(s) matching a particular pattern from specified client file system'
                Endpoint    = 'v2/filesystem/client/{clientId}/find?filepattern={filePattern}'
                Method      = 'Get'
                Body        = ''
            }
            
            'Backup-CVClientFileSystem' = @{
        
                Description = 'Submit backup request for specified client file system content'
                Endpoint    = 'v2/filesystem/{clientId}/backup'
                Method      = 'Post'
                Body        = ''
            }
            
            'Restore-CVClientFileSystem' = @{
        
                Description = 'Submit restore/recover request for specified client file system content'
                Endpoint    = 'v2/filesystem/{clientId}/recover'
                Method      = 'Post'
                Body        = ''
            }
            
            'Set-CVSubclientFileSystemContent' = @{
        
                Description = 'Sets the provided content for specified file system subclient'
                Endpoint    = 'v2/filesystem/client/{clientId}/content'
                Method      = 'Post'
                Body        = ''
            }
            
            #--------------- Commvault.JobManager ---------------

            'Get-CVJob' = @{
        
                Description = 'Get the list of all jobs in CommServe'
                Endpoint    = 'Job?completedJobLookupTime={completedJobLookupTime}'
                Method      = 'Get'
                Body        = ''
            }
    
            'GetJobById' = @{
        
                Description = 'Get summary for specific job'
                Endpoint    = 'Job/{jobId}'
                Method      = 'Get'
                Body        = ''
            }
    
            'Get-CVJobDetail' = @{
        
                Description = 'Get job details for JobId'
                Endpoint    = 'JobDetails'
                Method      = 'Post'
                Body        = ''
            
            }
        
            'Stop-CVJob' = @{
        
                Description = 'Kill the specified job'
                Endpoint    = 'Job/{jobId}/action/kill'
                Method      = 'Post'
                Body        = ''
            
            }
    
            'Suspend-CVJob' = @{
        
                Description = 'Suspend the specified job'
                Endpoint    = 'Job/{jobId}/action/pause'
                Method      = 'Post'
                Body        = ''
            
            }
    
            'Resume-CVJob' = @{
        
                Description = 'Resume the specified job'
                Endpoint    = 'Job/{jobId}/action/resume'
                Method      = 'Post'
                Body        = ''
            
            }
        
            'Backup-CVDisasterRecovery' = @{
        
                Description = 'Initiates a CommServe DR backup job'
                Endpoint    = 'CommServ/DRBackup'
                Method      = 'Post'
                Body        = ''
            
            }
    
            'Send-CVLogFile' = @{
        
                Description = 'Creates a task to email job log files'
                Endpoint    = 'CreateTask'
                Method      = 'Post'
                Body        = ''
            }
    
            'Get-CVSLAReport' = @{
        
                Description = 'Gets SLA report for specific client or entire CommCell'
                Endpoint    = 'SLAReport?clientId={clientId}'
                Method      = 'Post'
                Body        = ''
            }
        
            'Update-CVMissedSLA' = @{
        
                Description = 'Initiates backup job for subclients with missed SLA'
                Endpoint    = 'SLAReport?clientId={clientId}'
                Method      = 'Post'
                Body        = ''
            }
    
            'Backup-CVSubclient' = @{
        
                Description = 'Submit subclient backup job'
                Endpoint    = 'Subclient/{subclientId}/action/backup?backupLevel={backupType}'
                Method      = 'Post'
                Body        = ''
            }

            #--------------- Commvault.Policies ---------------

            'Get-CVSchedulePolicy' = @{
        
                Description = 'Get schedule policies'
                Endpoint    = 'SchedulePolicy?subclientId={subclientId}&scheduleType={scheduleType}'
                Method      = 'Get'
                Body        = ''
            }
            
            'GetSchedulePolicyDetails' = @{
        
                Description = 'Get schedule policy details'
                Endpoint    = 'SchedulePolicy/{schedulePolicyId}'
                Method      = 'Get'
                Body        = ''
            }

            'Enable-CVSchedulePolicy' = @{
        
                Description = 'Enable schedule policy'
                Endpoint    = 'Schedules/task/Action/Enable'
                Method      = 'Post'
                Body        = ''
                ContentType = 'text/plain'
            }

            'Disable-CVSchedulePolicy' = @{
        
                Description = 'Disable schedule policy'
                Endpoint    = 'Schedules/task/Action/Disable'
                Method      = 'Post'
                Body        = ''
                ContentType = 'text/plain'
            }

            'Get-CVStoragePolicy' = @{
        
                Description = 'Get storage policies'
                Endpoint    = 'StoragePolicy'
                Method      = 'Get'
                Body        = ''
            }

            'GetStoragePolicyDetail' = @{
        
                Description = 'Get storage policy detail'
                Endpoint    = 'StoragePolicy/{storagePolicyId}'
                #Endpoint    = 'StoragePolicy/{spId}?primaryCopyOnly={primaryCopyOnly}&userId={userId}'
                Method      = 'Get'
                Body        = ''
            }

            'Get-CVBlackoutWindow' = @{
        
                Description = 'Get blackout window list'
                Endpoint    = 'OperationWindow/OpWindowList?commcellId={commcellId}&clientId={clientId}&appTypeId={appTypeId}&instanceId={instanceId}&backupsetId={backupsetId}&subclientId={subclientId}&clientgroupId={clientgroupId}&companyId={companyId}&schedulePolicyId={schedulePolicyId}'
                Method      = 'Get'
                Body        = ''
            }
            
            'GetBlackoutWindowDetail' = @{
        
                Description = 'Get blackout window detail'
                Endpoint    = 'OperationWindow/{ruleId}'
                Method      = 'Get'
                Body        = ''
            }
            
            'Set-CVBlackoutWindow' = @{
        
                Description = 'This operation updates an operation rule'
                Endpoint    = 'OperationWindow'
                Method      = 'Put'
                Body        = ''
            }
            
            'Add-CVBlackoutWindow' = @{
        
                Description = 'This operation creates an operation rule'
                Endpoint    = 'OperationWindow'
                Method      = 'Post'
                Body        = ''
            }
            
            'Remove-CVBlackoutWindow' = @{
        
                Description = 'This operation deletes a blackout rule from the CommServe'
                Endpoint    = 'OperationWindow/{ruleId}'
                Method      = 'Delete'
                Body        = ''
            }

            'Enable-CVIgnoreHigherLevelBlackoutWindowRules' = @{
        
                Description = 'Enable ignore higher-level blackout window rules feature'
                Endpoint    = 'OperationWindow/Ignore/Action/Enable?&clientId={clientId}&appTypeId={appTypeId}&instanceId={instanceId}&backupsetId={backupsetId}&subclientId={subclientId}'
                Method      = 'Put'
                Body        = ''
            }
            
            'Disable-CVIgnoreHigherLevelBlackoutWindowRules' = @{
        
                Description = 'Disable ignore higher-level blackout window rules feature'
                Endpoint    = 'OperationWindow/Ignore/Action/Disable?&clientId={clientId}&appTypeId={appTypeId}&instanceId={instanceId}&backupsetId={backupsetId}&subclientId={subclientId}'
                Method      = 'Put'
                Body        = ''
            }
            
            #--------------- Commvault.RESTSession ---------------

            'Disconnect-CVServer' = @{
        
                Description = 'Releases session authorization token'
                Endpoint    = 'Logout'
                Method      = 'Post'
                Body        = ''
            
            }
        
            #--------------- Commvault.SQLServer ---------------

            'Get-CVSQLClientDetail' = @{
        
                Description = 'Get detail information about SQL clients'
                Endpoint    = 'sql/properties?clientId={clientId}&instanceId={instanceId}'
                Method      = 'Get'
                Body        = ''
            }
    
            'Get-CVSQLClone' = @{
        
                Description = 'Get information about SQL clones'
                Endpoint    = 'sql/clones?client={clientId}&instance={instanceId}'
                #Endpoint    = 'sql/clones?client={clientId}&instance={instanceId}&propertyLevel={propertyLevel}&search_term={searchTerm}&cloneName={cloneName}&sourceInstance={sourceInstance}&destinationInstance={destinationInstance}&sourceDB={sourceDatabase}&sort={sort}&offset={offset}&limit={limit}'
                Method      = 'Get'
                Body        = ''
            }
    
            'Get-CVSQLCloneDetail' = @{
        
                Description = 'Get detail information about a specific SQL clone'
                Endpoint    = 'sql/clone/{cloneId}?propertyLevel={propertyLevel}'
                Method      = 'Get'
                Body        = ''
            }
    
            'Remove-CVSQLClone' = @{
        
                Description = 'Restore SQL database'
                Endpoint    = 'v2/sql/instances/{instanceId}/clone/{cloneId}'
                Method      = 'Delete'
                Body        = ''
            }

            'Get-CVSQLDatabase' = @{
        
                Description = 'Get information about protected SQL databases'
                Endpoint    = 'sql/databases?instance={instanceId}&database={databaseId}&propertyLevel={propertyLevel}&paging={paging}&start={startPage}&max={pageSize}&sla={onlySLA}&sortBy={sortBy}&sortDir={sortDir}&toTime={toTime}&showSysDB={showSysDB}&search_term={searchTerm}&databaseName={databaseName}&instanceName={instanceName}&clientName={clientName}'
                Method      = 'Get'
                Body        = ''
            }
    
            'Get-CVSQLDatabaseDetail' = @{
        
                Description = 'Get detail information about a specific SQL database'
                Endpoint    = 'sql/instance/{instanceId}/database/{databaseId}'
                Method      = 'Get'
                Body        = ''
            }
    
            'Get-CVSQLDatabaseBackupHistory' = @{
        
                Description = 'Get backup history for a specific SQL database'
                Endpoint    = 'sql/instance/{instanceId}/database/{databaseId}/history/backup'
                #Endpoint    = 'sql/instance/{instanceId}/database/{databaseId}/history/backup?latest={latest}&from={fromTime}&to={toTime}'
                Method      = 'Get'
                Body        = ''
            }
    
            'Get-CVSQLDatabaseBackupJob' = @{
        
                Description = 'Get SQL database backup job details for a specific instance/database/job'
                Endpoint    = 'v2/sql/instances/{instanceId}/databases/{databaseId}/jobs/{jobId}'
                #Endpoint    = 'sql/instance/{instanceId}/database/{databaseId}/history/backup/{jobId}'
                Method      = 'Get'
                Body        = ''
            }
    
            'Get-CVSQLInstance' = @{
        
                Description = 'Get the list of all SQL instances'
                Endpoint    = 'sql/instances?propertyLevel={propertyLevel}&paging={paging}&start={startPage}&max={pageSize}&sla={onlySLA}&sortBy={sortBy}&sortDir={sortDir}&search_term={searchTerm}&instanceName={instanceName}&clientName={clientName}'
                Method      = 'Get'
                Body        = ''
            }
    
            'Get-CVSQLInstanceDetail' = @{
        
                Description = 'Get information about a specific SQL instance'
                Endpoint    = 'sql/instance/{instanceId}?propertyLevel={propertyLevel}'
                Method      = 'Get'
                Body        = ''
            }
    
            'Get-CVSQLInstanceBackupHistory' = @{
        
                Description = 'Get backup history for a specific SQL instance'
                EndPoint    = 'sql/instance/{instanceId}/history/backup'
                #EndPoint    = 'sql/instance/{instanceId}/history/backup?latest={latest}&from={fromTime}&to={toTime}'
                Method      = 'Get'
                Body        = ''
            }
    
            'Get-CVSQLInstanceBackupJob' = @{
        
                Description = 'Get SQL instance backup job details for a specific instance/job'
                Endpoint    = 'v2/sql/instances/{instanceId}/jobs/{jobId}'
                #Endpoint    = 'sql/instance/{instanceId}/history/backup/{jobId}'
                Method      = 'Get'
                Body        = ''
            }
    
            'Backup-CVSQLInstance' = @{
        
                Description = 'Backup SQL instance subclients'
                Endpoint    = 'v2/sql/instances/{instanceId}/backup'
                Method      = 'Post'
                Body        = ''
            }

            'Backup-CVSQLSubclient' = @{
        
                Description = 'Backup SQL instance subclients'
                Endpoint    = 'v2/sql/instances/{instanceId}/backup?subclient={subclientId}'
                Method      = 'Post'
                Body        = ''
            }
            
            'Backup-CVSQLDatabase' = @{
        
                Description = 'Backup SQL database'
                Endpoint    = 'v2/sql/instance/{instanceId}/databases/{databaseId}/backup'
                Method      = 'Post'
                Body        = ''
            }
    
            'Export-CVSQLDatabaseRTD' = @{
        
                Description = 'Submit restore-to-disk job for SQL database'
                Endpoint    = 'v2/sql/instances/{instanceId}/databases/{databaseId}/export'
                Method      = 'Post'
                Body        = ''
            }
            
            'Export-CVSQLDatabaseRTDByJobId' = @{
        
                Description = 'Submit restore-to-disk job for SQL database by jobId'
                Endpoint    = 'v2/sql/instances/{instanceId}/databases/{databaseId}/jobs/{jobId}/export'
                Method      = 'Post'
                Body        = ''
            }
            
            'Mount-CVSQLDatabase' = @{
        
                Description = 'Mount a SQL database'
                Endpoint    = 'v2/sql/instances/{instanceId}/databases/{databaseId}/mount'
                Method      = 'Post'
                Body        = ''
            }
    
            'Restore-CVSQLDatabase' = @{
        
                Description = 'Restore SQL database'
                Endpoint    = 'v2/sql/instances/{instanceId}/databases/{databaseId}/restore'
                Method      = 'Post'
                Body        = ''
            }

            #--------------- Commvault.StorageResources ---------------

            'Get-CVMediaAgent' = @{
        
                Description = 'Get media agent list from CommServe'
                Endpoint    = 'MediaAgent'
                Method      = 'Get'
                Body        = ''
            }

            'Get-CVSubclientMediaAgent' = @{
        
                Description = 'Get subclient media agent details'
                Endpoint    = 'Subclient/{subclientId}/MediaAgent'
                #Endpoint    = 'Subclient/{subclientId}/MediaAgent?fromTime={fromTime}&toTime={toTime}'
                Method      = 'Get'
                Body        = ''
            }

            'GetMediaAgentStoragePolicies' = @{
        
                Description = 'Get storage policy details for a specific media agent'
                Endpoint    = 'StoragePolicyListAssociatedToMediaAgent?MediaAgent={mediaAgentId}'
                Method      = 'Get'
                Body        = ''
            }
    
            'Get-CVLibrary' = @{
        
                Description = 'Get storage resource libraries on the CommServe'
                Endpoint    = 'Library'
                Method      = 'Get'
                Body        = ''
            }
    
            'GetLibraryProperties' = @{
        
                Description = 'Get detail properties for storage resource library'
                Endpoint    = 'Library/{id}'
                Method      = 'Get'
                Body        = ''
            }
    
            'New-CVLibrary' = @{
        
                Description = 'Create magnetic library'
                Endpoint    = 'Library'
                Method      = 'Post'
                Body        = ''
            }
    
            'Get-CVDiskSpace' = @{
        
                Description = 'Get the diskspace available in mountPath'
                Endpoint    = 'Library/{id}'
                Method      = 'Get'
                Body        = ''
            }
    
            #--------------- Commvault.VirtualServer ---------------

            'Add-CVVirtualMachineGroupContent' = @{
        
                Description = 'Discover virtual server subclient content in CommCell'
                Endpoint    = 'Subclient/Content/Preview'
                Method      = 'Post'
                Body        = @'
                <?xml version="1.0" encoding="UTF-8"?>
                <EVGui_PreviewInventoryReq createClientsForDiscoveredVms="{createClientsForDiscoveredVms}" previewInventoryRespType="2">
                <appId clientId="{clientId}" apptypeId="106" instanceId="{instanceId}" backupsetId="{backupsetId}" subclientId="{subclientId}"/>
                <contentEntity>
                <children allOrAnyChildren="1" name="{name}" type="{type}" path="" displayName="{displayName}" equalsOrNotEquals="1"/>
                </contentEntity>
                <filterEntity/>
                </EVGui_PreviewInventoryReq>
'@
                ContentType = 'application/xml'
            }
    
            'Add-CVVirtualMachine' = @{
        
                Description = 'Add content to specified virtual server subclient in CommCell'
                Endpoint    = 'Subclient/{subclientId}'
                Method      = 'Post'
                Body        = ''
            }
    
            'Backup-CVVirtualMachine' = @{
        
                Description = 'Starts backup job for specified virtual machine'
                Endpoint    = '/v2/vsa/vm/{vmGUID}/backup'
                Method      = 'Post'
                Body        = ''
            }
    
            'Get-CVVirtualMachine' = @{
        
                Description = 'Gets virtual machines filtered by: protected, unprotected, or all'
                Endpoint    = 'VM?forUser=true&status={status}'
                Method      = 'Get'
                Body        = ''
            }
    
            'Get-CVVirtualMachineByClient' = @{
        
                Description = 'Gets virtual machines filtered by: client, protected, unprotected, or all'
                Endpoint    = 'VM?propertyLevel=AllProperties&status={status}&PseudoClientId={id}'
                Method      = 'Get'
                Body        = ''
            }
    
            'Restore-CVVirtualMachine' = @{
        
                Description = 'Starts restore job for specified virtual machine'
                Endpoint    = 'v2/vsa/vm/{vmGUID}/recover'
                Method      = 'Post'
                Body        = ''
            }
    
            'Restore-CVVirtualMachineOutofPlace' = @{
        
                Description = 'Out of place virtual machine restore'
                Endpoint    = 'v2/vsa/vm/{vmGUID}/recover'
                Method      = 'Post'
                Body        = ''
            }
    
            'Get-CVVirtualMachineLiveMount' = @{
        
                Description = 'Starts virtual machine live unmount job'
                Endpoint    = 'v2/vsa/vm/{vmGUID}/activemounts'
                Method      = 'Get'
                Body        = ''
            }

            'Mount-CVVirtualMachine' = @{
        
                Description = 'Starts virtual machine live mount job'
                Endpoint    = 'v2/vsa/vm/{vmGUID}/livemount'
                Method      = 'Post'
                Body        = ''
            }

            'Dismount-CVVirtualMachine' = @{
        
                Description = 'Starts virtual machine live unmount job'
                Endpoint    = 'v2/vsa/vm/{vmGUID}/liveunmount'
                Method      = 'Post'
                Body        = ''
            }

            'InplaceRecover-VMDetails' = @{
        
                Description = 'Returns the object for InplaceRestore'
                Endpoint    = 'VM?guid={vmGUID}'
                Method      = 'Get'
                Body        = ''
            }

            #--------------- Commvault.Workflow ---------------

            'Get-CVWorkflow' = @{
        
                Description = 'Get workflow list'
                Endpoint    = 'Workflow'
                Method      = 'Get'
                Body        = ''
            }
            
            'GetWorkflowDetail' = @{
        
                Description = 'Get workflow detail'
                Endpoint    = 'Workflow/{workflowId}'
                Method      = 'Get'
                Body        = ''
            }
 
            'Start-CVWorkflow' = @{
        
                Description = 'This operation executes a workflow'
                Endpoint    = 'Wapi/{workflowName}'
                Method      = 'Get'
                Body        = ''
            }
            
            'Remove-CVWorkflow' = @{
        
                Description = 'This operation deletes a workflow from the CommServe'
                Endpoint    = 'Workflow/{workflowId}'
                Method      = 'Delete'
                Body        = ''
            }
        }
    }
    catch {
        throw $_
    }
    finally {
        Write-Output $restapi.$Request
    }
}


function Get-CVCommCellGlobals {

    try {
        $globals = @{}
        $globals.Add('commCellId', 2)
        $globals.Add('defaultSubclient','default')
    
        return $globals
    }
    catch {
        throw $_
    }
}


function HasProperty($Object, $PropertyName)
{
    $PropertyName -in $Object.PSobject.Properties.Name
}


$REST_AUTH_URL_PREFIX = 'http://';
$REST_DEFAULT_PORT = '81';
$REST_BASE_URL = 'Server:Port/SearchSvc/CVWebService.svc/';
$REST_HTTP_STATUS_CODES = @(200, 201, 202, 203, 204, 205, 206, 206, 207, 208);

$CVPS_ERROR_ID = @{
    202  = 'REST API response [Accepted] error: The request has been received but not yet acted upon'
    1000 = 'Empty or null user name: Please provide a user name for web service login'
    1001 = 'Empty or null secure password: Please provide secure password for web service login'
    1002 = 'Invalid CommServe session token: Please login to CommServe with Connect-CVServer'
}