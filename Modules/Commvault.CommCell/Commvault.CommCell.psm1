#
# Module 'Commvault.CommCell'
#
# Generated by: Commvault
#
# Generated on: 5/22/2019
#

using module 'Commvault.TypeDefinitions'

Set-StrictMode -Version latest


function Get-CVVersionInfo {
<#
.SYNOPSIS
    Method to retrieve the current version, service pack level, and time zone settings on the CommServe.

.DESCRIPTION
    Method to retrieve the current version, service pack level, and time zone settings on the CommServe.

.PARAMETER None

.EXAMPLE
    Get-CVVersionInfo
    
.OUTPUTS
    Outputs [PSCustomObject] containing CommServe configuration data.

.NOTES
    Author: Gary Stoops
    Company: Commvault
#>
    [CmdletBinding()]
    [OutputType([PSCustomObject])]
    param()
    
    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
            $endpointSave = $sessionObj.requestProps.endpoint
        }
        catch {
            throw $_
        }
    }

    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"

        try {
            $sessionObj.requestProps.endpoint = $endpointSave

            $body = ''
            $headerObj = Get-CVRESTHeader $sessionObj
            $payload = @{ }
            $payload.Add('headerObject', $headerObj)
            $payload.Add('body', $body)
            $validate = $null

            $response = Submit-CVRESTRequest $payload $validate

            if ($response.IsValid) {
                Write-Output $response.Content
            }
            else {
                Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): unable to retrieve CommServe version information"
            }
        }
        catch {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"
    }
}
    
    
function Get-CVAlert {
<#
.SYNOPSIS
    Method to retrieve the list of alerts from the CommServe.

.DESCRIPTION
    Method to retrieve the list of alerts from the CommServe.
    This method is implemented with Powershell paging support.

.PARAMETER First
    Get alerts with paging support -First 20 (20 per page).

.PARAMETER Skip
    Get alerts with paging support -First 20 -Skip 5 (20 per page, skip first 5 pages).

.PARAMETER IncludeTotalCount
    Include total count of result record set.

.EXAMPLE
    Get-CVAlert
    
.EXAMPLE
    Get-CVAlert -IncludeTotalCount -First 5 -Skip 0 (5 per page, skip none)

.OUTPUTS
    Outputs [PSCustomObject] containing CommServe alert data.

.NOTES
    Author: Gary Stoops
    Company: Commvault
#>
    [CmdletBinding(SupportsPaging = $True)]
    [OutputType([PSCustomObject])]
    param()
    
    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
            $endpointSave = $sessionObj.requestProps.endpoint
        }
        catch {
            throw $_
        }
    }

    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"

        try {
            $sessionObj.requestProps.endpoint = $endpointSave

            $body = ''
            $headerObj = Get-CVRESTHeader $sessionObj
            $payload = @{ }
            $payload.Add('headerObject', $headerObj)
            $payload.Add('body', $body)
            $validate = 'AlertList'

            $response = Submit-CVRESTRequest $payload $validate

            if ($response.IsValid) {
                $pagingObj = ValidatePagingParameters $PSCmdlet.PagingParameters $response.Content.AlertList.Length
                if ($pagingObj.paging) {
                    $curPage = $pagingObj.startPage + 1

                    if ($pagingObj.startPage -eq 0) { $index = 0 }
                    else { $index = ($pagingObj.startPage * $pagingObj.pageSize) }

                    for (; $index -lt $response.Content.AlertList.Length; $index++) {
                        Write-Output $response.Content.AlertList[$index]

                        if ($index -eq $response.Content.AlertList.Length - 1) {
                            break
                        }
                        elseif ($index -eq (($curPage * $pagingObj.pageSize) - 1)) {
                            $curPage++
                            Read-Host '[Enter] for next page'
                        }
                    }
                }
                elseif (-not $pagingObj.badParams) {
                    foreach ($alert in $response.Content.AlertList) {
                        Write-Output $alert
                    }
                }
            }
            else {
                Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): alert list empty"
            }
        }
        catch {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"

        try {
            if ($PSCmdlet.PagingParameters.IncludeTotalCount) {
                [double] $accuracy = 1.0
                $PSCmdlet.PagingParameters.NewTotalCount($response.Content.AlertList.Length, $accuracy)
            }
        }
        catch {
            throw $_
        }
    }
}
        
        
function Get-CVClient {
<#
.SYNOPSIS
    Method to retrieve the list of clients or detailed client properties from the CommServe.

.DESCRIPTION
    If the Name parameter is not provided, this method will output a list of clients from the CommServe.
    If the Name parameter is provided, a default subset of client properties will be output for the specified client. 
    
.PARAMETER Name
    Get detail properties for client by Name.

.PARAMETER Id
    Get detail properties for client Id.

.PARAMETER AdditionalSettings
    Retrieves additional setting properties for each client in the list.

.PARAMETER AllProperties
    Retrieves all properties for the specified client.

.PARAMETER Version
    Retrieves package version properties for the specified client.

.PARAMETER TimeZone
    Retrieves timezone properties for the specified client.

.EXAMPLE
    Get-CVClient 

.EXAMPLE
	Get-CVClient -Name ProdTest1

.EXAMPLE
    Get-CVClient -Name ProdTest1 -AllProperties

.EXAMPLE
    Get-CVClient -Name ProdTest1 -AllProperties | Select-Object -ExpandProperty client
    
.EXAMPLE
    Get-CVClient -Name ProdTest1 -AllProperties | Select-Object -ExpandProperty client | Select-Object jobResulsDir
    
.EXAMPLE
    Get-CVClient -Name ProdTest1 -Version -TimeZone 
    
.EXAMPLE
    Get-CVClient -AdditionalSettings
    
.EXAMPLE
    Get-CVClient -Name SNOWSQL1 -AdditionalSettings
    
.EXAMPLE
    Get-CVClient -Name ProdTest1 | Get-CVSubclient
    
.EXAMPLE
    Get-CVClient | Get-CVSubclient
    
.OUTPUTS
    Outputs [PSCustomObject] containing list of CommServe clients or client properties.

.NOTES
    Author: Gary Stoops
    Company: Commvault
#>
    [Alias('Get-CVClientProps')]
    [Alias('Get-CVClientAdditionalSettings')]
    [CmdletBinding(DefaultParameterSetName = 'Default')]
    [OutputType([PSCustomObject])]
    param(
        [Alias('Client')]
        [Parameter(Mandatory = $False, ParameterSetName = 'ByName')]
        [ValidateNotNullorEmpty()]
        [String] $Name,

        [Alias('ClientId')]
        [Parameter(Mandatory = $False, ParameterSetName = 'ById')]
        [ValidateNotNullorEmpty()]
        [Int32] $Id,

        [Switch] $AdditionalSettings,
        [Switch] $Version,
        [Switch] $TimeZone,
        [Switch] $AllProperties
    )
    
    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
            $endpointSave = $sessionObj.requestProps.endpoint

            if ($PSCmdlet.ParameterSetName -eq 'ByName' -or
                $PSCmdlet.ParameterSetName -eq 'ById' ) {
                $foundClient = $False
            }
            else {
                $foundClient = $null
            }
        }
        catch {
            throw $_
        }
    }
    
    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"

        try {
            $sessionObj.requestProps.endpoint = $endpointSave

            $headerObj = Get-CVRESTHeader $sessionObj
            $body = ''
            $payload = @{ }
            $payload.Add('headerObject', $headerObj)
            $payload.Add('body', $body)
            $validate = 'clientProperties'

            $response = Submit-CVRESTRequest $payload $validate

            $clientList = @{ }

            if ($response.IsValid) {
                foreach ($clientProp in $response.Content.clientProperties) {
                    if ($PSCmdlet.ParameterSetName -eq 'ByName') {
                        if ($clientProp.client.clientEntity.clientName -eq $Name) {
                            $foundClient = $True
                        }
                    }
                    elseif ($PSCmdlet.ParameterSetName -eq 'ById') {
                        if ($clientProp.client.clientEntity.clientId -eq $Id) {
                            $foundClient = $True
                        }
                    }

                    if ($null -eq $foundClient -or $foundClient -eq $True) {
                        $clientSubProp = @{ }
                        $clientSubProp.Add('clientId', $clientProp.client.clientEntity.clientId)
                        $clientSubProp.Add('clientName', $clientProp.client.clientEntity.clientName)
                        $clientSubProp.Add('clienthostName', $clientProp.client.clientEntity.hostName)
                        $clientSubProp.Add('type', $clientProp.client.clientEntity._type_)
                        $clientSubProp.Add('clientIdGUID', $clientProp.client.clientEntity.clientGUID)
                        $clientSubProp.Add('cvdPort', $clientProp.client.cvdPort)
                       
                        if ($AdditionalSettings) {
                            $clientSubProp.Add('AdditionalSettings', (GetClientAdditionalSettings -ClientId $clientProp.client.clientEntity.clientId))
                        }
    
                        $clientList.Add($clientProp.client.clientEntity.clientName, $clientSubProp)
                    }

                    if ($foundClient -eq $True) {
                        break
                    }
                }
            }

            if ($clientList.Count -eq 0) {
                if ($PSCmdlet.ParameterSetName -eq 'ByName') {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): client not found having name [$Name]"
                }
                elseif ($PSCmdlet.ParameterSetName -eq 'ById') {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): client not found having id [$Id]"
                }
                else {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): no clients not found"
                }
            }
            else {
                foreach ($key in $clientList.Keys) {
                    $client = $clientList[$key]
                    if ($AllProperties -or $Version -or $TimeZone) {
                        $propertiesObj = GetClientProperties -ClientObject $client
                        if ($propertiesObj.IsValid) {
                            if ($AllProperties) {
                                Write-Output $propertiesObj.Content.clientProperties
                            }
                            else {
                                if ($Version) {
                                    $client.Add('Version', $propertiesObj.Content.clientProperties[0].client.versionInfo)
                                }
                                if ($TimeZone) {
                                    $client.Add('TimeZone', $propertiesObj.Content.clientProperties[0].client.TimeZone)
                                }
                                Write-Output $client
                            }
                        }
                    }
                    else {
                        Write-Output $client
                    }
                }
            }
        }
        catch {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"
    }
}


function Add-CVClient {
<#
.SYNOPSIS
    Method to create a new client in CommServe.

.DESCRIPTION
    Method to create a new client in CommServe.

.PARAMETER Name
    The Name for the new client. Alias: ClientName.

.PARAMETER User
    User account name to use in CommCell.

.PARAMETER Password
    User account password to use in CommCell.

.PARAMETER AgentType
    The agent type for the new client. The type id can be taken from below:
        51	MediaAgent
        54	MediaAgent Core
        101	SharePoint iDataAgent
        156	DataArchiver WebProxy Agent for Exchange
        158	DataArchiver Agent for Exchange
        301	OSSV Agent
        356	Sybase iDataAgent
        358	MySQL iDataAgent
        362	PostgreSQL iDataAgent
        363	Documentum Agent
        402	SRM Windows File System Agent
        403	SRM Exchange Agent
        404	SRM NAS Agent
        405	SRM SQL Agent
        406	SRM Oracle Agent
        407	SRM NetWare Proxy Agent
        408	SRM SharePoint Agent
        705	Standalone File Archiver for Windows Agent
        713	VirtualServer Agent
        715	External Data Connector Agent
        908	DataArchiver Agent for Network Storage
        1102	Proxy FileSystem Agent
        1121	Novell OES Linux FS Agent
        1123	SRM File System Agent
        1126	Documentum Agent
        1128	External Data Connector Agent
        1136	VirtualServer Agent on UNIX
        1201	Informix Agent
        1202	Sybase Agent
        1203	SybaseIQ Agent
        1204	Oracle Agent
        1205	Oracle SAP Agent
        1206	SAPMAXDB Agent
        1207	DB2 Agent
        1208	MySQL Agent
        1209	Postgre SQL Agent
        1210	SAP HANA Agent
        1211	Cassandra Agent
        1301	MediaAgent
        1305	MediaAgent Core
        1351	OSSV Agent
        2003	NetWare MediaAgent

.PARAMETER OS
    The operating system for the new client.

.EXAMPLE
    Add-CVClient -Name NewClient -User admin -AgentType 54 -OS Windows

.OUTPUTS
    On success it installs client and return 0.

.NOTES
    Author : Anand Venkatesh
    Company: Commvault
#>
    [CmdletBinding()]
    param(
        [Alias('ClientName')]
        [Parameter(Mandatory = $True)]
        [ValidateNotNullorEmpty()]
        [String] $Name,

        [Parameter(Mandatory = $True)]
        [ValidateNotNullorEmpty()]
        [String] $User,

        [Parameter(Mandatory = $True)]
        [ValidateNotNullorEmpty()]
        [SecureString] $Password,

        [Parameter(Mandatory = $True)]
        #[Parameter(Mandatory = $True)] #Value can be VirtualServer
        [ValidateNotNullorEmpty()]
        [String] $AgentType,

        [Parameter(Mandatory = $True)]
        #[Parameter(Mandatory = $True)] #Value can be VirtualServer
        [ValidateNotNullorEmpty()]
        [String] $OS
    )

    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
            $endpointSave = $sessionObj.requestProps.endpoint
        }
        catch {
            throw $_
        }
    }

    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"

        try {
            $sessionObj.requestProps.endpoint = $endpointSave

            $globals = Get-CVCommCellGlobals

            $prepInputs = @{ }
            $prepInputs.Add('CommServName', $sessionObj.server)
            $prepInputs.Add('ClientName', $Name)
            $prepInputs.Add('ClientUser', $User)
            $prepInputs.Add('ClientPwd', $Password)
            $prepInputs.Add('ComponentId', $AgentType)
            $prepInputs.Add('OS', $OS)
            $prepInputs.Add('CommcellId', $globals.commCellId)
            $prepInputs.Add('Commcelluser', $sessionObj.user)

            $body = (PrepareAddClientTaskBodyJson $prepInputs).body

            $headerObj = Get-CVRESTHeader $sessionObj
            $payload = @{ }
            $payload.Add('headerObject', $headerObj)
            $payload.Add('body', $body)
            $validate = 'taskId'
            
            $response = Submit-CVRESTRequest $payload $validate

            if ($response.IsValid) {
                Write-Output $response.Content
            }
            else {
                Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): add client request declined for [$Name]"      
            }
        }
        catch {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"
    }
}


function Get-CVClientGroup {
<#
.SYNOPSIS
    Method to retrieve client groups from the CommServe.

.DESCRIPTION
    Method to retrieve client groups or a single specified group from the CommServe.
    
.PARAMETER Name
    Get a client group by Name.

.PARAMETER AllProperties
    Get detail properties for each client group.

.EXAMPLE
    Get-CVClientGroup
    
.EXAMPLE
    Get-CVClientGroup -Name Snow-Test
    
.EXAMPLE
	Get-CVClientGroup -Name Snow-Test -AllProperties

.EXAMPLE
    Get-CVClientGroup -Name Snow-Test -AllProperties | Select-Object -ExpandProperty firewallConfiguration
    
.EXAMPLE
    Get-CVClientGroup -Name Snow-Test -AllProperties | Select-Object -ExpandProperty firewallConfiguration | Select-Object -ExpandProperty firewallOptions
    
.OUTPUTS
    Outputs [PSCustomObject] containing client group properties.

.NOTES
    Author: Gary Stoops
    Company: Commvault
#>
    [Alias('Get-CVClientGroupProps')]
    [CmdletBinding(DefaultParameterSetName = 'Default')]
    [OutputType([PSCustomObject])]
    param(
        [Alias('ClientGroupName')]
        [Parameter(Mandatory = $False, ParameterSetName = 'ByName')]
        [ValidateNotNullorEmpty()]
        [String] $Name,

        [Switch] $AllProperties
    )

    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
            $endpointSave = $sessionObj.requestProps.endpoint
        }
        catch {
            throw $_
        }
    }
    
    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"

        try {
            $sessionObj.requestProps.endpoint = $endpointSave

            $headerObj = Get-CVRESTHeader $sessionObj
            $body = ''
            $payload = @{ }
            $payload.Add('headerObject', $headerObj)
            $payload.Add('body', $body)
            $validate = 'groups'

            $response = Submit-CVRESTRequest $payload $validate

            $foundGroup = $False

            if ($response.IsValid) {
                foreach ($group in $response.Content.groups) {
                    if ($PSCmdlet.ParameterSetName -eq 'ByName') {
                        if ($Name -eq $group.name) {
                            $foundGroup = $True
                            if ($AllProperties) {
                                Write-Output (GetClientGroupProperties -GroupObject $group)
                            }
                            else {
                                Write-Output $group
                            }
                        }
                    }
                    else {
                        if ($AllProperties) {
                            Write-Output (GetClientGroupProperties -GroupObject $group)
                        }
                        else {
                            Write-Output $group
                        }
                    }
                }
                if ($PSCmdlet.ParameterSetName -eq 'ByName' -and -not $foundGroup) {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): client group not found having name [$Name]"                
                }
            }
            else {
                Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): no client groups found"                
            }
        }
        catch {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"
    }
}


function Get-CVSubclient {
<#
.SYNOPSIS
    Method to retrieve the list of subclients or a named subclient for a given client from the CommServe.

.DESCRIPTION
    Method to retrieve the list of subclients or a named subclient for a given client from the CommServe.
    
.PARAMETER ClientName
    Get list of subclient properties for ClientName.

.PARAMETER Name
    Get properties for the subclient specified by Name.

.PARAMETER AllProperties
    Retrieves all properties for subclients.

.EXAMPLE
    Get-CVSubclient

.EXAMPLE
    Get-CVSubclient -ClientName clientName

.EXAMPLE
    Get-CVSubclient -ClientName clientName -Name subclientName

.EXAMPLE
    Get-CVSubclient -ClientName clientName -Name subclientName -AllProperties

.EXAMPLE
    Get-CVClient -Name clientName | Get-CVSubclient -AllProperties | Select-Object -ExpandProperty subClientProperties | Select-Object -ExpandProperty fsSubClientProp

.OUTPUTS
    Outputs [PSCustomObject] all subclients of the specified client, or the specified single subclient.

.NOTES
    Author: Gary Stoops
    Company: Commvault
#>
    [Alias('Get-CVSubclientProps')]
    [CmdletBinding(DefaultParameterSetName = 'ByClientName')]
    [OutputType([PSCustomObject])]
    param(
        [Alias('SubclientName')]
        [Parameter(Mandatory = $False)]
        [ValidateNotNullorEmpty()]
        [String] $Name,

        [Parameter(Mandatory = $False)]
        [ValidateNotNullorEmpty()]
        [Int32] $Id,

        [Parameter(Mandatory = $True, ParameterSetName = 'ByClientName')]
        [ValidateNotNullorEmpty()]
        [String] $ClientName,

        [Parameter(Mandatory = $True, ParameterSetName = 'ByClientObject', ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [System.Object] $ClientObject,

        [Parameter(Mandatory = $False)]
        [Switch] $AllProperties
    )

    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
            $endpointSave = $sessionObj.requestProps.endpoint
            $processCount = 0
        }
        catch {
            throw $_
        }
    }

    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"

        try {
            $sessionObj.requestProps.endpoint = $endpointSave

            if ($PSCmdlet.ParameterSetName -eq 'ByClientName') {
                $clientObj = Get-CVClient -Name $ClientName
                if ($null -ne $clientObj) { 
                    $ClientObject = $clientObj
                }
                else {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): client not found having name [$ClientName]"
                    return
                }
            }

            $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{clientId}', $ClientObject.clientId)

            $headerObj = Get-CVRESTHeader $sessionObj
            $body = ''
            $payload = @{ }
            $payload.Add('headerObject', $headerObj)
            $payload.Add('body', $body)
            $validate = 'subClientProperties'

            $response = Submit-CVRESTRequest $payload $validate
    
            if ($response.IsValid) {
                foreach ($subclient in $response.Content.subClientProperties.subClientEntity) {
                    if (-not [String]::IsNullOrEmpty($Name)) {
                        if ($subclient.subclientName -eq $Name) {
                            $processCount++
                            if ($AllProperties) {
                                Write-Output (GetSubclientProperties -SubclientObject $subclient)
                            }
                            else {
                                Write-Output $subclient
                            }
                            break
                        }
                    }
                    elseif ($Id -gt 0) {
                        if ($subclient.subclientId -eq $Id) {
                            $processCount++
                            if ($AllProperties) {
                                Write-Output (GetSubclientProperties -SubclientObject $subclient)
                            }
                            else {
                                Write-Output $subclient
                            }
                            break
                        }
                    }
                    else {
                        $processCount++
                        if ($AllProperties) {
                            Write-Output (GetSubclientProperties -SubclientObject $subclient)
                        }
                        else {
                            Write-Output $subclient
                        }
                    }
                }
            }
            
            if ($PSCmdlet.ParameterSetName -eq 'ByClientObject') {
                if ($processCount -eq 0) {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): no subclients found for client [$($ClientObject.clientName)]"
                }
                else {
                    $processCount = 0
                }
            }
        }
        catch {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"

        try {
            if ($PSCmdlet.ParameterSetName -ne 'ByClientObject' -and $processCount -eq 0) {
                if (-not [String]::IsNullOrEmpty($Name)) {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): subclient not found having name [$Name]"
                }
                elseif ($Id -gt 0) {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): subclient not found having id [$Id]"
                }
                else {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): no subclients found"
                }
            }
        }
        catch {
            throw $_
        }
    }
}


function Set-CVClientGroup {
<#
.SYNOPSIS
    Method to set client group properties.

.DESCRIPTION
    Method to set client group properties.

.PARAMETER Name
    Set properties on client group specified by Name.

.PARAMETER Properties
    Piped Properties set.

.PARAMETER Force
    Switch to Force override of default 'WhatIf' confirmation behavior.

.EXAMPLE
    1. Get current props: $props = Get-CVClientGroup -AllProperties -Name 'Media Agents'
    2. Modify props: $props.description = 'Selects Clients which have media agents installed' etc.
    3. Set props: $props | Set-CVClientGroup -Name 'Media Agents'

.OUTPUTS
    Outputs [PSCustomObject] containing job submission result.

.NOTES
    Author: Gary Stoops
    Company: Commvault
#>
    [CmdletBinding(SupportsShouldProcess = $True, ConfirmImpact = 'Medium')]
    param(
        [Alias('ClientGroupName')]
        [Parameter(Mandatory = $True)]
        [ValidateNotNullorEmpty()]
        [String] $Name,

        [Alias('ClientGroupProps')]
        [Parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [System.Object] $Properties,

        [Switch] $Force
    )

    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
            $endpointSave = $sessionObj.requestProps.endpoint
        }
        catch {
            throw $_
        }
    }

    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"

        try {
            $sessionObj.requestProps.endpoint = $endpointSave
            
            $clientGroupObj = Get-CVClientGroup -Name $Name
            if ($null -eq $clientGroupObj) { 
                Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): client group not found having name [$Name]"
                return
            }

            $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{clientGroupId}', $clientGroupObj.Id) 

            $headerObj = Get-CVRESTHeader $sessionObj
            $body = (PrepareUpdateClientGroupTaskBodyJson $Properties).body
            $payload = @{ }
            $payload.Add('headerObject', $headerObj)
            $payload.Add('body', $body)
            $validate = $null

            if ($Force -or $PSCmdlet.ShouldProcess($clientGroupObj.Name)) {
                $response = Submit-CVRESTRequest $payload $validate
            }
            else {
                $response = Submit-CVRESTRequest $payload $validate -DryRun
            }

            if ($response.IsValid) {
                Write-Output $response.Content
            }
            else {
                Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): set client group properties request failed for group [$($clientGroupObj.Name)]"
            }
        }
        catch {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"
    }
}


function Set-CVClient {
<#
.SYNOPSIS
    Method to set client properties.

.DESCRIPTION
    Method to set client properties.

.PARAMETER Name
    Set properties on client specified by Name.

.PARAMETER Properties
    Piped Properties set.

.PARAMETER Force
    Switch to Force override of default 'WhatIf' confirmation behavior.

.EXAMPLE
    1. Get current props: $props = Get-CVClient -AllProperties -Name vsa-vc65.testlab.commvault.com
    2. Modify props: $props.description = 'vsa-vc65 test client' etc.
    3. Set props: $props | Set-CVClient -Name vsa-vc65.testlab.commvault.com

.OUTPUTS
    Outputs [PSCustomObject] containing job submission result.

.NOTES
    Author: Gary Stoops
    Company: Commvault
#>
    [Alias('Set-CVClientProps')]
    [CmdletBinding(SupportsShouldProcess = $True, ConfirmImpact = 'Medium')]
    [OutputType([PSCustomObject])]
    param(
        [Alias('ClientName')]
        [Parameter(Mandatory = $True)]
        [ValidateNotNullorEmpty()]
        [String] $Name,

        [Alias('ClientProps')]
        [Parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [System.Object] $Properties,

        [Switch] $Force
    )

    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
            $endpointSave = $sessionObj.requestProps.endpoint
        }
        catch {
            throw $_
        }
    }

    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"

        try {
            $sessionObj.requestProps.endpoint = $endpointSave
            
            $clientObj = Get-CVClient -Name $Name
            if ($null -eq $clientObj) { 
                Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): client not found having name [$Name]"
                return
            }

            $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{clientId}', $clientObj.clientId) 

            $headerObj = Get-CVRESTHeader $sessionObj
            $body = (PrepareUpdateClientTaskBodyJson $Properties).body
            $payload = @{ }
            $payload.Add('headerObject', $headerObj)
            $payload.Add('body', $body)
            $validate = $null

            if ($Force -or $PSCmdlet.ShouldProcess($clientObj.Name)) {
                $response = Submit-CVRESTRequest $payload $validate
            }
            else {
                $response = Submit-CVRESTRequest $payload $validate -DryRun
            }

            if ($response.IsValid) {
                Write-Output $response.Content
            }
            else {
                Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): set client properties request failed for group [$($clientObj.clientName)]"
            }
        }
        catch {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"
    }
}


function GetClientProperties ([System.Object] $ClientObject) {

    try {
        $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
        $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{clientId}', $ClientObject.clientId)

        $headerObj = Get-CVRESTHeader $sessionObj
        $body = ''
        $payload = @{ }
        $payload.Add('headerObject', $headerObj)
        $payload.Add('body', $body)
        $validate = 'clientProperties'

        $response = Submit-CVRESTRequest $payload $validate

        Write-Output $response
    }
    catch {
        throw $_
    }
}


function GetClientAdditionalSettings ([String] $ClientId) {

    try {
        $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
        $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{clientId}', $ClientId)

        $headerObj = Get-CVRESTHeader $sessionObj
        $body = ''
        $payload = @{ }
        $payload.Add('headerObject', $headerObj)
        $payload.Add('body', $body)
        $validate = $null

        $response = Submit-CVRESTRequest $payload $validate

        if ($response.IsValid) {
            if ('regKeys' -in $response.Content.PSObject.Properties.Name) {
                    Write-Output $response.Content.regKeys
            }
            else { 
                Write-Output $response.Content
            }
        }
    }
    catch {
        throw $_
    }
}


function GetClientGroupProperties ([System.Object] $GroupObject) {

    try {
        $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
        $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{clientGroupId}', $GroupObject.Id) 

        $headerObj = Get-CVRESTHeader $sessionObj
        $body = ''
        $payload = @{ }
        $payload.Add('headerObject', $headerObj)
        $payload.Add('body', $body)
        $validate = 'clientGroupDetail'

        $response = Submit-CVRESTRequest $payload $validate
        
        if ($response.IsValid) {
            Write-Output $response.Content.clientGroupDetail
        }
    }
    catch {
        throw $_
    }
}


function GetSubclientProperties ([System.Object] $SubclientObject) {

    try {
        $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
        $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{subclientId}', $SubclientObject.subclientId)

        $headerObj = Get-CVRESTHeader $sessionObj
        $body = ''
        $payload = @{ }
        $payload.Add('headerObject', $headerObj)
        $payload.Add('body', $body)
        $validate = $null

        $response = Submit-CVRESTRequest $payload $validate

        if ($response.IsValid) {
            Write-Output $response.Content
        }
    }
    catch {
        throw $_
    }
}


# Internal use: takes $PSCmdlet.PagingParameters and returns a hashtable paging flag, page size, and page start index
function ValidatePagingParameters($PagingParameters, [UInt64] $TotalCount) {

    try {
        $pagingObj = @{ 'paging' = 0; 'pageSize' = $null; 'startPage' = $null; 'badParams' = $False }

        [UInt64] $PageSize = [Math]::Max($PagingParameters.First, 0)
        [UInt64] $StartPage = [Math]::Max($PagingParameters.Skip, 0)

        if ($PageSize -lt [Uint64]::MaxValue) { # MaxValue is system default
            if ($PageSize -gt 0 -and $PageSize -le $TotalCount) {
                if ($StartPage -lt ($TotalCount / $PageSize)) {
                    $pagingObj['paging'] = 1
                    $pagingObj['pageSize'] = $PageSize
                    $pagingObj['startPage'] = $StartPage
                }
                elseif ($StartPage -gt 0) {
                    $pagingObj['badParams'] = $True
                    Write-Warning -Message "$($MyInvocation.MyCommand): paging parameter -Skip [$StartPage] beyond end of record set"
                }
            }
            elseif ($PageSize -gt 0) {
                $pagingObj['badParams'] = $True
                Write-Warning -Message "$($MyInvocation.MyCommand): paging parameter -First [$PageSize] exceeds total record count"
            }
        }

        Write-Output $pagingObj
    }
    catch {
        throw $_
    }
}


function HasProperty($Object, $PropertyName)
{
    $PropertyName -in $Object.PSobject.Properties.Name
}


<# PrepareUpdateClientGroupTaskBodyJson
{
    "processinginstructioninfo": {
        "locale": {
            "_type_": 66,
            "localeId": 0
        },
        "formatFlags": {
            "skipIdToNameConversion": true
        },
        "user": {
            "userName": "",
            "userId": 1,
            "_type_": 13
        }
    },
    "clientGroupDetail": {
        "isHtmlDescription": false,
        "isAddinClientGroup": false,
        "slaInterval": 0,
        "isEDCInstanceDeleted": false,
        "claQuota": 0,
        "forceClientSideDownload": 0,
        "isNetworkThrottleEnabled": false,
        "enableClientSideCaching": false,
        "rtoMinutes": 0,
        "description": "Selects Clients which have media agents installed",
        "isSmartClientGroup": true,
        "queueConflictingJobsEnabledForCG": false,
        "userHasAgentManagementPermission": 1,
        "edcSupportedInstanceType": 0,
        "rpoMinutes": 0,
        "allowJobsToRunPastOperationWindowEnabled": false,
        "isCommCellGroup": false,
        "JobPriority": 0,
        "isDiscoveredClientGroup": false,
        "excludeFromSLA": false,
        "slaCopyFallenBehindDays": 0,
        "slaCopyRedundancy": 0,
        "isEDCInstanceAssociated": false,
        "networkThrottle": {
            "enableThrottle": false
        },
        "securityAssociations": {
            "associations": [
                {
                    "userOrGroup": [
                        {
                            "userGroupName": "master",
                            "userGroupId": 1,
                            "_type_": 15
                        }
                    ],
                    "properties": {
                        "isCreatorAssociation": true,
                        "role": {
                            "_type_": 120,
                            "roleId": 1,
                            "roleName": "Master"
                        }
                    }
                }
            ],
            "ownerAssociations": {}
        },
        "dlpPropertise": {
            "dlpScanIntervalMins": 0,
            "dlpStolen": false,
            "dlpEnableAutomaticDecryption": false,
            "dlpUnlockMethod": 0,
            "enableDLP": false,
            "dlpEnableClientKeys": false,
            "dlpMinFileAgeMins": 0,
            "dlpRMProperties": {
                "enableRmDLP": false,
                "dlpRmNow": false,
                "dlpRmOfflineDays": 0
            }
        },
        "appMgrServiceLiteNode": {
            "hostName": "",
            "clientId": 0,
            "clientName": ""
        },
        "scgRule": {
            "op": 0,
            "rules": [
                {
                    "rule": {
                        "filterID": 100,
                        "secValue": "Media_Agent",
                        "propID": 2,
                        "propType": 4,
                        "value": "5"
                    }
                }
            ]
        },
        "overrideHigherLevelSettings": {
            "userAccount": {
                "userName": ""
            }
        },
        "clientGroup": {
            "clientGroupId": 3,
            "GUID": "42501DBB-8D80-41C9-A07B-DC787105A01F",
            "clientGroupName": "Media Agents"
        },
        "firewallConfiguration": {
            "configureFirewallSettings": false,
            "isTrivialConfig": true,
            "reachMeVia": {},
            "fwTrivialConfig": {
                "firewallTrivialDetailsCS": {
                    "networkType": 1,
                    "connectionType": 1,
                    "proxyEntity": {
                        "_type_": 0
                    }
                },
                "firewallTrivialDetailsMA": {
                    "networkType": 1,
                    "connectionType": 1,
                    "proxyEntity": {
                        "_type_": 0
                    }
                }
            },
            "firewallOptions": {
                "isRoamingClient": false,
                "extendedProperties": "\u003c?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?\u003e\u003cApp_FirewallExtendedProperties configureAutomatically=\"1\" defaultOutgoingProtocol=\"0\"/\u003e",
                "tunnelconnectionPort": 8403,
                "foreceSSL": false,
                "tunnelInitSeconds": 30,
                "lockdown": false,
                "bindOpenPortsOnly": false,
                "isDMZ": false,
                "keepAliveSeconds": 300
            }
        },
        "jobThrottleSettings": {
            "isJobThrottleEnabled": 0,
            "dataThreshold": 0,
            "excludeImmidiateJobs": 0,
            "logThreshold": 0
        },
        "clientGroupSecurity": {
            "associatedUserGroups": [
                {
                    "userGroupId": 1,
                    "_type_": 15,
                    "userGroupName": "master"
                }
            ],
            "ownerCapabilities": {}
        },
        "associatedClients": [
            {
                "hostName": "carbonWinCS1.testlab.commvault.com",
                "clientId": 2,
                "clientName": "carbonwincs1",
                "displayName": "carbonwincs1"
            }
        ],
        "powerManagementInfo": {
            "isPowerMgmtAllowed": true,
            "isPowerMgmtSupported": true
        },
        "clientGroupActivityControl": {
            "activityControlOptions": [
                {
                    "activityType": 1,
                    "enableAfterADelay": false,
                    "enableActivityType": true
                },
                {
                    "activityType": 2,
                    "enableAfterADelay": false,
                    "enableActivityType": true
                },
                {
                    "activityType": 16,
                    "enableAfterADelay": false,
                    "enableActivityType": true
                }
            ]
        },
        "globalFiltersInfo": {
            "globalFiltersInfoList": [
                {
                    "operatingSystemType": 1,
                    "globalFilters": {}
                },
                {
                    "operatingSystemType": 2,
                    "globalFilters": {}
                }
            ]
        },
        "createAs": {
            "userGroup": {
                "userGroupId": 1,
                "userGroupName": "master"
            }
        },
        "owner": {
            "userId": 0
        }
    }
}
#>
function PrepareUpdateClientGroupTaskBodyJson ([PSCustomObject] $ClientGroupDetail) {

    try {
        $createTaskReq = [ordered] @{ }

        $processingInstructionInfo = [ordered]@{ }
        $locale = @{ }
        $locale.Add('_type_', 66)
        $locale.Add('localeId', 0)
        $formatFlags = @{ }
        $formatFlags.Add('skipIdToNameConversion', $True)
        $user = @{ }
        $user.Add('_type_', 13)
        $user.Add('userName', '')
        $user.Add('userId', 1)
        $processingInstructionInfo.Add('locale', $locale)
        $processingInstructionInfo.Add('formatFlags', $formatFlags)
        $processingInstructionInfo.Add('user', $user)

        $createTaskReq.Add('processinginstructioninfo', $processingInstructionInfo)
        $createTaskReq.Add('clientGroupDetail', $ClientGroupDetail)

        $body = $createTaskReq | ConvertTo-Json -Depth 20
        return @{ 'body' = $body }
    }
    catch {
        throw $_
    }
}


<# PrepareUpdateClientTaskBodyJson
{
    "processinginstructioninfo": {
        "locale": {
            "_type_": 66,
            "localeId": 0
        },
        "formatFlags": {
            "skipIdToNameConversion": true
        },
        "user": {
            "userName": "",
            "userId": 1,
            "_type_": 13
        }
    },
    "clientDetail": {
        "clusterClientProperties": {
            "configureClusterClient": false,
            "showAllAgents": false
        },
        "pseudoClientInfo": {
            "edgeDrivePseudoClientProperties": {
                "systemDriveType": 0,
                "impersonateUser": {},
                "outlookAddinStoreInfo": {}
            },
            "openVMSProperties": {
                "cvdPort": 8400,
                "proxyClients": {},
                "userAccount": {
                    "password": "",
                    "userName": ""
                }
            },
            "virtualServerClientProperties": {
                "virtualServerInstanceInfo": {
                    "vsInstanceType": 0,
                    "azure": {
                        "credentials": {}
                    },
                    "azureResourceManager": {
                        "tenantId": "",
                        "credentials": {}
                    },
                    "amazonInstanceInfo": {}
                },
                "vmBackupInfo": {}
            },
            "dbThinClientProperties": {
                "proxyClients": {}
            },
            "cloudClonnectorProperties": {
                "instance": {
                    "cloudAppsInstance": {
                        "generalCloudProperties": {}
                    }
                }
            },
            "ibmiInstallOptions": {
                "jobProirity": 0,
                "jobQueue": "",
                "createJobQueue": false,
                "subsysDescription": "",
                "dataFolder": "",
                "runPriority": 0,
                "userProfile": {
                    "userName": ""
                }
            }
        },
        "clientConfiguration": {
            "isMergedExchangePackageInstalled": false
        },
        "clientProps": {
            "isFarmClient": false,
            "isMA": true,
            "webSearchServiceUrl": "http://carbonWinCS1.testlab.commvault.com:81/SearchSvc",
            "AutoUpdateLocation": "C:\\Program Files\\Commvault\\ContentStore",
            "JobResultsDiskCapThreshold": 90,
            "CipherType": 2,
            "RetryFrequencyInSecOnNetworkError": 30,
            "isWebServerInstalled": true,
            "RestoreAccessFlag": 0,
            "isRemoteCacheEnabled": true,
            "SnapBackupMAInstalled": true,
            "maxStreams": 0,
            "forceClientSideDownload": 0,
            "PathToExchangeMiningTool": "",
            "is1TouchClient": false,
            "RestoreAccessSynFull": false,
            "AltCachePartitionForQSnap": "",
            "cacheSource": 0,
            "ClientInterface": "carbonWinCS1.testlab.commvault.com",
            "EncryptKeyLength": 128,
            "isIndexingV2": true,
            "IsQsnapUNIX": false,
            "dm2CacheDiskCapThreshold": 90,
            "devsnapTargetPort": 3260,
            "EnableContentIndexing": false,
            "OptimizeDataForSearch": false,
            "recallService": "",
            "CenteraResourceFilename": "",
            "isQsnapInstalled": 0,
            "ContentIndexEngineInstalled": false,
            "dm2CacheRetentionDays": 7,
            "overrideGlobalEncryptionSettings": 3,
            "IsDCInstalled": false,
            "encryptionSettings": 0,
            "IsExchangeOnePassClient": false,
            "isExchangePseudoClient": false,
            "RetryCountOnNetworkError": 40,
            "DirectMediaAccessFlag": 0,
            "devsnapServerType": "",
            "isPersonalWorkstation": false,
            "isIndexingV2NAS": false,
            "JobResultsThresholdMB": 500,
            "JobResultsRetentionDays": 7,
            "EnableSnapBackups": false,
            "BlockLevelCacheDir": "",
            "StorePatchLocally": true,
            "isFastSearchSupported": false,
            "copyManagementLicense": false,
            "isDescriptionInHTMLFormat": true,
            "BinarySetID": 3,
            "IsCommServer": true,
            "IsDeletedClient": false,
            "iswebSearchServerInstalled": true,
            "EnableCollectDelegateInfo": true,
            "fileLevelAnalyticsLicense": false,
            "EnableRetryOnNetworkError": true,
            "dm2CacheThresholdMB": 500,
            "queueJobsIfOtherConflictingJobsAreActive": false,
            "IsVirtualClient": false,
            "JobPriority": 6,
            "devsnapInitiatorIQN": "iqn.1991-05.com.microsoft:carbonwincs1.testlab.commvault.com",
            "overrideGlobalDesktopGuiProperties": false,
            "enableAccessControl": true,
            "CDRLogFileLocation": "",
            "EndUserUrl": "http://carbonWinCS1.testlab.commvault.com:80/webconsole",
            "ClientNoPhysicalMachine": false,
            "byteOrder": "Little-endian",
            "RestoreAccessPubKey": false,
            "networkThrottle": {
                "enableThrottle": false,
                "throttle": {}
            },
            "securityAssociations": {
                "ownerAssociations": {}
            },
            "clientSecurity": {
                "enableDataSecurity": false,
                "associatedUserGroups": [
                    {
                        "userGroupId": 1,
                        "_type_": 15,
                        "userGroupName": "master"
                    }
                ],
                "ownerCapabilities": {}
            },
            "dlpPropertise": {
                "dlpScanIntervalMins": 15,
                "dlpStolen": false,
                "dlpEnableAutomaticDecryption": false,
                "dlpUnlockMethod": 0,
                "enableDLP": false,
                "dlpEnableClientKeys": false,
                "dlpMinFileAgeMins": 5,
                "dlpRMProperties": {
                    "enableRmDLP": false,
                    "dlpRmNow": false,
                    "dlpRmOfflineDays": 30
                }
            },
            "firewallConfiguration": {
                "configureFirewallSettings": false,
                "isTrivialConfig": false,
                "reachMeVia": {
                    "reachMeViaSelected": false
                },
                "fwTrivialConfig": {
                    "firewallTrivialDetailsCS": {
                        "networkType": 1,
                        "connectionType": 1,
                        "proxyEntity": {
                            "clientName": "NO CLIENT",
                            "displayName": "NO CLIENT",
                            "clientId": 1
                        }
                    },
                    "firewallTrivialDetailsMA": {
                        "networkType": 1,
                        "connectionType": 1,
                        "proxyEntity": {
                            "clientName": "NO CLIENT",
                            "displayName": "NO CLIENT",
                            "clientId": 1
                        }
                    }
                },
                "firewallOptions": {
                    "isRoamingClient": false,
                    "extendedProperties": "\u003cApp_FirewallExtendedProperties configureAutomatically=\"1\" defaultOutgoingProtocol=\"0\" /\u003e",
                    "tunnelconnectionPort": 8403,
                    "foreceSSL": false,
                    "tunnelInitSeconds": 30,
                    "lockdown": false,
                    "bindOpenPortsOnly": false,
                    "isDMZ": false,
                    "keepAliveSeconds": 300,
                    "tppm": [
                        {}
                    ]
                }
            },
            "clientRegionInfo": {
                "geoLocation": {
                    "latitude": "40.300320",
                    "longitude": "-74.081970"
                }
            },
            "deDuplicationProperties": {
                "performClientSideDeduplication": true,
                "enableHighLatencyOptimization": false,
                "cacheBufferSize": 1024,
                "maxCacheDb": 4096,
                "clientSideDeduplication": 0,
                "enableVariableContentAlignment": false,
                "enableClientSideDiskCache": false
            },
            "spWebServerProperties": {
                "enableOnlineSearch": false,
                "spWebServerUserPassword": {}
            },
            "activityControl": {
                "EnableDataRecovery": true,
                "EnableDataManagement": true,
                "EnableOnlineContentIndex": true
            },
            "advancedClientProperties": {
                "slaCopyFallenBehindDays": 0,
                "rpoMinutes": 0,
                "mailServerRole": 0,
                "rtoMinutes": 0,
                "slaCopyRedundancy": 0,
                "excludeFromSLA": false
            },
            "dm2CacheDir": {
                "path": "C:\\Program Files\\Commvault\\ContentStore\\iDataAgent\\JobResults\\DM2CacheDir",
                "userAccount": {
                    "userName": ""
                }
            },
            "rightManagementServiceProperties": {
                "SMTPAddressOfTheRMSSuperUser": "",
                "decryptRMSDocumentDuringContentIndexing": false,
                "smtpAddressOfRMSSuperUser": "",
                "rmsCredentials": {
                    "password": "",
                    "userName": ""
                }
            },
            "clientActivityControl": {
                "activityControlOptions": [
                    {
                        "activityType": 1,
                        "enableAfterADelay": false,
                        "enableActivityType": true
                    },
                    {
                        "activityType": 2,
                        "enableAfterADelay": false,
                        "enableActivityType": true
                    },
                    {
                        "activityType": 512,
                        "enableAfterADelay": false,
                        "enableActivityType": true
                    },
                    {
                        "activityType": 16,
                        "enableAfterADelay": false,
                        "enableActivityType": true
                    }
                ]
            },
            "jobThrottleSettings": {
                "isJobThrottleEnabledAtCS": 0,
                "isJobThrottleEnabled": 0,
                "dataThreshold": 1,
                "excludeImmidiateJobs": 0,
                "logThreshold": 1
            },
            "webSearchServer": {
                "hostName": "carbonWinCS1.testlab.commvault.com",
                "clientId": 2
            },
            "emailWebAppProperties": {
                "enableEmailWebApp": false,
                "exchangeAdminSmtpAddress": "",
                "exchangeAdministratorAccount": {
                    "userName": ""
                }
            }
        },
        "clientReadiness": {
            "DRStatus": "Ready.",
            "readinessStatus": "Ready.\n",
            "onlineTime": {
                "timeValue": "1564737475"
            },
            "ccrTime": {
                "timeValue": "1564737475"
            },
            "offlineTime": {
                "timeValue": "0"
            }
        },
        "client": {
            "displayName": "carbonwincs1",
            "ClockSkewInSeconds": -3,
            "clientDescription": "",
            "installDirectory": "C:\\Program Files\\Commvault\\ContentStore",
            "timezoneSetByUser": false,
            "evmgrcPort": 0,
            "cvdPort": 8400,
            "jobResulsDir": {
                "path": "C:\\Program Files\\Commvault\\ContentStore\\iDataAgent\\JobResults",
                "userAccount": {
                    "userName": ""
                }
            },
            "origCommCell": {
                "commCellId": 0
            },
            "osInfo": {
                "Type": "Windows",
                "SubType": "Server",
                "osId": 210,
                "OsDisplayInfo": {
                    "ProcessorType": "WinX64",
                    "OSName": "Windows Server 2012 R2 Datacenter"
                }
            },
            "clientEntity": {
                "hostName": "carbonWinCS1.testlab.commvault.com",
                "clientId": 2,
                "clientName": "carbonwincs1",
                "commCellName": "carbonWinCS1.testlab.commvault.com",
                "clientGUID": "B3EF24F4-2FAB-42DA-9D42-135D696C86A1"
            },
            "versionInfo": {
                "UpdateStatus": 2,
                "version": "ServicePack:16,AAdditional Updates:,SP16-HotFix-910,SP16-HotFix-911,SP16-HotFix-912",
                "GalaxyRelease": {
                    "ReleaseString": "11"
                },
                "PatchStatus": [
                    {
                        "BaselineUpdates": "SP16 (HPK4)",
                        "BaselineStatus": 2,
                        "packageInfo": {
                            "packageId": 1,
                            "packageName": "File System Core"
                        }
                    }
                ]
            },
            "TimeZone": {
                "TimeZoneID": 64,
                "TimeZoneName": "(UTC-08:00) Pacific Time (US \u0026 Canada)"
            }
        },
        "clientGroups": [
            {
                "clientGroupId": 1,
                "clientGroupName": "Infrastructure"
            },
            {
                "clientGroupId": 3,
                "clientGroupName": "Media Agents"
            }
        ],
        "AdvancedFeatures": [
            {
                "LicenseName": "Server File System",
                "LicenseId": 1
            }
        ],
        "ActivePhysicalNode": {
            "hostName": "carbonWinCS1.testlab.commvault.com",
            "clientId": 2,
            "clientName": "carbonwincs1"
        }
    }
}
#>
function PrepareUpdateClientTaskBodyJson ([PSCustomObject] $ClientDetail) {

    try {
        $createTaskReq = [ordered] @{ }

        $processingInstructionInfo = [ordered]@{ }
        $locale = @{ }
        $locale.Add('_type_', 66)
        $locale.Add('localeId', 0)
        $formatFlags = @{ }
        $formatFlags.Add('skipIdToNameConversion', $True)
        $user = @{ }
        $user.Add('_type_', 13)
        $user.Add('userName', '')
        $user.Add('userId', 1)
        $processingInstructionInfo.Add('locale', $locale)
        $processingInstructionInfo.Add('formatFlags', $formatFlags)
        $processingInstructionInfo.Add('user', $user)

        $createTaskReq.Add('processinginstructioninfo', $processingInstructionInfo)
        $createTaskReq.Add('clientDetail', $ClientDetail)

        $body = $createTaskReq | ConvertTo-Json -Depth 20
        return @{ 'body' = $body }
    }
    catch {
        throw $_
    }
}


<# PrepareAddClientTaskBodyJson
{  
    "taskInfo":{  
        "associations":[  
            {  
            "commCellId":2
            }
        ],
        "task":{  
            "taskType":1,
            "initiatedFrom":1,
            "taskFlags":{  
            "disabled":false
            }
        },
        "subTasks":[  
            {  
            "subTask":{  
                "subTaskType":1,
                "operationType":4026
            },
            "options":{  
                "adminOpts":{  
                    "clientInstallOption":{  
                        "reuseADCredentials":false,
                        "installOSType":0,
                        "discoveryType":0,
                        "installerOption":{  
                        "requestType":0,
                        "Operationtype":0,
                        "CommServeHostName":"vsavccs",
                        "RemoteClient":false,
                        "installFlags":{  
                            "allowMultipleInstances":true,
                            "restoreOnlyAgents":false,
                            "killBrowserProcesses":true,
                            "install32Base":false,
                            "disableOSFirewall":false,
                            "stopOracleServices":false,
                            "skipClientsOfCS":false,
                            "addToFirewallExclusion":true,
                            "ignoreJobsRunning":false,
                            "forceReboot":false,
                            "overrideClientInfo":true,
                            "firewallInstall":{  
                                "enableFirewallConfig":false,
                                "firewallConnectionType":0,
                                "portNumber":0
                            }
                        },
                        "User":{  
                            "userName":"admin",
                            "userId":1
                        },
                        "clientComposition":[  
                            {  
                                "packageDeliveryOption":0,
                                "overrideSoftwareCache":false,
                                "components":{  
                                    "commonInfo":{  
                                    "globalFilters":2
                                    },
                                    "fileSystem":{  
                                    "configureForLaptopBackups":false
                                    },
                                    "componentInfo":[  
                                    {  
                                        "osType":"Windows",
                                        "ComponentId":703
                                    }
                                    ]
                                },
                                "clientInfo":{  
                                    "client":{  
                                    "evmgrcPort":0,
                                    "cvdPort":0
                                    }
                                }
                            }
                        ]
                        },
                        "clientDetails":[  
                        {  
                            "clientEntity":{  
                                "clientName":"172.24.19.0",
                                "commCellId":2
                            }
                        }
                        ],
                        "clientAuthForJob":{  
                        "password":"YnVpbGRlciExMg==",
                        "userName":"Administrator"
                        }
                    },
                    "updateOption":{  
                        "rebootClient":true
                    }
                }
            }
            }
        ]
    }
}
#>
function PrepareAddClientTaskBodyJson ($PrepInputs) {

    try {
        #taskInfo
        $taskInfo = [ordered] @{}

        #Associations
        [System.Collections.ArrayList] $associations_arr = @()
        $assocations_items = [ordered] @{}
        $assocations_items.Add('commCellId', $PrepInputs.CommcellId)
        $null = $associations_arr.Add($assocations_items)

        #task
        $task = [ordered] @{}
        $task.Add('taskType',1)
        $task.Add('initiatedFrom',1)
        $taskFlags = [ordered] @{}
        $taskFlags.Add('disabled', $False)
        $task.Add('taskFlags', $taskFlags)
        
        #Subtasks
        [System.Collections.ArrayList] $subTasks_arr = @()
        $subTasks_dic = [ordered] @{}
        $subTask = [ordered] @{}
        $subTask.Add('subTaskType', 1)
        $subTask.Add('operationType', 4026)
        $subTasks_dic.Add('subTask', $subTask)

        #Options
        $options = [ordered] @{}
        $adminOpts = [ordered] @{}
        $clientInstallOption = [ordered] @{}
        $clientInstallOption.Add('reuseADCredentials', $False)
        $clientInstallOption.Add('installOSType', 0)
        $clientInstallOption.Add('discoveryType', 0)

        $installerOption = [ordered] @{}
        $installerOption.Add('requestType', 0)
        $installerOption.Add('Operationtype', 0)
        $installerOption.Add('CommServeHostName', $PrepInputs.CommServName) #update this
        $installerOption.Add('RemoteClient', $False)

        $installFlags = [ordered] @{}
        $installFlags.Add('allowMultipleInstances', $True)
        $installFlags.Add('restoreOnlyAgents', $False)
        $installFlags.Add('killBrowserProcesses', $True)
        $installFlags.Add('install32Base', $False)
        $installFlags.Add('disableOSFirewall', $False)
        $installFlags.Add('stopOracleServices', $False)
        $installFlags.Add('skipClientsOfCS', $False)
        $installFlags.Add('addToFirewallExclusion', $True)
        $installFlags.Add('forceReboot', $False)
        $installFlags.Add('overrideClientInfo', $True)
        $firewallnstall = [ordered] @{}
        $firewallnstall.Add('enableFirewallConfig', $False)
        $firewallnstall.Add('firewallConnectionType', 0)
        $firewallnstall.Add('portNumber', 0)
        $installFlags.Add('firewallInstall', $firewallnstall)
        $installerOption.Add('installFlags', $installFlags)

        $user = [ordered] @{}
        $user.Add('userName', $PrepInputs.Commcelluser) #update this
        $user.Add('userId', 1)
        $installerOption.Add('User', $user)

        [System.Collections.ArrayList] $clientComposition_arr = @()
        $clientComposition_dic = [ordered] @{}
        $clientComposition_dic.Add('packageDeliveryOption', 0)
        $clientComposition_dic.Add('overrideSoftwareCache', $False)
        $components = [ordered] @{}
        $commonInfo = [ordered] @{}
        $commonInfo.Add('globalFilters', 2)
        $components.Add('commonInfo', $commonInfo)
        $filesystem = [ordered] @{}
        $filesystem.Add('configureForLaptopBackups', $False)
        $components.Add('fileSystem', $filesystem)
        $componentInfo = [ordered] @{}
        
        [System.Collections.ArrayList] $componentInfo_arr = @()
        $componentInfo.Add('osType', $PrepInputs.OS) #update
        $componentInfo.Add('ComponentId', [int] $PrepInputs.ComponentId) #update
        $null = $componentInfo_arr.Add($componentInfo)
        $components.Add('componentInfo', $componentInfo_arr)
        $clientComposition_dic.Add('components', $components)
        $clientInfo = [ordered] @{}
        $client = [ordered] @{}
        $client.Add('evmgrcPort',0)
        $client.Add('cvdPort',0)
        $clientInfo.Add('client', $client)
        $clientComposition_dic.Add('clientInfo', $clientInfo)
        $null = $clientComposition_arr.Add( $clientComposition_dic)
        $installerOption.Add('clientComposition', $clientComposition_arr)

        $clientInstallOption.Add('installerOption', $installerOption)

        [System.Collections.ArrayList] $clientDetails_arr = @()
        $clientDetails_dic = [ordered] @{}
        $clientEntity = [ordered] @{}
        $clientEntity.Add('clientName', $PrepInputs.ClientName) #update
        $clientEntity.Add('commCellId', $PrepInputs.CommcellId)
        $clientDetails_dic.Add('clientEntity', $clientEntity)
        $null = $clientDetails_arr.Add($clientDetails_dic)
        
        $clientInstallOption.Add('clientDetails', $clientDetails_arr)

        $clientAuthForJob = [ordered] @{}
        $clientAuthForJob.Add('password', $PrepInputs.ClientPwd) #update
        $clientAuthForJob.Add('userName', $PrepInputs.ClientUser) #update

        $clientInstallOption.Add('clientAuthForJob', $clientAuthForJob)

        $adminOpts.Add('clientInstallOption', $clientInstallOption)

        $updateOption = [ordered] @{}
        $updateOption.Add('rebootClient', $True) #update

        $adminOpts.Add('updateOption', $updateOption)

        $options.Add('adminOpts', $adminOpts)

        $subTasks_dic.Add('options', $options)
        $null = $subTasks_arr.Add($subTasks_dic)

        $taskInfo.Add('associations', $associations_arr)
        $taskInfo.Add('task', $task)
        $taskInfo.Add('subTasks', $subTasks_arr)

        $taskInfo_dic = [ordered] @{}
        $taskInfo_dic.Add('taskInfo', $taskInfo)

        $body = ($taskInfo_dic | ConvertTo-Json -Depth 20)
        Write-Output @{'body' = $body}
    }
    catch {
        throw $_
    }
}
