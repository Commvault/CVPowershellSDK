#
# Module 'Commvault.CommCell'
#
# Generated by: Commvault
#
# Generated on: 5/22/2019
#

using module 'Commvault.TypeDefinitions'

Set-StrictMode -Version latest


function Get-CVVersionInfo {
<#
.SYNOPSIS
    Method to retrieve the current version, service pack level, and time zone settings on the CommServe.

.DESCRIPTION
    Method to retrieve the current version, service pack level, and time zone settings on the CommServe.

.PARAMETER None

.EXAMPLE
    Get-CVVersionInfo
    
.OUTPUTS
    Outputs [PSCustomObject] containing CommServe configuration data.

.NOTES
    Author: Gary Stoops
    Company: Commvault
#>
    [CmdletBinding()]
    [OutputType([PSCustomObject])]
    param()
    
    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
            $endpointSave = $sessionObj.requestProps.endpoint
        }
        catch {
            throw $_
        }
    }

    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"

        try {
            $sessionObj.requestProps.endpoint = $endpointSave

            $body = ''
            $headerObj = Get-CVRESTHeader $sessionObj
            $payload = @{ }
            $payload.Add('headerObject', $headerObj)
            $payload.Add('body', $body)
            $validate = $null

            $response = Submit-CVRESTRequest $payload $validate

            if ($response.IsValid) {
                Write-Output $response.Content
            }
            else {
                Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): unable to retrieve CommServe version information"
            }
        }
        catch {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"
    }
}
    
    
function Get-CVAlert {
<#
.SYNOPSIS
    Method to retrieve the list of alerts from the CommServe.

.DESCRIPTION
    Method to retrieve the list of alerts from the CommServe.
    This method is implemented with Powershell paging support.

.PARAMETER First
    Get alerts with paging support -First 20 (20 per page).

.PARAMETER Skip
    Get alerts with paging support -First 20 -Skip 5 (20 per page, skip first 5 pages).

.PARAMETER IncludeTotalCount
    Include total count of result record set.

.EXAMPLE
    Get-CVAlert
    
.EXAMPLE
    Get-CVAlert -IncludeTotalCount -First 5 -Skip 0 (5 per page, skip none)

.OUTPUTS
    Outputs [PSCustomObject] containing CommServe alert data.

.NOTES
    Author: Gary Stoops
    Company: Commvault
#>
    [CmdletBinding(SupportsPaging = $True)]
    [OutputType([PSCustomObject])]
    param()
    
    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
            $endpointSave = $sessionObj.requestProps.endpoint
        }
        catch {
            throw $_
        }
    }

    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"

        try {
            $sessionObj.requestProps.endpoint = $endpointSave

            $body = ''
            $headerObj = Get-CVRESTHeader $sessionObj
            $payload = @{ }
            $payload.Add('headerObject', $headerObj)
            $payload.Add('body', $body)
            $validate = 'AlertList'

            $response = Submit-CVRESTRequest $payload $validate

            if ($response.IsValid) {
                $pagingObj = ValidatePagingParameters $PSCmdlet.PagingParameters $response.Content.AlertList.Length
                if ($pagingObj.paging) {
                    $curPage = $pagingObj.startPage + 1

                    if ($pagingObj.startPage -eq 0) { $index = 0 }
                    else { $index = ($pagingObj.startPage * $pagingObj.pageSize) }

                    for (; $index -lt $response.Content.AlertList.Length; $index++) {
                        Write-Output $response.Content.AlertList[$index]

                        if ($index -eq $response.Content.AlertList.Length - 1) {
                            break
                        }
                        elseif ($index -eq (($curPage * $pagingObj.pageSize) - 1)) {
                            $curPage++
                            Read-Host '[Enter] for next page'
                        }
                    }
                }
                elseif (-not $pagingObj.badParams) {
                    foreach ($alert in $response.Content.AlertList) {
                        Write-Output $alert
                    }
                }
            }
            else {
                Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): alert list empty"
            }
        }
        catch {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"

        try {
            if ($PSCmdlet.PagingParameters.IncludeTotalCount) {
                [double] $accuracy = 1.0
                $PSCmdlet.PagingParameters.NewTotalCount($response.Content.AlertList.Length, $accuracy)
            }
        }
        catch {
            throw $_
        }
    }
}
        
        
function Get-CVClient {
<#
.SYNOPSIS
    Method to retrieve the list of clients or detailed client properties from the CommServe.

.DESCRIPTION
    If the Name parameter is not provided, this method will output a list of clients from the CommServe.
    If the Name parameter is provided, a default subset of client properties will be output for the specified client. 
    
.PARAMETER Name
    Get detail properties for client specified by Name.

.PARAMETER Id
    Get detail properties for client specified by Id.

.PARAMETER AdditionalSettings
    Retrieves additional setting properties for each client in the list.

.PARAMETER AllProperties
    Retrieves all properties for the specified client.

.PARAMETER Version
    Retrieves package version properties for the specified client.

.PARAMETER TimeZone
    Retrieves timezone properties for the specified client.

.EXAMPLE
    Get-CVClient 

.EXAMPLE
	Get-CVClient -Name ProdTest1

.EXAMPLE
    Get-CVClient -Name ProdTest1 -AllProperties

.EXAMPLE
	Get-CVClient -Id 2

.EXAMPLE
	Get-CVClient -Id 2 -AllProperties

.EXAMPLE
    Get-CVClient -Name ProdTest1 -AllProperties | Select-Object -ExpandProperty client
    
.EXAMPLE
    Get-CVClient -Name ProdTest1 -AllProperties | Select-Object -ExpandProperty client | Select-Object jobResulsDir
    
.EXAMPLE
    Get-CVClient -Name ProdTest1 -Version -TimeZone 
    
.EXAMPLE
    Get-CVClient -AdditionalSettings
    
.EXAMPLE
    Get-CVClient -Name SNOWSQL1 -AdditionalSettings
    
.EXAMPLE
    Get-CVClient -Name ProdTest1 | Get-CVSubclient
    
.EXAMPLE
    Get-CVClient | Get-CVSubclient
    
.OUTPUTS
    Outputs [PSCustomObject] containing list of CommServe clients or client properties.

.NOTES
    Author: Gary Stoops
    Company: Commvault
#>
    [Alias('Get-CVClientProps')]
    [Alias('Get-CVClientAdditionalSettings')]
    [CmdletBinding(DefaultParameterSetName = 'Default')]
    [OutputType([PSCustomObject])]
    param(
        [Alias('Client')]
        [Parameter(Mandatory = $False, ParameterSetName = 'ByName')]
        [ValidateNotNullorEmpty()]
        [String] $Name,

        [Alias('ClientId')]
        [Parameter(Mandatory = $False, ParameterSetName = 'ById')]
        [ValidateNotNullorEmpty()]
        [Int32] $Id,

        [Switch] $AdditionalSettings,
        [Switch] $Version,
        [Switch] $TimeZone,
        [Switch] $AllProperties
    )
    
    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            if ($PSCmdlet.ParameterSetName -eq 'ById' -and $AllProperties.IsPresent) {
                $sessionObj = Get-CVSessionDetail 'GetClientProperties'
            }
            else {
                $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
            }

            $endpointSave = $sessionObj.requestProps.endpoint

            if ($PSCmdlet.ParameterSetName -eq 'ByName' -or
                $PSCmdlet.ParameterSetName -eq 'ById' ) {
                $foundClient = $False
            }
            else {
                $foundClient = $null
            }
        }
        catch {
            throw $_
        }
    }
    
    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"

        try {
            $sessionObj.requestProps.endpoint = $endpointSave

            if ($PSCmdlet.ParameterSetName -eq 'ById' -and $AllProperties.IsPresent) {
                $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{clientId}', $Id)
                $headerObj = Get-CVRESTHeader $sessionObj
                $body = ''
                $payload = @{ }
                $payload.Add('headerObject', $headerObj)
                $payload.Add('body', $body)
                $validate = 'clientProperties'
    
                $response = Submit-CVRESTRequest $payload $validate
    
                if ($response.IsValid) {
                    Write-Output $response.Content.clientProperties
                }
            }
            else {
                $headerObj = Get-CVRESTHeader $sessionObj
                $body = ''
                $payload = @{ }
                $payload.Add('headerObject', $headerObj)
                $payload.Add('body', $body)
                $validate = 'clientProperties'
    
                $response = Submit-CVRESTRequest $payload $validate
    
                $clientList = @{ }
    
                if ($response.IsValid) {
                    foreach ($clientProp in $response.Content.clientProperties) {
                        if ($PSCmdlet.ParameterSetName -eq 'ByName') {
                            if ($clientProp.client.clientEntity.clientName -eq $Name) {
                                $foundClient = $True
                            }
                        }
                        elseif ($PSCmdlet.ParameterSetName -eq 'ById') {
                            if ($clientProp.client.clientEntity.clientId -eq $Id) {
                                $foundClient = $True
                            }
                        }

                        if ($null -eq $foundClient -or $foundClient -eq $True) {
                            $clientSubProp = @{ }
                            $clientSubProp.Add('clientId', $clientProp.client.clientEntity.clientId)
                            $clientSubProp.Add('clientName', $clientProp.client.clientEntity.clientName)
                            $clientSubProp.Add('clienthostName', $clientProp.client.clientEntity.hostName)
                            $clientSubProp.Add('type', $clientProp.client.clientEntity._type_)
                            $clientSubProp.Add('clientIdGUID', $clientProp.client.clientEntity.clientGUID)
                            $clientSubProp.Add('cvdPort', $clientProp.client.cvdPort)
                           
                            if ($AdditionalSettings) {
                                $clientSubProp.Add('AdditionalSettings', (GetClientAdditionalSettings -ClientId $clientProp.client.clientEntity.clientId))
                            }
        
                            $clientList.Add($clientProp.client.clientEntity.clientName, $clientSubProp)
                        }
    
                        if ($foundClient -eq $True) {
                            break
                        }
                    }
                }
    
                if ($clientList.Count -eq 0) {
                    if ($PSCmdlet.ParameterSetName -eq 'ByName') {
                        Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): client not found having name [$Name]"
                    }
                    elseif ($PSCmdlet.ParameterSetName -eq 'ById') {
                        Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): client not found having id [$Id]"
                    }
                    else {
                        Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): no clients not found"
                    }
                }
                else {
                    foreach ($key in $clientList.Keys) {
                        $client = $clientList[$key]
                        if ($AllProperties -or $Version -or $TimeZone) {
                            $propertiesObj = GetClientProperties -ClientObject $client
                            if ($propertiesObj.IsValid) {
                                if ($AllProperties) {
                                    Write-Output $propertiesObj.Content.clientProperties
                                }
                                else {
                                    if ($Version) {
                                        $client.Add('Version', $propertiesObj.Content.clientProperties[0].client.versionInfo)
                                    }
                                    if ($TimeZone) {
                                        $client.Add('TimeZone', $propertiesObj.Content.clientProperties[0].client.TimeZone)
                                    }
                                    Write-Output $client
                                }
                            }
                        }
                        else {
                            Write-Output $client
                        }
                    }
                }
            }
        }
        catch {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"
    }
}


function Get-CVClientLicense {
<#
.SYNOPSIS
    Method to get licenses for a client.
.DESCRIPTION
    Method to get licenses for a client.
.PARAMETER Name
    Get licenses on client specified by Name.
.PARAMETER Id
    Get licenses on client specified by Id.
.EXAMPLE
    Get-CVClientLicences -Name 'carbonwincs1'
.OUTPUTS
    [PsCustomObject] containing details of the license and the plaform type
.NOTES
    Author: Craig Tolley
    Based on API Documentation at https://documentation.commvault.com/commvault/v11/article?p=47685.htm
#>
    [CmdletBinding(DefaultParameterSetName = 'ByName')]
    [OutputType([PSCustomObject])]
    param(
        [Alias('Client')]
        [Parameter(Mandatory = $True, ParameterSetName = 'ByName', ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [String] $Name,

        [Alias('ClientId')]
        [Parameter(Mandatory = $True, ParameterSetName = 'ById', ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [Int32] $Id
    )
    
    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
            $endpointSave = $sessionObj.requestProps.endpoint
        }
        catch {
            throw $_
        }
    }
    
    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"

        try {
            $sessionObj.requestProps.endpoint = $endpointSave

            if ($PSCmdlet.ParameterSetName -eq 'ByName') {
                $clientObj = (Get-CVClient -Name $Name)
                if ($null -ne $clientObj) {
                    $Id = $clientObj.clientId
                }
                else {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): client not found having name [$Name]"
                    return
                }
            }

            $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{clientId}', $Id)
            $headerObj = Get-CVRESTHeader $sessionObj

            $body = ''
            $payload = @{ }
            $payload.Add('headerObject', $headerObj)
            $payload.Add('body', $body)
            $validate = 'licensesInfo'
    
            $response = Submit-CVRESTRequest $payload $validate
    
            if ($response.IsValid) {
                Write-Output $response.Content.licensesInfo
            }
            
            else {
                Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): license information not found for client Id [$Id]"
            }

        }
        catch {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"
    }
}


function Revoke-CVClientLicense {
<#
.SYNOPSIS
    Method to release licenses from a client.
.DESCRIPTION
    Method to release licenses from a client.
.PARAMETER Name
    Release licenses on client specified by Name.
.PARAMETER Id
    Release licenses on client specified by Id.
.PARAMETER LicensesToRelease
    Collection of licenses to release. Details of licenses and format can be found from running Get-CVClientLicense
.PARAMETER Force
    Switch to Force override of default 'WhatIf' confirmation behavior.
.EXAMPLE
    $licenses = Get-CVClientLicences -Name 'carbonwincs1'
    Revoke-CvClientLicenses -Name 'carbonwincs1' -LicensesToRelease $licenses
.PARAMETER Force
    Switch to Force override of default 'WhatIf' confirmation behavior.
.OUTPUTS
    Outputs errorMessage and errorCode. Error code 0 is success.
.NOTES
    Author: Craig Tolley
    Based on API Documentation at https://documentation.commvault.com/commvault/v11/article?p=92013.htm
#>
    [CmdletBinding(DefaultParameterSetName = 'ByName', SupportsShouldProcess = $True, ConfirmImpact = 'High')]
    Param (
        [Alias('Client')]
        [Parameter(Mandatory = $True, ParameterSetName = 'ByName', ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [String] $Name,

        [Alias('ClientId')]
        [Parameter(Mandatory = $True, ParameterSetName = 'ById', ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [Int32] $Id,

        [Parameter(Mandatory = $True, ParameterSetName = 'ByName')]
        [Parameter(Mandatory = $True, ParameterSetName = 'ById')]
        [System.Object] $LicensesToRelease,

        [switch]$Force
    )

    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
            $endpointSave = $sessionObj.requestProps.endpoint
        }
        catch {
            throw $_
        }
    }

    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"

        try {
            $sessionObj.requestProps.endpoint = $endpointSave
            
            if ($PSCmdlet.ParameterSetName -eq 'ById' ) {
                $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{clientId}', $Id) 
            }
            else {
                $clientObj = Get-CVClient -Name $Name
                if ($null -eq $clientObj) { 
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): client not found having name [$Name]"
                    return
                }
                $Id = $clientObj.clientId
            }

            <#
            {
                "isClientLevelOperation": true,
                "licensesInfo": [{
                "platformType": 1,
                "license": {
                    "appType": 33,
                    "licenseName": "Server File System - Windows File System"
                }
                }],
                "clientEntity": {
                "clientId": "client001"
                }
            }
            #>

            $body = @{}

            $client = @{}
            $client.Add('clientId', $Id)
            $body.Add('clientEntity', $client)
            
            $licensesinfos = @()
            ForEach ($l in $LicensesToRelease) {
                $licenseinfo = @{}
                $licenseinfo.Add("platformType",$LicensesToRelease.platformType)
                        
                $license = @{}
                $license.Add("appType",$l.license.appType)
                $license.Add("licenseName",$l.license.licenseName)
                $licenseinfo.Add("license",$license)
                
                $licensesinfos += $licenseinfo
            }
            
            $body.Add("licensesInfo",$licensesinfos)
            $body = ($body | ConvertTo-Json -Depth 10)

            $headerObj = Get-CVRESTHeader $sessionObj
            $payload = @{ }
            $payload.Add('headerObject', $headerObj)
            $payload.Add('body', $body)
            $validate = 'errorCode'
            $body
            if ($PSCmdlet.ParameterSetName -eq 'ById' ) {
                if ($Force -or $PSCmdlet.ShouldProcess($Id)) {
                    $response = Submit-CVRESTRequest $payload $validate
                }
                else {
                    $response = Submit-CVRESTRequest $payload $validate -DryRun
                }
            }
            else {
                if ($Force -or $PSCmdlet.ShouldProcess($clientObj.clientName)) {
                    $response = Submit-CVRESTRequest $payload $validate
                }
                else {
                    $response = Submit-CVRESTRequest $payload $validate -DryRun
                }
            }

            if ($response.IsValid) {
                Write-Output $response.Content
            }
            else {
                if ($PSCmdlet.ParameterSetName -eq 'ById' ) {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): release client license request failed for client id[$Id]"
                }
                else {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): release client license request failed for client name [$($clientObj.clientName)]"
                }
            }
        }
        catch {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"
    }
}


function Get-CVClientGroup {
<#
.SYNOPSIS
    Method to retrieve client groups from the CommServe.

.DESCRIPTION
    Method to retrieve client groups or a single specified group from the CommServe.
    
.PARAMETER Name
    Get a client group by Name.

.PARAMETER AllProperties
    Get detail properties for each client group.

.EXAMPLE
    Get-CVClientGroup
    
.EXAMPLE
    Get-CVClientGroup -Name Snow-Test
    
.EXAMPLE
	Get-CVClientGroup -Name Snow-Test -AllProperties

.EXAMPLE
    Get-CVClientGroup -Name Snow-Test -AllProperties | Select-Object -ExpandProperty firewallConfiguration
    
.EXAMPLE
    Get-CVClientGroup -Name Snow-Test -AllProperties | Select-Object -ExpandProperty firewallConfiguration | Select-Object -ExpandProperty firewallOptions
    
.OUTPUTS
    Outputs [PSCustomObject] containing client group properties.

.NOTES
    Author: Gary Stoops
    Company: Commvault
#>
    [Alias('Get-CVClientGroupProps')]
    [CmdletBinding(DefaultParameterSetName = 'Default')]
    [OutputType([PSCustomObject])]
    param(
        [Alias('ClientGroupName')]
        [Parameter(Mandatory = $False, ParameterSetName = 'ByName')]
        [ValidateNotNullorEmpty()]
        [String] $Name,

        [Switch] $AllProperties
    )

    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
            $endpointSave = $sessionObj.requestProps.endpoint
        }
        catch {
            throw $_
        }
    }
    
    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"

        try {
            $sessionObj.requestProps.endpoint = $endpointSave

            $headerObj = Get-CVRESTHeader $sessionObj
            $body = ''
            $payload = @{ }
            $payload.Add('headerObject', $headerObj)
            $payload.Add('body', $body)
            $validate = 'groups'

            $response = Submit-CVRESTRequest $payload $validate

            $foundGroup = $False

            if ($response.IsValid) {
                foreach ($group in $response.Content.groups) {
                    if ($PSCmdlet.ParameterSetName -eq 'ByName') {
                        if ($Name -eq $group.name) {
                            $foundGroup = $True
                            if ($AllProperties) {
                                Write-Output (GetClientGroupProperties -GroupObject $group)
                            }
                            else {
                                Write-Output $group
                            }
                        }
                    }
                    else {
                        if ($AllProperties) {
                            Write-Output (GetClientGroupProperties -GroupObject $group)
                        }
                        else {
                            Write-Output $group
                        }
                    }
                }
                if ($PSCmdlet.ParameterSetName -eq 'ByName' -and -not $foundGroup) {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): client group not found having name [$Name]"                
                }
            }
            else {
                Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): no client groups found"                
            }
        }
        catch {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"
    }
}


function Get-CVSubclient {
<#
.SYNOPSIS
    Method to retrieve the list of subclients or a named subclient for a given client from the CommServe.

.DESCRIPTION
    Method to retrieve the list of subclients or a named subclient for a given client from the CommServe.
    
.PARAMETER ClientName
    Get list of subclient properties for ClientName.

.PARAMETER Name
    Get properties for the subclient specified by Name.

.PARAMETER AllProperties
    Retrieves all properties for subclients.

.EXAMPLE
    Get-CVSubclient

.EXAMPLE
    Get-CVSubclient -ClientName clientName

.EXAMPLE
    Get-CVSubclient -ClientName clientName -Name subclientName

.EXAMPLE
    Get-CVSubclient -ClientName clientName -Name subclientName -AllProperties

.EXAMPLE
    Get-CVClient -Name clientName | Get-CVSubclient -AllProperties | Select-Object -ExpandProperty subClientProperties | Select-Object -ExpandProperty fsSubClientProp

.OUTPUTS
    Outputs [PSCustomObject] all subclients of the specified client, or the specified single subclient.

.NOTES
    Author: Gary Stoops
    Company: Commvault
#>
    [Alias('Get-CVSubclientProps')]
    [CmdletBinding(DefaultParameterSetName = 'ByClientName')]
    [OutputType([PSCustomObject])]
    param(
        [Alias('SubclientName')]
        [Parameter(Mandatory = $False)]
        [ValidateNotNullorEmpty()]
        [String] $Name,

        [Parameter(Mandatory = $False)]
        [ValidateNotNullorEmpty()]
        [Int32] $Id,

        [Parameter(Mandatory = $True, ParameterSetName = 'ByClientName')]
        [ValidateNotNullorEmpty()]
        [String] $ClientName,

        [Parameter(Mandatory = $True, ParameterSetName = 'ByClientObject', ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [System.Object] $ClientObject,

        [Parameter(Mandatory = $False)]
        [Switch] $AllProperties
    )

    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
            $endpointSave = $sessionObj.requestProps.endpoint
            $processCount = 0
        }
        catch {
            throw $_
        }
    }

    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"

        try {
            $sessionObj.requestProps.endpoint = $endpointSave

            if ($PSCmdlet.ParameterSetName -eq 'ByClientName') {
                $clientObj = Get-CVClient -Name $ClientName
                if ($null -ne $clientObj) { 
                    $ClientObject = $clientObj
                }
                else {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): client not found having name [$ClientName]"
                    return
                }
            }

            $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{clientId}', $ClientObject.clientId)

            $headerObj = Get-CVRESTHeader $sessionObj
            $body = ''
            $payload = @{ }
            $payload.Add('headerObject', $headerObj)
            $payload.Add('body', $body)
            $validate = 'subClientProperties'

            $response = Submit-CVRESTRequest $payload $validate
    
            if ($response.IsValid) {
                foreach ($subclient in $response.Content.subClientProperties.subClientEntity) {
                    if (-not [String]::IsNullOrEmpty($Name)) {
                        if ($subclient.subclientName -eq $Name) {
                            $processCount++
                            if ($AllProperties) {
                                Write-Output (GetSubclientProperties -SubclientObject $subclient)
                            }
                            else {
                                Write-Output $subclient
                            }
                            break
                        }
                    }
                    elseif ($Id -gt 0) {
                        if ($subclient.subclientId -eq $Id) {
                            $processCount++
                            if ($AllProperties) {
                                Write-Output (GetSubclientProperties -SubclientObject $subclient)
                            }
                            else {
                                Write-Output $subclient
                            }
                            break
                        }
                    }
                    else {
                        $processCount++
                        if ($AllProperties) {
                            Write-Output (GetSubclientProperties -SubclientObject $subclient)
                        }
                        else {
                            Write-Output $subclient
                        }
                    }
                }
            }
            
            if ($PSCmdlet.ParameterSetName -eq 'ByClientObject') {
                if ($processCount -eq 0) {
                    if (-not [String]::IsNullOrEmpty($Name)) {
                        Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): subclient not found having name [$Name] for client [$($ClientObject.clientName)]"
                    }
                    elseif ($Id -gt 0) {
                        Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): subclient not found having id [$Id] for client [$($ClientObject.clientName)]"
                    }
                    else {
                        Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): no subclients found for client [$($ClientObject.clientName)]"
                    }
                }
                else {
                    $processCount = 0
                }
            }
        }
        catch {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"

        try {
            if ($PSCmdlet.ParameterSetName -ne 'ByClientObject' -and $processCount -eq 0) {
                if (-not [String]::IsNullOrEmpty($Name)) {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): subclient not found having name [$Name]"
                }
                elseif ($Id -gt 0) {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): subclient not found having id [$Id]"
                }
                else {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): no subclients found"
                }
            }
        }
        catch {
            throw $_
        }
    }
}


function Set-CVClientGroup {
<#
.SYNOPSIS
    Method to set client group properties.

.DESCRIPTION
    Method to set client group properties.

.PARAMETER Name
    Set properties on client group specified by Name.

.PARAMETER Properties
    Piped Properties set.

.PARAMETER Force
    Switch to Force override of default 'WhatIf' confirmation behavior.

.EXAMPLE
    1. Get current props: $props = Get-CVClientGroup -Name 'Media Agents'
    2. Modify props: $props.description = 'Selects Clients which have media agents installed' etc.
    3. Set props: $props | Set-CVClientGroup -Name 'Media Agents'

.OUTPUTS
    Outputs [PSCustomObject] containing job submission result.

.NOTES
    Author: Gary Stoops
    Company: Commvault
#>
    [CmdletBinding(SupportsShouldProcess = $True, ConfirmImpact = 'High')]
    param(
        [Alias('ClientGroupName')]
        [Parameter(Mandatory = $True)]
        [ValidateNotNullorEmpty()]
        [String] $Name,

        [Alias('ClientGroupProps')]
        [Parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [System.Object] $Properties,

        [Switch] $Force
    )

    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
            $endpointSave = $sessionObj.requestProps.endpoint
        }
        catch {
            throw $_
        }
    }

    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"

        try {
            $sessionObj.requestProps.endpoint = $endpointSave
            
            $clientGroupObj = Get-CVClientGroup -Name $Name
            if ($null -eq $clientGroupObj) { 
                Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): client group not found having name [$Name]"
                return
            }

            $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{clientGroupId}', $clientGroupObj.Id) 

            <#
            {
                "clientGroupOperationType": 2,
                "clientGroupDetail": {
                    "description": "client computer group description modified",
                    "claQuota": 8,
                    "clientGroup": {
                        "clientGroupName": "clientGroupName"
                    }
                }
            }
            #>
            $clientGroup = @{}
            $clientGroup.Add('clientGroupName', $clientGroupObj.name)

            $body = @{}
            $body.Add('clientGroupOperationType', 2)
            $body.Add('clientGroupDetail', $Properties)
            $body.Add('clientGroup', $clientGroup)
            $body = ($body | ConvertTo-Json -Depth 10)
            
            $payload = @{ }
            $headerObj = Get-CVRESTHeader $sessionObj
            $payload.Add('headerObject', $headerObj)
            $payload.Add('body', $body)
            $validate = 'errorMessage'

            if ($Force -or $PSCmdlet.ShouldProcess($clientGroupObj.Name)) {
                $response = Submit-CVRESTRequest $payload $validate
            }
            else {
                $response = Submit-CVRESTRequest $payload $validate -DryRun
            }

            if ($response.IsValid) {
                Write-Output $response.Content
            }
            else {
                Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): set client group properties request failed for group [$($clientGroupObj.Name)]"
            }
        }
        catch {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"
    }
}


function Set-CVClient {
<#
.SYNOPSIS
    Method to set client properties.

.DESCRIPTION
    Method to set client properties.

.PARAMETER Name
    Set properties on client specified by Name.

.PARAMETER Id
    Set properties on client specified by Id.

.PARAMETER Properties
    Piped-in Properties set. 

.PARAMETER Force
    Switch to Force override of default 'WhatIf' confirmation behavior.

.EXAMPLE
    $clientProps = Get-CVClient -Name 'carbonwincs1' -AllProperties
    PS C:\>$clientProps.client.displayName='carbonwincs1-1'
    PS C:\>$clientProps.client.clientDescription = 'carbonwincs1-1 description modified with REST API Post request'
    PS C:\>$clientProps.client | Set-CVClient -Name 'carbonwincs1' -Force

.EXAMPLE
    $clientId = (Get-CVVirtualMachine -Name INSIELVM-92-pl).client.clientId
    PS C:\>$clientProps = Get-CVClient -Id $clientId -AllProperties
    PS C:\>$clientProps.client.displayName='INSIELVM-92-pl'
    PS C:\>$clientProps.client.clientDescription = 'INSIELVM-92-pl description modified with REST API Post request'
    PS C:\>$clientProps.client | Set-CVClient -Id $clientId

.OUTPUTS
    Outputs [PSCustomObject] containing job submission result.

.NOTES
    Author: Gary Stoops
    Company: Commvault
#>
    [Alias('Set-CVClientProps')]
    [CmdletBinding(DefaultParameterSetName = 'ByName', SupportsShouldProcess = $True, ConfirmImpact = 'High')]
    [OutputType([PSCustomObject])]
    param(
        [Alias('ClientName')]
        [Parameter(Mandatory = $True, ParameterSetName = 'ByName')]
        [ValidateNotNullorEmpty()]
        [String] $Name,

        [Alias('ClientId')]
        [Parameter(Mandatory = $True, ParameterSetName = 'ById')]
        [ValidateNotNullorEmpty()]
        [Int32] $Id,

        [Alias('ClientProps')]
        [Parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [System.Object] $Properties,

        [Switch] $Force
    )

    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
            $endpointSave = $sessionObj.requestProps.endpoint
        }
        catch {
            throw $_
        }
    }

    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"

        try {
            $sessionObj.requestProps.endpoint = $endpointSave
            
            if ($PSCmdlet.ParameterSetName -eq 'ById' ) {
                $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{clientId}', $Id) 
            }
            else {
                $clientObj = Get-CVClient -Name $Name
                if ($null -eq $clientObj) { 
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): client not found having name [$Name]"
                    return
                }
                $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{clientId}', $clientObj.clientId) 
            }

            <#
            {
                "clientProperties": {
                    "client": {
                        "clientDescription": "client-level description modified with REST API Post request"
                    }
                },
                "association": {
                    "entity": [
                        {
                            "clientName": "clientName"
                        }
                    ]
                }
            }
            #>
            $client = @{}
            $client.Add('client', $Properties)
            #$entity = @{}
            #$entity.Add('clientName', $clientObj.clientName)
            #[System.Collections.ArrayList] $entity_arr = @()
            #$null = $entity_arr.Add($entity)
            #$association = @{ }
            #$association.Add('entity', $entity_arr)
    
            $body = @{}
            $body.Add('clientProperties', $client)
            #$body.Add('association', $association)
            $body = ($body | ConvertTo-Json -Depth 10)

            $headerObj = Get-CVRESTHeader $sessionObj
            $payload = @{ }
            $payload.Add('headerObject', $headerObj)
            $payload.Add('body', $body)
            $validate = 'response'

            if ($PSCmdlet.ParameterSetName -eq 'ById' ) {
                if ($Force -or $PSCmdlet.ShouldProcess($Id)) {
                    $response = Submit-CVRESTRequest $payload $validate
                }
                else {
                    $response = Submit-CVRESTRequest $payload $validate -DryRun
                }
            }
            else {
                if ($Force -or $PSCmdlet.ShouldProcess($clientObj.clientName)) {
                    $response = Submit-CVRESTRequest $payload $validate
                }
                else {
                    $response = Submit-CVRESTRequest $payload $validate -DryRun
                }
            }

            if ($response.IsValid) {
                Write-Output $response.Content
            }
            else {
                if ($PSCmdlet.ParameterSetName -eq 'ById' ) {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): set client properties request failed for group [$Id]"
                }
                else {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): set client properties request failed for group [$($clientObj.clientName)]"
                }
            }
        }
        catch {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"
    }
}


function Enable-CVClientActivity {
<#
.SYNOPSIS
    Method to enable activity types on the specified client.

.DESCRIPTION
    Allows enable any of the following activity types:

        Backup
        Restore
        AuxiliaryCopy
        DisasterRecoveryBackup
        ArchivePruning
        MediaRecylce
        SyntheticFull
        AllActivity
        Schedule
        OnlineContentIndexing
        OfflineContentIndexing

    The current status of the client activity controls can be found using: 
        (Get-CVClient -Name "carbonwincs1" -AllProperties).clientProps.clientActivityControl.activityControlOptions

.PARAMETER Name
    Enable activity on client specified by Name.

.PARAMETER Id
    Enable activity on client specified by Id.

.PARAMETER ActivityType
    Set of activities that should be enabled

.PARAMETER Force
    Switch to Force override of default 'WhatIf' confirmation behavior.

.EXAMPLE
    Enable the Backup and Archive Pruning activities on the client called carbonwincs1

        Enable-CVClientActivity -Name carbonwincs1 -ActivityType ArchivePruning, Backup

.EXAMPLE
    Enable all activities on the client called carbonwincs1

        Enable-CVClientActivity -Name carbonwincs1

.EXAMPLE
    $clientId = (Get-CVClient -Name carbonwincs1).client.clientId
    Enable-CVClientActivity -Id $clientId -ActivityType ArchivePruning, Backup

.EXAMPLE
    Enable backup activity on the client called carbonwincs1, using the activityType enum value

        Enable-CVClientActivity -Name carbonwincs1 -ActivityType 1

.OUTPUTS
    Outputs [PSCustomObject] containing job submission result.

.NOTES
    Author: Craig Tolley
#>
    [CmdletBinding(DefaultParameterSetName = 'ByName', SupportsShouldProcess = $True, ConfirmImpact = 'High')]
    [OutputType([PSCustomObject])]
    param(
        [Alias('ClientName')]
        [Parameter(Mandatory = $True, ParameterSetName = 'ByName', ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [String] $Name,

        [Alias('ClientId')]
        [Parameter(Mandatory = $True, ParameterSetName = 'ById', ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [Int32] $Id,

        [ValidateNotNullorEmpty()]
        [CvActivityType[]]$ActivityType = [CVActivityType]::AllActivity,

        [Switch] $Force
    )

    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
            $endpointSave = $sessionObj.requestProps.endpoint
        }
        catch {
            throw $_
        }
    }

    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"

        try {
            $sessionObj.requestProps.endpoint = $endpointSave
            
            if ($PSCmdlet.ParameterSetName -eq 'ById' ) {
                $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{clientId}', $Id) 
            }
            else {
                $clientObj = Get-CVClient -Name $Name
                if ($null -eq $clientObj) { 
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): client not found having name [$Name]"
                    return
                }
                $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{clientId}', $clientObj.clientId) 
            }

            <# Request JSON format:
            {
                "clientProperties": {
                    "clientProps": {
                        "clientActivityControl": {
                            "activityControlOptions": [
                                {
                                    "activityType": 1,
                                    "enableAfterADelay": false,
                                    "enableActivityType": true
                                }
                            ]
                        }
                    }
                }
            }
            #>
            
            $ActivityControlOptionsCol = @()
            ForEach ($actType in $ActivityType) {
                $activityControlOptions = @{}
                $activityControlOptions.Add("activityType",$actType.value__)
                $activityControlOptions.Add("enableActivityType",$true)
                $activityControlOptions.Add("enableAfterADelay",$false)
                $ActivityControlOptionsCol += $activityControlOptions
            }

            $clientActivityControl = @{}
            $clientActivityControl.Add('activityControlOptions', $ActivityControlOptionsCol)
    
            $clientProps = @{}
            $clientProps.Add('clientActivityControl', $clientActivityControl)

            $clientProperties = @{}
            $clientProperties.Add("clientProps",$clientProps)

            $body = @{}
            $body.Add("clientProperties",$clientProperties)
            $body = ($body | ConvertTo-Json -Depth 10)

            $headerObj = Get-CVRESTHeader $sessionObj
            $payload = @{ }
            $payload.Add('headerObject', $headerObj)
            $payload.Add('body', $body)

            $validate = 'response'

            if ($PSCmdlet.ParameterSetName -eq 'ById' ) {
                if ($Force -or $PSCmdlet.ShouldProcess($Id)) {
                    $response = Submit-CVRESTRequest $payload $validate
                }
                else {
                    $response = Submit-CVRESTRequest $payload $validate -DryRun
                }
            }
            else {
                if ($Force -or $PSCmdlet.ShouldProcess($clientObj.clientName)) {
                    $response = Submit-CVRESTRequest $payload $validate
                }
                else {
                    $response = Submit-CVRESTRequest $payload $validate -DryRun
                }
            }

            if ($response.IsValid) {
                Write-Output $response.Content
            }
            else {
                if ($PSCmdlet.ParameterSetName -eq 'ById' ) {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): disable client activity request failed for client [$Id]"
                }
                else {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): disable client activity request failed for client [$($clientObj.clientName)]"
                }
            }
        }
        catch {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"
    }
}


function Disable-CVClientActivity {
<#
.SYNOPSIS
    Method to disable activity types on the specified client.

.DESCRIPTION
    Allows disabling any of the following activity types:

        Backup
        Restore
        AuxiliaryCopy
        DisasterRecoveryBackup
        ArchivePruning
        MediaRecylce
        SyntheticFull
        AllActivity
        Schedule
        OnlineContentIndexing
        OfflineContentIndexing

.PARAMETER Name
    Disable activity on client specified by Name.

.PARAMETER Id
    Disable activity on client specified by Id.

.PARAMETER ActivityType
    Set of activities that should be disabled

.PARAMETER Force
    Switch to Force override of default 'WhatIf' confirmation behavior.

.EXAMPLE
    Disable the Backup and Archive Pruning activities on the client called carbonwincs1

        Disable-CVClientActivity -Name carbonwincs1 -ActivityType ArchivePruning, Backup

.EXAMPLE
    Disable all activities on the client called carbonwincs1

        Disable-CVClientActivity -Name carbonwincs1

.EXAMPLE
    $clientId = (Get-CVClient -Name carbonwincs1).client.clientId
    Disable-CVClientActivity -Id $clientId -ActivityType ArchivePruning, Backup

.EXAMPLE
    Disable backup activity on the client called carbonwincs1, using the activityType enum value

        Disable-CVClientActivity -Name carbonwincs1 -ActivityType 1

.OUTPUTS
    Outputs [PSCustomObject] containing job submission result.

.NOTES
    Author: Craig Tolley
#>
    [CmdletBinding(DefaultParameterSetName = 'ByName', SupportsShouldProcess = $True, ConfirmImpact = 'High')]
    [OutputType([PSCustomObject])]
    param(
        [Alias('ClientName')]
        [Parameter(Mandatory = $True, ParameterSetName = 'ByName', ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [String] $Name,

        [Alias('ClientId')]
        [Parameter(Mandatory = $True, ParameterSetName = 'ById', ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [Int32] $Id,

        [ValidateNotNullorEmpty()]
        [CvActivityType[]]$ActivityType = [CVActivityType]::AllActivity,

        [Switch] $Force
    )

    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
            $endpointSave = $sessionObj.requestProps.endpoint
        }
        catch {
            throw $_
        }
    }

    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"

        try {
            $sessionObj.requestProps.endpoint = $endpointSave
            
            if ($PSCmdlet.ParameterSetName -eq 'ById' ) {
                $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{clientId}', $Id) 
            }
            else {
                $clientObj = Get-CVClient -Name $Name
                if ($null -eq $clientObj) { 
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): client not found having name [$Name]"
                    return
                }
                $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{clientId}', $clientObj.clientId) 
            }

            <# Request JSON format:
            {
                "clientProperties": {
                    "clientProps": {
                        "clientActivityControl": {
                            "activityControlOptions": [
                                {
                                    "activityType": 1,
                                    "enableAfterADelay": false,
                                    "enableActivityType": false
                                }
                            ]
                        }
                    }
                }
            }
            #>
            
            $ActivityControlOptionsCol = @()
            ForEach ($actType in $ActivityType) {
                $activityControlOptions = @{}
                $activityControlOptions.Add("activityType",$actType.value__)
                $activityControlOptions.Add("enableActivityType",$false)
                $activityControlOptions.Add("enableAfterADelay",$false)
                $ActivityControlOptionsCol += $activityControlOptions
            }

            $clientActivityControl = @{}
            $clientActivityControl.Add('activityControlOptions', $ActivityControlOptionsCol)
    
            $clientProps = @{}
            $clientProps.Add('clientActivityControl', $clientActivityControl)

            $clientProperties = @{}
            $clientProperties.Add("clientProps",$clientProps)

            $body = @{}
            $body.Add("clientProperties",$clientProperties)
            $body = ($body | ConvertTo-Json -Depth 10)

            $headerObj = Get-CVRESTHeader $sessionObj
            $payload = @{ }
            $payload.Add('headerObject', $headerObj)
            $payload.Add('body', $body)

            $validate = 'response'

            if ($PSCmdlet.ParameterSetName -eq 'ById' ) {
                if ($Force -or $PSCmdlet.ShouldProcess($Id)) {
                    $response = Submit-CVRESTRequest $payload $validate
                }
                else {
                    $response = Submit-CVRESTRequest $payload $validate -DryRun
                }
            }
            else {
                if ($Force -or $PSCmdlet.ShouldProcess($clientObj.clientName)) {
                    $response = Submit-CVRESTRequest $payload $validate
                }
                else {
                    $response = Submit-CVRESTRequest $payload $validate -DryRun
                }
            }

            if ($response.IsValid) {
                Write-Output $response.Content
            }
            else {
                if ($PSCmdlet.ParameterSetName -eq 'ById' ) {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): disable client activity request failed for client [$Id]"
                }
                else {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): disable client activity request failed for client [$($clientObj.clientName)]"
                }
            }
        }
        catch {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"
    }
}


function GetClientProperties ([System.Object] $ClientObject) {

    try {
        $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
        $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{clientId}', $ClientObject.clientId)

        $headerObj = Get-CVRESTHeader $sessionObj
        $body = ''
        $payload = @{ }
        $payload.Add('headerObject', $headerObj)
        $payload.Add('body', $body)
        $validate = 'clientProperties'

        $response = Submit-CVRESTRequest $payload $validate

        Write-Output $response
    }
    catch {
        throw $_
    }
}


function GetClientAdditionalSettings ([String] $ClientId) {

    try {
        $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
        $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{clientId}', $ClientId)

        $headerObj = Get-CVRESTHeader $sessionObj
        $body = ''
        $payload = @{ }
        $payload.Add('headerObject', $headerObj)
        $payload.Add('body', $body)
        $validate = $null

        $response = Submit-CVRESTRequest $payload $validate

        if ($response.IsValid) {
            if ('regKeys' -in $response.Content.PSObject.Properties.Name) {
                    Write-Output $response.Content.regKeys
            }
            else { 
                Write-Output $response.Content
            }
        }
    }
    catch {
        throw $_
    }
}


function GetClientGroupProperties ([System.Object] $GroupObject) {

    try {
        $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
        $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{clientGroupId}', $GroupObject.Id) 

        $headerObj = Get-CVRESTHeader $sessionObj
        $body = ''
        $payload = @{ }
        $payload.Add('headerObject', $headerObj)
        $payload.Add('body', $body)
        $validate = 'clientGroupDetail'

        $response = Submit-CVRESTRequest $payload $validate
        
        if ($response.IsValid) {
            Write-Output $response.Content.clientGroupDetail
        }
    }
    catch {
        throw $_
    }
}


function GetSubclientProperties ([System.Object] $SubclientObject) {

    try {
        $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
        $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{subclientId}', $SubclientObject.subclientId)

        $headerObj = Get-CVRESTHeader $sessionObj
        $body = ''
        $payload = @{ }
        $payload.Add('headerObject', $headerObj)
        $payload.Add('body', $body)
        $validate = $null

        $response = Submit-CVRESTRequest $payload $validate

        if ($response.IsValid) {
            Write-Output $response.Content
        }
    }
    catch {
        throw $_
    }
}


# Internal use: takes $PSCmdlet.PagingParameters and returns a hashtable paging flag, page size, and page start index
function ValidatePagingParameters($PagingParameters, [UInt64] $TotalCount) {

    try {
        $pagingObj = @{ 'paging' = 0; 'pageSize' = $null; 'startPage' = $null; 'badParams' = $False }

        [UInt64] $PageSize = [Math]::Max($PagingParameters.First, 0)
        [UInt64] $StartPage = [Math]::Max($PagingParameters.Skip, 0)

        if ($PageSize -lt [Uint64]::MaxValue) { # MaxValue is system default
            if ($PageSize -gt 0 -and $PageSize -le $TotalCount) {
                if ($StartPage -lt ($TotalCount / $PageSize)) {
                    $pagingObj['paging'] = 1
                    $pagingObj['pageSize'] = $PageSize
                    $pagingObj['startPage'] = $StartPage
                }
                elseif ($StartPage -gt 0) {
                    $pagingObj['badParams'] = $True
                    Write-Warning -Message "$($MyInvocation.MyCommand): paging parameter -Skip [$StartPage] beyond end of record set"
                }
            }
            elseif ($PageSize -gt 0) {
                $pagingObj['badParams'] = $True
                Write-Warning -Message "$($MyInvocation.MyCommand): paging parameter -First [$PageSize] exceeds total record count"
            }
        }

        Write-Output $pagingObj
    }
    catch {
        throw $_
    }
}


function HasProperty($Object, $PropertyName)
{
    $PropertyName -in $Object.PSobject.Properties.Name
}