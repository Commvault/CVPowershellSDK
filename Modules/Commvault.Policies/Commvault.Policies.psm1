#
# Module 'Commvault.Policies'
#
# Generated by: Commvault
#
# Generated on: 5/22/2019
#

using module 'Commvault.TypeDefinitions'

Set-StrictMode -Version latest


function Get-CVSchedulePolicy {
<#
.SYNOPSIS
    Method to retrieve schedule policies from the CommServe.

.DESCRIPTION
    Method to retrieve schedule policies from the CommServe. Output can be filtered by client/subclient or by policy name or id.

.PARAMETER Name
    Filter output by policy Name.

.PARAMETER Id
    Filter output by policy Id.

.PARAMETER ClientName
    Filter output by ClientName associated with SubclientName.

.PARAMETER SubclientName
    Filter output by SubclientName.

.PARAMETER Scheduletype
    Filter by ScheduleType: DataProtection (default), AuxiliaryCopy, BackupCopy, OfflineContentIndexing, DDBVerification, ContentIndexing, Workflow.

.EXAMPLE
    Get-CVSchedulePolicy
    
.EXAMPLE
    Get-CVSchedulePolicy -Name AuditDB-3

.EXAMPLE
    Get-CVSchedulePolicy -Id 238

.EXAMPLE
    Get-CVSchedulePolicy -SubclientName AuditDB -ClientName carbonwincs1

.EXAMPLE
    Get-CVSchedulePolicy -ClientName carbonWinCS1 -SubclientName AuditDB | Format-List

.EXAMPLE
    Get-CVSchedulePolicy -ClientName carbonWinCS1 -SubclientName AuditDB | Select-Object -ExpandProperty associations

.EXAMPLE
    Get-CVSchedulePolicy -ClientName carbonWinCS1 -SubclientName AuditDB | Select-Object -ExpandProperty task

.EXAMPLE
    Get-CVSchedulePolicy -ClientName carbonWinCS1 -SubclientName AuditDB | Select-Object -ExpandProperty appGroup

.EXAMPLE
    Get-CVSchedulePolicy -ClientName carbonWinCS1 -SubclientName AuditDB | Select-Object -ExpandProperty subTasks

.OUTPUTS
    Outputs [PSCustomObject] containing schedule policy instances.

.NOTES
    Author: Gary Stoops
    Company: Commvault
#>
    [CmdletBinding(DefaultParameterSetName = 'Default')]
    [OutputType([PSCustomObject])]
    param(
        [Parameter(Mandatory = $True, ParameterSetName = 'BySubclient')]
        [ValidateNotNullorEmpty()]
        [String] $ClientName,

        [Parameter(Mandatory = $True, ParameterSetName = 'BySubclient')]
        [ValidateNotNullorEmpty()]
        [String] $SubclientName,

        [Parameter(Mandatory = $False, ParameterSetName = 'ByName')]
        [ValidateNotNullorEmpty()]
        [String] $Name,

        [Parameter(Mandatory = $False, ParameterSetName = 'ById')]
        [ValidateNotNullorEmpty()]
        [Int32] $Id,

        [Parameter(Mandatory = $False)]
        [CVSchedulePolicyType] $ScheduleType = 'DataProtection'
    )
    
    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
            $processCount = 0
        }
        catch {
            throw $_
        }
    }

    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"
    
        try {
            if ($PSCmdlet.ParameterSetName -eq 'BySubclient') {
                $subclientObj = Get-CVSubclient -Name $SubclientName -ClientName $ClientName
                if ($null -ne $subclientObj) { 
                    $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{subclientId}', $subclientObj.subclientId)
                }
                else {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): subclient not found having name [$SubclientName]"      
                    return
                }
            }

            # use of {scheduleType} param results in empty response body
            #$sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{scheduleType}', $ScheduleType.value__)
            $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{scheduleType}', $null)
            $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{subclientId}', $null)

            $headerObj = Get-CVRESTHeader $sessionObj
            $body = ''
            $payload = @{ }
            $payload.Add("headerObject", $headerObj)
            $payload.Add("body", $body)
            $validate = 'taskDetail'
                
            $response = Submit-CVRESTRequest $payload $validate

            if ($response.IsValid) {
                foreach ($policy in $response.Content.taskDetail) {
                    if ($PSCmdlet.ParameterSetName -eq 'ByName') {
                        if ($Name -ne $policy.task.taskName) { 
                            continue
                        }
                    }
                    elseif ($PSCmdlet.ParameterSetName -eq 'ById') {
                        if ($Id -ne $policy.task.taskId) { 
                            continue
                        }
                    }
    
                    $sessionObj = Get-CVSessionDetail 'GetSchedulePolicyDetails'
                    $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{schedulePolicyId}', $policy.task.taskId)

                    $headerObj = Get-CVRESTHeader $sessionObj
                    $payload.Clear()
                    $payload.Add("headerObject", $headerObj)
                    $payload.Add("body", $body)
                    $validate = 'taskInfo'
                        
                    $response = Submit-CVRESTRequest $payload $validate
        
                    if ($response.IsValid) {
                        Write-Output $response.Content.taskInfo 
                        $processCount++
                    }
                }
            }
        }
        catch {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"

        try {
            if ($processCount -eq 0) {
                if ($PSCmdlet.ParameterSetName -eq 'ByName') {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): policy not found having name [$Name]"
                }
                elseif ($PSCmdlet.ParameterSetName -eq 'ById') {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): policy not found having id [$Id]"
                }
                elseif ($PSCmdlet.ParameterSetName -eq 'BySubclient') {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): no policies found for subclient [$SubclientName]"
                }
                else {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): no policies found"
                }
            }
        }
        catch {
            throw $_
        }
    }
}
    
    
function Enable-CVSchedulePolicy {
<#
.SYNOPSIS
    Method to enable a schedule policy on the CommServe.

.DESCRIPTION
    Method to enable a schedule policy on the CommServe.

.PARAMETER Name
    Specify the schedule policy to be enabled by Name.

.PARAMETER Id
    Specify the schedule policy to be enabled by Id (taskId).

.PARAMETER ClientName
    Specify the ClientName associated with SubclientName.

.PARAMETER SubclientName
    Specify the SubclientName.

.PARAMETER PolicyObject
    Specify the schedule policy to be enabled by piping the PolicyObject.

.EXAMPLE
    Enable-CVSchedulePolicy (This will prompt for Name)
    
.EXAMPLE
    Enable-CVSchedulePolicy -Name AuditDB-SchedulePolicy

.EXAMPLE
    Enable-CVSchedulePolicy -Id 229

.EXAMPLE
    Enable-CVSchedulePolicy -ClientName carbonWinCS1 -SubclientName AuditDB (Enables all schedule policies associated with the subclient AuditDB)

.EXAMPLE
    Get-CVSchedulePolicy | Enable-CVSchedulePolicy (Enables all schedule policies on the CommServe)

.OUTPUTS
    Outputs [PSCustomObject] containing task submission result.

.NOTES
    Author: Gary Stoops
    Company: Commvault
#>
    [CmdletBinding(DefaultParameterSetName = 'ByPolicyName')]
    [OutputType([PSCustomObject])]
    param(
        [Parameter(Mandatory = $True, ParameterSetName = 'ByPolicyName')]
        [ValidateNotNullorEmpty()]
        [String] $Name,

        [Parameter(Mandatory = $True, ParameterSetName = 'ByPolicyId')]
        [ValidateNotNullorEmpty()]
        [Int32] $Id,

        [Parameter(Mandatory = $True, ParameterSetName = 'ByPolicyObject', ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [System.Object] $PolicyObject,

        [Parameter(Mandatory = $True, ParameterSetName = 'BySubclient')]
        [ValidateNotNullorEmpty()]
        [String] $ClientName,

        [Parameter(Mandatory = $True, ParameterSetName = 'BySubclient')]
        [ValidateNotNullorEmpty()]
        [String] $SubclientName
    )
    
    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
            $endpointSave = $sessionObj.requestProps.endpoint
        }
        catch {
            throw $_
        }
    }

    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"
    
        try {
            $policiesToProcess = @()

            if ($PSCmdlet.ParameterSetName -eq 'ByPolicyName') {
                $policyObj = Get-CVSchedulePolicy -Name $Name
                if ($null -ne $policyObj) {
                    $policiesToProcess += $policyObj
                }
                else {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): policy not found having name [$Name]"
                    return
                }
            }
            elseif ($PSCmdlet.ParameterSetName -eq 'ByPolicyId') {
                $policyObj = Get-CVSchedulePolicy -Id $Id
                if ($null -ne $policyObj) {
                    $policiesToProcess += $policyObj
                }
                else {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): policy not found having id [$Id]"
                    return
                }
            }
            elseif ($PSCmdlet.ParameterSetName -eq 'BySubclient') {
                $policyObjs = Get-CVSchedulePolicy -ClientName $ClientName -SubclientName $SubclientName
                foreach ($policyObj in $policyObjs) {
                    $policiesToProcess += $policyObj
                }
            }
            else { #ByPolicyObject
                $policiesToProcess += $PolicyObject
            }

            foreach ($policy in $policiesToProcess) {
                Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): ...enabling policy [$($policy.task.taskName)] taskId [$($policy.task.taskId)]"
                $sessionObj.requestProps.endpoint = $endpointSave

                $body = 'TaskId='
                $body += $policy.task.taskId

                $headerObj = Get-CVRESTHeader $sessionObj
                $payload = @{ }
                $payload.Add("headerObject", $headerObj)
                $payload.Add("body", $body)
                $validate = '<TMMsg_GenericResp errorCode="0"/>'
                    
                $response = Submit-CVRESTRequest $payload $validate
    
                if ($response.IsValid) {
                    Write-Output $response.Content
                }
                else {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): policy [$($policy.task.taskName)] taskId [$($policy.task.taskId)] was not enabled"
                }
            }
        }
        catch {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"
    }
}
            
            
function Disable-CVSchedulePolicy {
<#
.SYNOPSIS
    Method to disable a schedule policy on the CommServe.

.DESCRIPTION
    Method to disable a schedule policy on the CommServe.

.PARAMETER Name
    Specify the schedule policy to be disabled by Name.

.PARAMETER Id
    Specify the schedule policy to be disabled by Id (taskId).

.PARAMETER ClientName
    Specify the ClientName associated with SubclientName.

.PARAMETER SubclientName
    Specify the SubclientName.

.PARAMETER PolicyObject
    Specify the schedule policy to be disabled by piping the PolicyObject.

.EXAMPLE
    Disable-CVSchedulePolicy (This will prompt for Name)
    
.EXAMPLE
    Disable-CVSchedulePolicy -Name AuditDB-SchedulePolicy

.EXAMPLE
    Disable-CVSchedulePolicy -Id 229

.EXAMPLE
    Disable-CVSchedulePolicy -ClientName carbonWinCS1 -SubclientName AuditDB (Disables all schedule policies associated with the subclient AuditDB)

.EXAMPLE
    Get-CVSchedulePolicy | Disable-CVSchedulePolicy (Disables all schedule policies on the CommServe)

.OUTPUTS
    Outputs [PSCustomObject] containing task submission result.

.NOTES
    Author: Gary Stoops
    Company: Commvault
#>
    [CmdletBinding(DefaultParameterSetName = 'ByPolicyName')]
    [OutputType([PSCustomObject])]
    param(
        [Parameter(Mandatory = $True, ParameterSetName = 'ByPolicyName')]
        [ValidateNotNullorEmpty()]
        [String] $Name,

        [Parameter(Mandatory = $True, ParameterSetName = 'ByPolicyId')]
        [ValidateNotNullorEmpty()]
        [Int32] $Id,

        [Parameter(Mandatory = $True, ParameterSetName = 'ByPolicyObject', ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [System.Object] $PolicyObject,

        [Parameter(Mandatory = $True, ParameterSetName = 'BySubclient')]
        [ValidateNotNullorEmpty()]
        [String] $ClientName,

        [Parameter(Mandatory = $True, ParameterSetName = 'BySubclient')]
        [ValidateNotNullorEmpty()]
        [String] $SubclientName
    )
    
    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
            $endpointSave = $sessionObj.requestProps.endpoint
        }
        catch {
            throw $_
        }
    }

    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"
    
        try {
            $policiesToProcess = @()

            if ($PSCmdlet.ParameterSetName -eq 'ByPolicyName') {
                $policyObj = Get-CVSchedulePolicy -Name $Name
                if ($null -ne $policyObj) {
                    $policiesToProcess += $policyObj
                }
                else {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): policy not found having name [$Name]"
                    return
                }
            }
            elseif ($PSCmdlet.ParameterSetName -eq 'ByPolicyId') {
                $policyObj = Get-CVSchedulePolicy -Id $Id
                if ($null -ne $policyObj) {
                    $policiesToProcess += $policyObj
                }
                else {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): policy not found having id [$Id]"
                    return
                }
            }
            elseif ($PSCmdlet.ParameterSetName -eq 'BySubclient') {
                $policyObjs = Get-CVSchedulePolicy -ClientName $ClientName -SubclientName $SubclientName
                foreach ($policyObj in $policyObjs) {
                    $policiesToProcess += $policyObj
                }
            }
            else { #ByPolicyObject
                $policiesToProcess += $PolicyObject
            }

            foreach ($policy in $policiesToProcess) {
                Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): ...disabling policy [$($policy.task.taskName)] taskId [$($policy.task.taskId)]"
                $sessionObj.requestProps.endpoint = $endpointSave

                $body = 'TaskId='
                $body += $policy.task.taskId

                $headerObj = Get-CVRESTHeader $sessionObj
                $payload = @{ }
                $payload.Add("headerObject", $headerObj)
                $payload.Add("body", $body)
                $validate = '<TMMsg_GenericResp errorCode="0"/>'
                    
                $response = Submit-CVRESTRequest $payload $validate
    
                if ($response.IsValid) {
                    Write-Output $response.Content
                }
                else {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): policy [$($policy.task.taskName)] taskId [$($policy.task.taskId)] was not disabled"
                }
            }
        }
        catch {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"
    }
}
            
                
function Get-CVStoragePolicy {
<#
.SYNOPSIS
    Method to retrieve storage policies from the CommServe.

.DESCRIPTION
    Method to retrieve storage policies from the CommServe. Output can be filtered by media agent and policy Name.
    Note: detail information is

.PARAMETER Name
    Specify storage policy instances to be output by Name.

.PARAMETER MediaAgentName
    Specify storage policy instances to be output by MediaAgentName.

.PARAMETER MediaAgentObject
    Specify storage policy instances to be output pipeline input of MediaAgentObject.

.PARAMETER AllProperties
    Output AllProperties for each schedule policy.

.EXAMPLE
    Get-CVStoragePolicy
    
.EXAMPLE
    Get-CVStoragePolicy -AllProperties | Select-Object -ExpandProperty copy

.EXAMPLE
    Get-CVStoragePolicy -Name ACPLAN

.EXAMPLE
    Get-CVStoragePolicy -Name ACPLAN -MediaAgentName carbonwincs1 -AllProperties

.EXAMPLE
    Get-CVMediaAgent | Get-CVStoragePolicy

.EXAMPLE
    Get-CVMediaAgent | Get-CVStoragePolicy -Name ACPLAN

.OUTPUTS
    Outputs [PSCustomObject] containing storage policy instances.

.NOTES
    Author: Gary Stoops
    Company: Commvault
#>
[CmdletBinding(DefaultParameterSetName = 'Default')]
    [OutputType([PSCustomObject])]
    param(
        [Parameter(Mandatory = $False)]
        [ValidateNotNullorEmpty()]
        [String] $Name,
    
        [Parameter(Mandatory = $False, ParameterSetName = 'ByName')]
        [ValidateNotNullorEmpty()]
        [String] $MediaAgentName,
    
        [Parameter(Mandatory = $False, ParameterSetName = 'ByObject', ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [System.Object] $MediaAgentObject,

        [Parameter(Mandatory = $False)]
        [Switch] $AllProperties
    )
   
    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            if ($PSCmdlet.ParameterSetName -eq 'ByName' -or $PSCmdlet.ParameterSetName -eq 'ByObject') {
                $sessionObj = Get-CVSessionDetail 'GetMediaAgentStoragePolicies'
            }
            else {
                $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
            }
            $endpointSave = $sessionObj.requestProps.endpoint
            $outputCount = 0
        }
        catch {
            throw $_
        }
    }
    
    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"
    
        try {
            $sessionObj.requestProps.endpoint = $endpointSave

            if ($PSCmdlet.ParameterSetName -eq 'ByName') {
                $mediaAgentObj = Get-CVMediaAgent -Name $MediaAgentName
                if ($null -ne $mediaAgentObj) {
                    $MediaAgentObject = $mediaAgentObj
                }
                else {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): media agent not found having name [$MediaAgentName]"
                    return
                }
            }

            if ($PSCmdlet.ParameterSetName -eq 'ByName' -or $PSCmdlet.ParameterSetName -eq 'ByObject') {
                $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{mediaAgentId}', $MediaAgentObject.Id)
                $validate = 'storagePolicyInformationAssociatedToMA'
            }
            else {
                $validate = 'policies'
            }

            $headerObj = Get-CVRESTHeader $sessionObj
            $body = ''
            $payload = @{ }
            $payload.Add("headerObject", $headerObj)
            $payload.Add("body", $body)
                
            $response = Submit-CVRESTRequest $payload $validate

            if ($response.IsValid) {
                $policiesToProcess = @()
                if ($PSCmdlet.ParameterSetName -eq 'ByName' -or $PSCmdlet.ParameterSetName -eq 'ByObject') {
                    foreach ($policy in $response.Content.storagePolicyInformationAssociatedToMA) {
                        if (-not [String]::IsNullOrEmpty($Name)) {
                            if ($Name -eq $policy.storagePolicyAndCopy.storagePolicyName) {
                                $policiesToProcess += $policy
                            }
                        }
                        else {
                            $policiesToProcess += $policy
                        }
                    }
                }
                else {
                    foreach ($policy in $response.Content.policies) {
                        if (-not [String]::IsNullOrEmpty($Name)) {
                            if ($Name -eq $policy.storagePolicyName) {
                                $policiesToProcess += $policy
                            }
                        }
                        else {
                            $policiesToProcess += $policy
                        }
                    }
                }
                foreach ($policy in $policiesToProcess) {
                    if ($AllProperties) {
                        $sessionObj = Get-CVSessionDetail 'GetStoragePolicyDetails'

                        if ($PSCmdlet.ParameterSetName -eq 'ByName' -or $PSCmdlet.ParameterSetName -eq 'ByObject') {
                            $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{storagePolicyId}', $policy.storagePolicyAndCopy.storagePolicyId)
                        }
                        else {
                            $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{storagePolicyId}', $policy.storagePolicyId)
                        }

                        $headerObj = Get-CVRESTHeader $sessionObj
                        $payload.Clear()
                        $payload.Add("headerObject", $headerObj)
                        $payload.Add("body", $body)
                        $validate = 'storagePolicy'
                            
                        $response = Submit-CVRESTRequest $payload $validate
            
                        if ($response.IsValid) {
                            Write-Output $response.Content
                            $outputCount++
                        }
                        else {
                            Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): details not found for policy [$($policy.storagePolicyAndCopy.storagePolicyName)]"
                        }
                    }
                    else {
                        Write-Output $policy
                        $outputCount++
                    }
                }
            }
            elseif ($PSCmdlet.ParameterSetName -eq 'ByObject') {
                Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): no storage policies found for media agent [$($MediaAgentObject.Name)]"
            }
        }
        catch {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"

        try {
            if ($outputCount -eq 0) {
                if (-not [String]::IsNullOrEmpty($Name)) {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): storage policy not found having name [$Name]"
                }
                else {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): no storage policies found"
                }
            }
        }
        catch {
            throw $_
        }
    }
}