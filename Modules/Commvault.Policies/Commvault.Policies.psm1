#
# Module 'Commvault.Policies'
#
# Generated by: Commvault
#
# Generated on: 5/22/2019
#

using module 'Commvault.TypeDefinitions'

Set-StrictMode -Version latest


function Get-CVSchedulePolicy {
<#
.SYNOPSIS
    Method to retrieve schedule policies from the CommServe.

.DESCRIPTION
    Method to retrieve schedule policies from the CommServe. Output can be filtered by client/subclient or by policy name or id.

.PARAMETER Name
    Filter output by policy Name.

.PARAMETER Id
    Filter output by policy Id.

.PARAMETER ClientName
    Filter output by ClientName associated with SubclientName.

.PARAMETER SubclientName
    Filter output by SubclientName.

.PARAMETER Scheduletype
    Filter by ScheduleType: All (default), DataProtection, AuxiliaryCopy, BackupCopy, OfflineContentIndexing, DDBVerification, ContentIndexing, or Workflow.

.EXAMPLE
    Get-CVSchedulePolicy

.EXAMPLE
    Get-CVSchedulePolicy -ScheduleType All | Select-Object -ExpandProperty task

.EXAMPLE
    Get-CVSchedulePolicy -ScheduleType Workflow | Select-Object -ExpandProperty task

.EXAMPLE
    Get-CVSchedulePolicy -Name AuditDB-3

.EXAMPLE
    Get-CVSchedulePolicy -Id 238

.EXAMPLE
    Get-CVSchedulePolicy -SubclientName AuditDB -ClientName carbonwincs1

.EXAMPLE
    Get-CVSchedulePolicy -ClientName carbonWinCS1 -SubclientName AuditDB | Format-List

.EXAMPLE
    Get-CVSchedulePolicy -ClientName carbonWinCS1 -SubclientName AuditDB | Select-Object -ExpandProperty associations

.EXAMPLE
    Get-CVSchedulePolicy -ClientName carbonWinCS1 -SubclientName AuditDB | Select-Object -ExpandProperty task

.EXAMPLE
    Get-CVSchedulePolicy -ClientName carbonWinCS1 -SubclientName AuditDB | Select-Object -ExpandProperty appGroup

.EXAMPLE
    Get-CVSchedulePolicy -ClientName carbonWinCS1 -SubclientName AuditDB | Select-Object -ExpandProperty subTasks

.OUTPUTS
    Outputs [PSCustomObject] containing schedule policy instances.

.NOTES
    Author: Gary Stoops
    Company: Commvault
#>
    [CmdletBinding(DefaultParameterSetName = 'Default')]
    [OutputType([PSCustomObject])]
    param(
        [Parameter(Mandatory = $True, ParameterSetName = 'BySubclient')]
        [ValidateNotNullorEmpty()]
        [String] $ClientName,

        [Parameter(Mandatory = $True, ParameterSetName = 'BySubclient')]
        [ValidateNotNullorEmpty()]
        [String] $SubclientName,

        [Parameter(Mandatory = $False, ParameterSetName = 'ByName')]
        [ValidateNotNullorEmpty()]
        [String] $Name,

        [Parameter(Mandatory = $False, ParameterSetName = 'ById')]
        [ValidateNotNullorEmpty()]
        [Int32] $Id,

        [Parameter(Mandatory = $False)]
        [CVSchedulePolicyType] $ScheduleType = 'All'
    )
    
    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
            $processCount = 0
        }
        catch {
            throw $_
        }
    }

    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"
    
        try {
            if ($PSCmdlet.ParameterSetName -eq 'BySubclient') {
                $subclientObj = Get-CVSubclient -Name $SubclientName -ClientName $ClientName
                if ($null -ne $subclientObj) { 
                    $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{subclientId}', $subclientObj.subclientId)
                }
                else {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): subclient not found having name [$SubclientName]"      
                    return
                }
            }

            # API currently does not properly filter on scheduleType
            #$sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{scheduleType}', $ScheduleType.value__)
            $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{scheduleType}', $null)
            $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{subclientId}', $null)

            $headerObj = Get-CVRESTHeader $sessionObj
            $body = ''
            $payload = @{ }
            $payload.Add("headerObject", $headerObj)
            $payload.Add("body", $body)
            $validate = 'taskDetail'
                
            $response = Submit-CVRESTRequest $payload $validate

            if ($response.IsValid) {
                foreach ($policy in $response.Content.taskDetail) {
                    if ($ScheduleType -ne 'All' -and ($policy.task.policyType -ne $ScheduleType.value__)) { # API does not properly filter on scheduleType
                        continue
                    }

                    if ($PSCmdlet.ParameterSetName -eq 'ByName') {
                        if ($Name -ne $policy.task.taskName) { 
                            continue
                        }
                    }
                    elseif ($PSCmdlet.ParameterSetName -eq 'ById') {
                        if ($Id -ne $policy.task.taskId) { 
                            continue
                        }
                    }
    
                    $sessionObj = Get-CVSessionDetail 'GetSchedulePolicyDetails'
                    $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{schedulePolicyId}', $policy.task.taskId)

                    $headerObj = Get-CVRESTHeader $sessionObj
                    $payload.Clear()
                    $payload.Add("headerObject", $headerObj)
                    $payload.Add("body", $body)
                    $validate = 'taskInfo'
                        
                    $response = Submit-CVRESTRequest $payload $validate
        
                    if ($response.IsValid) {
                        Write-Output $response.Content.taskInfo
                        $processCount++
                    }
                }
            }
        }
        catch {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"

        try {
            if ($processCount -eq 0) {
                if ($PSCmdlet.ParameterSetName -eq 'ByName') {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): policy not found having name [$Name]"
                }
                elseif ($PSCmdlet.ParameterSetName -eq 'ById') {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): policy not found having id [$Id]"
                }
                elseif ($PSCmdlet.ParameterSetName -eq 'BySubclient') {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): no policies found for subclient [$SubclientName]"
                }
                else {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): no policies found"
                }
            }
        }
        catch {
            throw $_
        }
    }
}
    
    
function Enable-CVSchedulePolicy {
<#
.SYNOPSIS
    Method to enable a schedule policy on the CommServe.

.DESCRIPTION
    Method to enable a schedule policy on the CommServe.

.PARAMETER Name
    Specify the schedule policy to be enabled by Name.

.PARAMETER Id
    Specify the schedule policy to be enabled by Id (taskId).

.PARAMETER ClientName
    Specify the ClientName associated with SubclientName.

.PARAMETER SubclientName
    Specify the SubclientName.

.PARAMETER PolicyObject
    Specify the schedule policy to be enabled by piping the PolicyObject.

.EXAMPLE
    Enable-CVSchedulePolicy (This will prompt for Name)
    
.EXAMPLE
    Enable-CVSchedulePolicy -Name AuditDB-SchedulePolicy

.EXAMPLE
    Enable-CVSchedulePolicy -Id 229

.EXAMPLE
    Enable-CVSchedulePolicy -ClientName carbonWinCS1 -SubclientName AuditDB (Enables all schedule policies associated with the subclient AuditDB)

.EXAMPLE
    Get-CVSchedulePolicy | Enable-CVSchedulePolicy (Enables all schedule policies on the CommServe)

.OUTPUTS
    Outputs [PSCustomObject] containing task submission result.

.NOTES
    Author: Gary Stoops
    Company: Commvault
#>
    [CmdletBinding(DefaultParameterSetName = 'ByPolicyName')]
    [OutputType([PSCustomObject])]
    param(
        [Parameter(Mandatory = $True, ParameterSetName = 'ByPolicyName')]
        [ValidateNotNullorEmpty()]
        [String] $Name,

        [Parameter(Mandatory = $True, ParameterSetName = 'ByPolicyId')]
        [ValidateNotNullorEmpty()]
        [Int32] $Id,

        [Parameter(Mandatory = $True, ParameterSetName = 'ByPolicyObject', ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [System.Object] $PolicyObject,

        [Parameter(Mandatory = $True, ParameterSetName = 'BySubclient')]
        [ValidateNotNullorEmpty()]
        [String] $ClientName,

        [Parameter(Mandatory = $True, ParameterSetName = 'BySubclient')]
        [ValidateNotNullorEmpty()]
        [String] $SubclientName
    )
    
    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
            $endpointSave = $sessionObj.requestProps.endpoint
        }
        catch {
            throw $_
        }
    }

    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"
    
        try {
            $policiesToProcess = @()

            if ($PSCmdlet.ParameterSetName -eq 'ByPolicyName') {
                $policyObj = Get-CVSchedulePolicy -Name $Name
                if ($null -ne $policyObj) {
                    $policiesToProcess += $policyObj
                }
                else {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): policy not found having name [$Name]"
                    return
                }
            }
            elseif ($PSCmdlet.ParameterSetName -eq 'ByPolicyId') {
                $policyObj = Get-CVSchedulePolicy -Id $Id
                if ($null -ne $policyObj) {
                    $policiesToProcess += $policyObj
                }
                else {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): policy not found having id [$Id]"
                    return
                }
            }
            elseif ($PSCmdlet.ParameterSetName -eq 'BySubclient') {
                $policyObjs = Get-CVSchedulePolicy -ClientName $ClientName -SubclientName $SubclientName
                foreach ($policyObj in $policyObjs) {
                    $policiesToProcess += $policyObj
                }
            }
            else { #ByPolicyObject
                $policiesToProcess += $PolicyObject
            }

            foreach ($policy in $policiesToProcess) {
                Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): ...enabling policy [$($policy.task.taskName)] taskId [$($policy.task.taskId)]"
                $sessionObj.requestProps.endpoint = $endpointSave

                $body = 'TaskId='
                $body += $policy.task.taskId

                $headerObj = Get-CVRESTHeader $sessionObj
                $payload = @{ }
                $payload.Add("headerObject", $headerObj)
                $payload.Add("body", $body)
                $validate = '<TMMsg_GenericResp errorCode="0"/>'
                    
                $response = Submit-CVRESTRequest $payload $validate
    
                if ($response.IsValid) {
                    Write-Output $response.Content
                }
                else {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): policy [$($policy.task.taskName)] taskId [$($policy.task.taskId)] was not enabled"
                }
            }
        }
        catch {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"
    }
}
            
            
function Disable-CVSchedulePolicy {
<#
.SYNOPSIS
    Method to disable a schedule policy on the CommServe.

.DESCRIPTION
    Method to disable a schedule policy on the CommServe.

.PARAMETER Name
    Specify the schedule policy to be disabled by Name.

.PARAMETER Id
    Specify the schedule policy to be disabled by Id (taskId).

.PARAMETER ClientName
    Specify the ClientName associated with SubclientName.

.PARAMETER SubclientName
    Specify the SubclientName.

.PARAMETER PolicyObject
    Specify the schedule policy to be disabled by piping the PolicyObject.

.EXAMPLE
    Disable-CVSchedulePolicy (This will prompt for Name)
    
.EXAMPLE
    Disable-CVSchedulePolicy -Name AuditDB-SchedulePolicy

.EXAMPLE
    Disable-CVSchedulePolicy -Id 229

.EXAMPLE
    Disable-CVSchedulePolicy -ClientName carbonWinCS1 -SubclientName AuditDB (Disables all schedule policies associated with the subclient AuditDB)

.EXAMPLE
    Get-CVSchedulePolicy | Disable-CVSchedulePolicy (Disables all schedule policies on the CommServe)

.OUTPUTS
    Outputs [PSCustomObject] containing task submission result.

.NOTES
    Author: Gary Stoops
    Company: Commvault
#>
    [CmdletBinding(DefaultParameterSetName = 'ByPolicyName')]
    [OutputType([PSCustomObject])]
    param(
        [Parameter(Mandatory = $True, ParameterSetName = 'ByPolicyName')]
        [ValidateNotNullorEmpty()]
        [String] $Name,

        [Parameter(Mandatory = $True, ParameterSetName = 'ByPolicyId')]
        [ValidateNotNullorEmpty()]
        [Int32] $Id,

        [Parameter(Mandatory = $True, ParameterSetName = 'ByPolicyObject', ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [System.Object] $PolicyObject,

        [Parameter(Mandatory = $True, ParameterSetName = 'BySubclient')]
        [ValidateNotNullorEmpty()]
        [String] $ClientName,

        [Parameter(Mandatory = $True, ParameterSetName = 'BySubclient')]
        [ValidateNotNullorEmpty()]
        [String] $SubclientName
    )
    
    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
            $endpointSave = $sessionObj.requestProps.endpoint
        }
        catch {
            throw $_
        }
    }

    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"
    
        try {
            $policiesToProcess = @()

            if ($PSCmdlet.ParameterSetName -eq 'ByPolicyName') {
                $policyObj = Get-CVSchedulePolicy -Name $Name
                if ($null -ne $policyObj) {
                    $policiesToProcess += $policyObj
                }
                else {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): policy not found having name [$Name]"
                    return
                }
            }
            elseif ($PSCmdlet.ParameterSetName -eq 'ByPolicyId') {
                $policyObj = Get-CVSchedulePolicy -Id $Id
                if ($null -ne $policyObj) {
                    $policiesToProcess += $policyObj
                }
                else {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): policy not found having id [$Id]"
                    return
                }
            }
            elseif ($PSCmdlet.ParameterSetName -eq 'BySubclient') {
                $policyObjs = Get-CVSchedulePolicy -ClientName $ClientName -SubclientName $SubclientName
                foreach ($policyObj in $policyObjs) {
                    $policiesToProcess += $policyObj
                }
            }
            else { #ByPolicyObject
                $policiesToProcess += $PolicyObject
            }

            foreach ($policy in $policiesToProcess) {
                Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): ...disabling policy [$($policy.task.taskName)] taskId [$($policy.task.taskId)]"
                $sessionObj.requestProps.endpoint = $endpointSave

                $body = 'TaskId='
                $body += $policy.task.taskId

                $headerObj = Get-CVRESTHeader $sessionObj
                $payload = @{ }
                $payload.Add("headerObject", $headerObj)
                $payload.Add("body", $body)
                $validate = '<TMMsg_GenericResp errorCode="0"/>'
                    
                $response = Submit-CVRESTRequest $payload $validate
    
                if ($response.IsValid) {
                    Write-Output $response.Content
                }
                else {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): policy [$($policy.task.taskName)] taskId [$($policy.task.taskId)] was not disabled"
                }
            }
        }
        catch {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"
    }
}
            
                
function Get-CVStoragePolicy {
<#
.SYNOPSIS
    Method to retrieve storage policies from the CommServe.

.DESCRIPTION
    Method to retrieve storage policies from the CommServe. Output can be filtered by media agent and policy Name.
    Note: detail information is

.PARAMETER Name
    Specify storage policy instances to be output by Name.

.PARAMETER MediaAgentName
    Specify storage policy instances to be output by MediaAgentName.

.PARAMETER MediaAgentObject
    Specify storage policy instances to be output pipeline input of MediaAgentObject.

.PARAMETER AllProperties
    Output AllProperties for each schedule policy.

.EXAMPLE
    Get-CVStoragePolicy
    
.EXAMPLE
    Get-CVStoragePolicy -AllProperties | Select-Object -ExpandProperty copy

.EXAMPLE
    Get-CVStoragePolicy -Name ACPLAN

.EXAMPLE
    Get-CVStoragePolicy -Name ACPLAN -MediaAgentName carbonwincs1 -AllProperties

.EXAMPLE
    Get-CVMediaAgent | Get-CVStoragePolicy

.EXAMPLE
    Get-CVMediaAgent | Get-CVStoragePolicy -Name ACPLAN

.OUTPUTS
    Outputs [PSCustomObject] containing storage policy instances.

.NOTES
    Author: Gary Stoops
    Company: Commvault
#>
    [CmdletBinding(DefaultParameterSetName = 'Default')]
    [OutputType([PSCustomObject])]
    param(
        [Parameter(Mandatory = $False)]
        [ValidateNotNullorEmpty()]
        [String] $Name,
    
        [Parameter(Mandatory = $False, ParameterSetName = 'ByName')]
        [ValidateNotNullorEmpty()]
        [String] $MediaAgentName,
    
        [Parameter(Mandatory = $False, ParameterSetName = 'ByObject', ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [System.Object] $MediaAgentObject,

        [Parameter(Mandatory = $False)]
        [Switch] $AllProperties
    )
   
    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            if ($PSCmdlet.ParameterSetName -eq 'ByName' -or $PSCmdlet.ParameterSetName -eq 'ByObject') {
                $sessionObj = Get-CVSessionDetail 'GetMediaAgentStoragePolicies'
            }
            else {
                $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
            }
            $endpointSave = $sessionObj.requestProps.endpoint
            $outputCount = 0
        }
        catch {
            throw $_
        }
    }
    
    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"
    
        try {
            $sessionObj.requestProps.endpoint = $endpointSave

            if ($PSCmdlet.ParameterSetName -eq 'ByName') {
                $mediaAgentObj = Get-CVMediaAgent -Name $MediaAgentName
                if ($null -ne $mediaAgentObj) {
                    $MediaAgentObject = $mediaAgentObj
                }
                else {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): media agent not found having name [$MediaAgentName]"
                    return
                }
            }

            if ($PSCmdlet.ParameterSetName -eq 'ByName' -or $PSCmdlet.ParameterSetName -eq 'ByObject') {
                $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{mediaAgentId}', $MediaAgentObject.Id)
                $validate = 'storagePolicyInformationAssociatedToMA'
            }
            else {
                $validate = 'policies'
            }

            $headerObj = Get-CVRESTHeader $sessionObj
            $body = ''
            $payload = @{ }
            $payload.Add("headerObject", $headerObj)
            $payload.Add("body", $body)
                
            $response = Submit-CVRESTRequest $payload $validate

            if ($response.IsValid) {
                $policiesToProcess = @()
                if ($PSCmdlet.ParameterSetName -eq 'ByName' -or $PSCmdlet.ParameterSetName -eq 'ByObject') {
                    foreach ($policy in $response.Content.storagePolicyInformationAssociatedToMA) {
                        if (-not [String]::IsNullOrEmpty($Name)) {
                            if ($Name -eq $policy.storagePolicyAndCopy.storagePolicyName) {
                                $policiesToProcess += $policy
                            }
                        }
                        else {
                            $policiesToProcess += $policy
                        }
                    }
                }
                else {
                    foreach ($policy in $response.Content.policies) {
                        if (-not [String]::IsNullOrEmpty($Name)) {
                            if ($Name -eq $policy.storagePolicyName) {
                                $policiesToProcess += $policy
                            }
                        }
                        else {
                            $policiesToProcess += $policy
                        }
                    }
                }
                foreach ($policy in $policiesToProcess) {
                    if ($AllProperties) {
                        $sessionObj = Get-CVSessionDetail 'GetStoragePolicyDetail'

                        if ($PSCmdlet.ParameterSetName -eq 'ByName' -or $PSCmdlet.ParameterSetName -eq 'ByObject') {
                            $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{storagePolicyId}', $policy.storagePolicyAndCopy.storagePolicyId)
                        }
                        else {
                            $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{storagePolicyId}', $policy.storagePolicyId)
                        }

                        $headerObj = Get-CVRESTHeader $sessionObj
                        $payload.Clear()
                        $payload.Add("headerObject", $headerObj)
                        $payload.Add("body", $body)
                        $validate = 'storagePolicy'
                            
                        $response = Submit-CVRESTRequest $payload $validate
            
                        if ($response.IsValid) {
                            Write-Output $response.Content
                            $outputCount++
                        }
                        else {
                            Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): details not found for policy [$($policy.storagePolicyAndCopy.storagePolicyName)]"
                        }
                    }
                    else {
                        Write-Output $policy
                        $outputCount++
                    }
                }
            }
            elseif ($PSCmdlet.ParameterSetName -eq 'ByObject') {
                Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): no storage policies found for media agent [$($MediaAgentObject.Name)]"
            }
        }
        catch {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"

        try {
            if ($outputCount -eq 0) {
                if (-not [String]::IsNullOrEmpty($Name)) {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): storage policy not found having name [$Name]"
                }
                else {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): no storage policies found"
                }
            }
        }
        catch {
            throw $_
        }
    }
}


function Get-CVBlackoutWindow {
<#
.SYNOPSIS
    Method to retrieve blackout window rules from the CommServe.

.DESCRIPTION
    Method to retrieve blackout window rules from the CommServe. 
    Output can be filtered by rule Id, Name, CommcellId, ClientId, AppTypeId, InstanceId, BackupsetId, SubclientId, ClientgroupId, CompanyId, or SchedulePolicyId.

.PARAMETER Name
    Specify blackout window rules to be output by Name.

.PARAMETER Id
    Specify blackout window rule to be output by Id.

.PARAMETER CommcellId
    Specify blackout window rule subset by CommcellId (default = 2).

.PARAMETER ClientId
    Specify blackout window rule subset by ClientId.

.PARAMETER AppTypeId
    Specify blackout window rule subset by AppTypeId.

.PARAMETER InstanceId
    Specify blackout window rule subset by InstanceId.

.PARAMETER BackupsetId
    Specify blackout window rule subset by BackupsetId.

.PARAMETER SubclientId
    Specify blackout window rule subset by SubclientId.

.PARAMETER ClientgroupId
    Specify blackout window rule subset by ClientgroupId.

.PARAMETER CompanyId
    Specify blackout window rule subset by CompanyId.

.PARAMETER SchedulePolicyId
    Specify blackout window rule subset by SchedulePolicyId.

.EXAMPLE
    Get-CVBlackoutWindow

.EXAMPLE
    Get-CVBlackoutWindow -Name CommCell-BWR-1
    
.EXAMPLE
    Get-CVBlackoutWindow -Id 3

.EXAMPLE
    Get-CVBlackoutWindow -ClientgroupId 4
    
.EXAMPLE
    Get-CVBlackoutWindow -ClientId 2
    
.EXAMPLE
    Get-CVBlackoutWindow -AppTypeId 81
    
.EXAMPLE
    Get-CVBlackoutWindow -InstanceId 9
    
.OUTPUTS
    Outputs [PSCustomObject] containing blackout window rules.

.NOTES
    Author: Gary Stoops
    Company: Commvault
#>
    [CmdletBinding(DefaultParameterSetName = 'ByList')]
    [OutputType([PSCustomObject])]
    param(
        [Parameter(Mandatory = $False, ParameterSetName = 'ByName', ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [String] $Name,
    
        [Parameter(Mandatory = $False, ParameterSetName = 'ById', ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [Int32] $Id,

        [Parameter(Mandatory = $False, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [Int32] $CommcellId = 2,
        
        [Parameter(Mandatory = $False, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [Int32] $ClientId = 0,

        [Parameter(Mandatory = $False, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [Int32] $AppTypeId = 0,
        
        [Parameter(Mandatory = $False, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [Int32] $InstanceId = 0,

        [Parameter(Mandatory = $False, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [Int32] $BackupsetId = 0,
        
        [Parameter(Mandatory = $False, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [Int32] $SubclientId = 0,

        [Parameter(Mandatory = $False, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [Int32] $ClientgroupId = 0,
        
        [Parameter(Mandatory = $False, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [Int32] $CompanyId = 0,
        
        [Parameter(Mandatory = $False, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [Int32] $SchedulePolicyId = 0
    )
    
    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            if ($PSCmdlet.ParameterSetName -eq 'ById') {
                $sessionObj = Get-CVSessionDetail 'GetBlackoutWindowDetail'
            }
            else {
                $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
            }
            $endpointSave = $sessionObj.requestProps.endpoint
            $outputCount = 0
        }
        catch {
            throw $_
        }
    }
    
    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"
    
        try {
            $sessionObj.requestProps.endpoint = $endpointSave

            if ($PSCmdlet.ParameterSetName -eq 'ById') {
                $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{ruleId}', $Id)
            }
            else {
                $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{commcellId}', $CommcellId)
                $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{clientId}', $ClientId)
                $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{appTypeId}', $AppTypeId)
                $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{instanceId}', $InstanceId)
                $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{backupsetId}', $BackupsetId)
                $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{subclientId}', $SubclientId) 
                $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{clientgroupId}', $ClientgroupId)
                $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{companyId}', $CompanyId)
                $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{schedulePolicyId}', $SchedulePolicyId)
            }

            $validate = 'operationWindow'
            
            $headerObj = Get-CVRESTHeader $sessionObj
            $body = ''
            $payload = @{ }
            $payload.Add("headerObject", $headerObj)
            $payload.Add("body", $body)
                
            $response = Submit-CVRESTRequest $payload $validate

            if ($response.IsValid) {
                foreach ($rule in $response.Content.operationWindow) {
                    if ($PSCmdlet.ParameterSetName -eq 'ByName') {
                        if ($Name -eq $rule.name) {
                            Write-Output $rule
                            $outputCount++
                        }
                    }
                    else { # 'ByList'
                        Write-Output $rule
                        $outputCount++
                    }
                }
            }
        }
        catch {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"

        try {
            if ($outputCount -eq 0) {
                if ($PSCmdlet.ParameterSetName -eq 'ById') {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): blackout window rule not found having Id [$Id]"
                }
                elseif ($PSCmdlet.ParameterSetName -eq 'ByName') {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): blackout window rule not found having name [$name]"
                }
                else {
                    Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): no blackout window rules found"
                }
            }
        }
        catch {
            throw $_
        }
    }
}


function Remove-CVBlackoutWindow {
<#
.SYNOPSIS
    Method to remove/delete an blackout window rule from the CommServe.

.DESCRIPTION
    Method to remove/delete an blackout window rule from the CommServe.

.PARAMETER Id
    Specify blackout window rule to be removed by Id.

.PARAMETER Force
    Switch to Force override of default 'WhatIf' confirmation behavior.

.EXAMPLE
    Remove-CVBlackoutWindow -Id 42
    
.OUTPUTS
    Outputs [PSCustomObject] containing remove rule result.

.NOTES
    Author: Gary Stoops
    Company: Commvault
#>
    [CmdletBinding(SupportsShouldProcess = $True, ConfirmImpact = 'High')]
    [OutputType([PSCustomObject])]
    param(
        [Parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [Int32] $Id,

        [Switch] $Force
    )
    
    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
            $endpointSave = $sessionObj.requestProps.endpoint
        }
        catch {
            throw $_
        }
    }
    
    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"
    
        try {
            $sessionObj.requestProps.endpoint = $endpointSave
            $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{ruleId}', $Id)
            
            $headerObj = Get-CVRESTHeader $sessionObj
            $body = ''
            $payload = @{ }
            $payload.Add("headerObject", $headerObj)
            $payload.Add("body", $body)
            $validate = ''
                
            if ($Force -or $PSCmdlet.ShouldProcess($Id)) {
                $response = Submit-CVRESTRequest $payload $validate
            }
            else {
                $response = Submit-CVRESTRequest $payload $validate -DryRun
            }

            if ($response.IsValid) {
                Write-Output $response.Content
            }
            else {
                Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand): remove workflow request failed for Id [$Id]"
            }
        }
        catch {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"
    }
}


function Set-CVBlackoutWindow {
<#
.SYNOPSIS
    Method to set/update a blackout window rule.

.DESCRIPTION
    Method to set/update a blackout window rule.

.PARAMETER Properties
    Piped-in Properties set. 

.PARAMETER Force
    Switch to Force override of default 'WhatIf' confirmation behavior.

.EXAMPLE
    PS C:\>$props = Get-CVBlackoutWindow -Name 'My Blackout Rule'
    PS C:\>$props.name = 'Your Blackout Rule'
    PS C:\>$props | Set-CVBlackoutWindow -Force

.EXAMPLE
    PS C:\>$props = Get-CVBlackoutWindow -Id 7
    PS C:\>$props.operations = @(8, 512, 524888)
    PS C:\>$props | Set-CVBlackoutWindow -Force

.OUTPUTS
    Outputs [PSCustomObject] containing job submission result.

.NOTES
    Author: Gary Stoops
    Company: Commvault
#>
    [CmdletBinding(SupportsShouldProcess = $True, ConfirmImpact = 'Medium')]
    [OutputType([PSCustomObject])]
    param(
        [Parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [System.Object] $Properties,

        [Switch] $Force
    )

    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
            $endpointSave = $sessionObj.requestProps.endpoint
        }
        catch {
            throw $_
        }
    }

    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"

        try {
            $sessionObj.requestProps.endpoint = $endpointSave
            if ($Force -or $PSCmdlet.ShouldProcess($Properties.name)) {
                ProcessBlackoutWindowUpdate $sessionObj $Properties $False
            }
            else {
                ProcessBlackoutWindowUpdate $sessionObj $Properties $True
            }
        }
        catch {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"
    }
}


function Add-CVBlackoutWindow {
<#
.SYNOPSIS
    Method to add/create an blackout window rule.

.DESCRIPTION
    Method to add/create an blackout window rule.

.PARAMETER Properties
    Piped-in Properties set. 

.PARAMETER Force
    Switch to Force override of default 'WhatIf' confirmation behavior.

.EXAMPLE
    PS C:\>$props = @"
    {
        "operationWindow": {
            "endDate": 1521691200,
            "name": "Holiday_1",
            "startDate": 1520485200,
            "operations": [
            1,
            2
            ],
            "dayTime": [
            {
                "startTime": 46800,
                "endTime": 50400,
                "dayOfWeek": [
                1,
                2
                ]
            }
            ]
        },
        "entity": {
            "clientGroupId": 0,
            "clientId": 2
        }
    }"@    
    PS C:\>$propobj = $prop | ConvertFrom-Json
    PS C:\>$propobj | Add-CVBlackoutWindow -Force

.OUTPUTS
    Outputs [PSCustomObject] containing job submission result.

.NOTES
    Author: Gary Stoops
    Company: Commvault
#>
    [CmdletBinding(SupportsShouldProcess = $True, ConfirmImpact = 'Medium')]
    [OutputType([PSCustomObject])]
    param(
        [Parameter(Mandatory = $True, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [System.Object] $Properties,

        [Switch] $Force
    )

    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
            $endpointSave = $sessionObj.requestProps.endpoint
        }
        catch {
            throw $_
        }
    }

    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"

        try {
            $sessionObj.requestProps.endpoint = $endpointSave
            if ($Force -or ($PSCmdlet.ShouldProcess($Properties.operationWindow.name))) {
                ProcessBlackoutWindowUpdate $sessionObj $Properties $False
            }
            else {
                ProcessBlackoutWindowUpdate $sessionObj $Properties $True
            }
        }
        catch {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"
    }
}


function Enable-CVBlackoutWindowIgnoreHigherLevelRules {
<#
.SYNOPSIS
    Method to enable 'ignore CommCell higher-level blackout window rules' by entity.

.DESCRIPTION
    Method to enable 'ignore CommCell higher-level blackout window rules' by entity.

.PARAMETER ClientId
    Specify entity by ClientId.

.PARAMETER AppTypeId
    Specify entity by AppTypeId.

.PARAMETER InstanceId
    Specify entity by InstanceId.

.PARAMETER BackupsetId
    Specify entity by BackupsetId.

.PARAMETER SubclientId
    Specify entity by SubclientId.

.PARAMETER Force
    Switch to Force override of default 'WhatIf' confirmation behavior.

.EXAMPLE
    Enable-CVBlackoutWindowIgnoreHigherLevelRules -SubclientId 4
    
.OUTPUTS
    Outputs [PSCustomObject] containing result code.

.NOTES
    Author: Gary Stoops
    Company: Commvault
#>
    [CmdletBinding()]
    [OutputType([PSCustomObject])]
    param(
        [Parameter(Mandatory = $False, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [Int32] $ClientId,

        [Parameter(Mandatory = $False, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [Int32] $AppTypeId,
        
        [Parameter(Mandatory = $False, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [Int32] $InstanceId,

        [Parameter(Mandatory = $False, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [Int32] $BackupsetId,
        
        [Parameter(Mandatory = $False, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [Int32] $SubclientId,

        [Switch] $Force
    )
    
    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
            $endpointSave = $sessionObj.requestProps.endpoint
        }
        catch {
            throw $_
        }
    }
    
    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"
    
        try {
            $sessionObj.requestProps.endpoint = $endpointSave
            ProcessBlackoutWindowIgnoreHigherLevelRules $sessionObj $ClientId $AppTypeId $InstanceId $BackupsetId $SubclientId $Force.IsPresent
        }
        catch {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"
    }
}


function Disable-CVBlackoutWindowIgnoreHigherLevelRules {
<#
.SYNOPSIS
    Method to disable 'ignore CommCell higher-level blackout window rules' by entity.

.DESCRIPTION
    Method to disable 'ignore CommCell higher-level blackout window rules' by entity.

.PARAMETER ClientId
    Specify entity by ClientId.

.PARAMETER AppTypeId
    Specify entity by AppTypeId.

.PARAMETER InstanceId
    Specify entity by InstanceId.

.PARAMETER BackupsetId
    Specify entity by BackupsetId.

.PARAMETER SubclientId
    Specify entity by SubclientId.

.PARAMETER Force
    Switch to Force override of default 'WhatIf' confirmation behavior.

.EXAMPLE
    Disable-CVBlackoutWindowIgnoreHigherLevelRules -SubclientId 4
    
.OUTPUTS
    Outputs [PSCustomObject] containing result code.

.NOTES
    Author: Gary Stoops
    Company: Commvault
#>
    [CmdletBinding()]
    [OutputType([PSCustomObject])]
    param(
        [Parameter(Mandatory = $False, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [Int32] $ClientId,

        [Parameter(Mandatory = $False, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [Int32] $AppTypeId,
        
        [Parameter(Mandatory = $False, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [Int32] $InstanceId,

        [Parameter(Mandatory = $False, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [Int32] $BackupsetId,
        
        [Parameter(Mandatory = $False, ValueFromPipeline = $True, ValueFromPipelineByPropertyName = $True)]
        [ValidateNotNullorEmpty()]
        [Int32] $SubclientId,

        [Switch] $Force
    )

    begin { Write-Debug -Message "$($MyInvocation.MyCommand): begin"

        try {
            $sessionObj = Get-CVSessionDetail $MyInvocation.MyCommand.Name
            $endpointSave = $sessionObj.requestProps.endpoint
        }
        catch {
            throw $_
        }
    }

    process { Write-Debug -Message "$($MyInvocation.MyCommand): process"

        try {
            $sessionObj.requestProps.endpoint = $endpointSave
            ProcessBlackoutWindowIgnoreHigherLevelRules $sessionObj $ClientId $AppTypeId $InstanceId $BackupsetId $SubclientId $Force.IsPresent
        }
        catch {
            throw $_
        }
    }

    end { Write-Debug -Message "$($MyInvocation.MyCommand): end"
    }
}


function ProcessBlackoutWindowUpdate([System.Object] $Session, [System.Object] $Properties, [bool] $DryRun) {
    <#
        ruleEnabled    : True
        doNotSubmitJob : False
        endDate        : 1588230000
        level          : 1
        name           : GRS-LaptopClientsBoR
        ruleId         : 1
        startDate      : 1588057200
        operations     : {1}
        company        : @{_type_=61; providerId=0; providerDomainName=Commcell}
        entity         : @{schedulePolicyId=0; subclientId=0; clientGroupId=4; applicationId=0; clientName=Laptop Clients; backupsetId=0; commCellName=carbonwincs1; instanceId=0; schedulePolicyName=; clientId=0; subclientName=; backupsetName=;
                        instanceName=; clientGroupName=Laptop Clients; _type_=0; appName=}
        dayTime        : {@{startTime=28800; endTime=64800; dayOfWeek=System.Object[]}}            {
    #>            
    $body = @{}
    $opWin = @{}
    if (HasProperty $Properties 'ruleEnabled') {
        $opWin.Add('ruleEnabled', $Properties.ruleEnabled)
    }
    if (HasProperty $Properties 'doNotSubmitJob') {
        $opWin.Add('doNotSubmitJob', $Properties.doNotSubmitJob)
    }
    if (HasProperty $Properties 'endDate') {
        $opWin.Add('endDate', $Properties.endDate)
    }
    if (HasProperty $Properties 'level') {
        $opWin.Add('level', $Properties.level)
    }
    if (HasProperty $Properties 'name') {
        $opWin.Add('name', $Properties.name)
    }
    if (HasProperty $Properties 'ruleId') {
        $opWin.Add('ruleId', $Properties.ruleId)
    }
    if (HasProperty $Properties 'startDate') {
        $opWin.Add('startDate', $Properties.startDate)
    }
    if (HasProperty $Properties 'operations') {
        $opWin.Add('operations', $Properties.operations)
    }
    if (HasProperty $Properties 'company') {
        $opWin.Add('company', $Properties.company)
    }
    if (HasProperty $Properties 'dayTime') {
        $opWin.Add('dayTime', $Properties.dayTime)
    }
    if (HasProperty $Properties "operationWindow"){
        $opWin = $Properties.operationWindow
    }
    $entity = $Properties.entity
    $body.Add('operationWindow', $opWin)
    $body.Add('entity', $entity)
    $body = ($body | ConvertTo-Json -Depth 10)

    $headerObj = Get-CVRESTHeader $sessionObj
    $payload = @{ }
    $payload.Add('headerObject', $headerObj)
    $payload.Add('body', $body)
    $validate = ''

    if (-not $DryRun) {
        $response = Submit-CVRESTRequest $payload $validate
    }
    else {
        $response = Submit-CVRESTRequest $payload $validate -DryRun
    }

    Write-Output $response.Content
}


function ProcessBlackoutWindowIgnoreHigherLevelRules {
    [CmdletBinding(SupportsShouldProcess = $True, ConfirmImpact = 'High')]
    [OutputType([PSCustomObject])]
    param(
        [System.Object] $Session,
        [Int32] $ClientId,
        [Int32] $AppTypeId,
        [Int32] $InstanceId,
        [Int32] $BackupsetId,
        [Int32] $SubclientId,
        [bool] $Force
    )

    $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{clientId}', $ClientId)
    $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{appTypeId}', $AppTypeId)
    $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{instanceId}', $InstanceId)
    $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{backupsetId}', $BackupsetId)
    $sessionObj.requestProps.endpoint = $sessionObj.requestProps.endpoint -creplace ('{subclientId}', $SubclientId) 

    $headerObj = Get-CVRESTHeader $sessionObj
    $body = ''
    $payload = @{ }
    $payload.Add("headerObject", $headerObj)
    $payload.Add("body", $body)
        
    $validate = 'error'

    if ($Force -or $PSCmdlet.ShouldProcess($sessionObj.requestProps.endpoint)) {
        $response = Submit-CVRESTRequest $payload $validate
    
        if ($response.IsValid) {
            if ($response.Content.error.errorCode -eq 0) {
                Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand.Name): request was successful"      
            }
            else {
                Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand.Name): request failed: [$($response.Content.error)]"
            }
        } 
        else {
            Write-Information -InformationAction Continue -MessageData "INFO: $($MyInvocation.MyCommand.Name): request failed: [$($response.Content)]"      
        }
    }
    else {
        $response = Submit-CVRESTRequest $payload $validate -DryRun
    }
}


function HasProperty($Object, $PropertyName)
{
    $PropertyName -in $Object.PSobject.Properties.Name
}